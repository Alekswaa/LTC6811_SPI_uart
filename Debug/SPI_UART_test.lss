
SPI_UART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001410  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20400000  00401410  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000244  20400004  00401414  00020004  2**2
                  ALLOC
  3 .heap         00000200  20400248  00401658  00020004  2**0
                  ALLOC
  4 .stack        00000400  20400448  00401858  00020004  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020032  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000fb5c  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002520  00000000  00000000  0002fbe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000064be  00000000  00000000  00032107  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000850  00000000  00000000  000385c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007d0  00000000  00000000  00038e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003d881  00000000  00000000  000395e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f391  00000000  00000000  00076e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00145a32  00000000  00000000  000861f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000015bc  00000000  00000000  001cbc2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 08 40 20 a5 02 40 00 a1 02 40 00 a1 02 40 00     H.@ ..@...@...@.
  400010:	a1 02 40 00 a1 02 40 00 a1 02 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a1 02 40 00 a1 02 40 00 00 00 00 00 a1 02 40 00     ..@...@.......@.
  40003c:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  40004c:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  40005c:	a1 02 40 00 a1 02 40 00 00 00 00 00 a1 02 40 00     ..@...@.......@.
  40006c:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  40007c:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  40008c:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  40009c:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  4000ac:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  4000bc:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  4000cc:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  4000dc:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  4000ec:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  4000fc:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  40010c:	a1 02 40 00 a1 02 40 00 a1 02 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ......@...@...@.
  40012c:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  40013c:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  40014c:	a1 02 40 00 a1 02 40 00 a1 02 40 00 a1 02 40 00     ..@...@...@...@.
  40015c:	a1 02 40 00 a1 02 40 00 a1 02 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400004 	.word	0x20400004
  400184:	00000000 	.word	0x00000000
  400188:	00401410 	.word	0x00401410

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00401410 	.word	0x00401410
  4001c8:	20400008 	.word	0x20400008
  4001cc:	00401410 	.word	0x00401410
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	00400459 	.word	0x00400459

004001e0 <PEC_calculate>:
 * \brief Transmit and receive data from LTC6811. PEC is verified
 * \param[in] data Pointer to char array containing PEC
 * \param[in] len  Number of bytes in the PEC
 * @returns the 2 PEC bytes
 */
uint16_t PEC_calculate(uint8_t *data , int len){
  4001e0:	b430      	push	{r4, r5}
	
    unsigned int remainder, address;
    remainder = 16;/*PEC seed*/
    int i;
    for (i = 0; i < len; i++){
  4001e2:	2200      	movs	r2, #0
    remainder = 16;/*PEC seed*/
  4001e4:	2410      	movs	r4, #16
    for (i = 0; i < len; i++){
  4001e6:	e009      	b.n	4001fc <PEC_calculate+0x1c>
        address = ((remainder >> 7) ^ data[i]) & 0xff;/*calculate PEC table address*/
  4001e8:	5c83      	ldrb	r3, [r0, r2]
  4001ea:	ea83 13d4 	eor.w	r3, r3, r4, lsr #7
  4001ee:	b2db      	uxtb	r3, r3
         remainder = (remainder << 8 ) ^ crc15Table[address];
  4001f0:	4d05      	ldr	r5, [pc, #20]	; (400208 <PEC_calculate+0x28>)
  4001f2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
  4001f6:	ea83 2404 	eor.w	r4, r3, r4, lsl #8
    for (i = 0; i < len; i++){
  4001fa:	3201      	adds	r2, #1
  4001fc:	428a      	cmp	r2, r1
  4001fe:	dbf3      	blt.n	4001e8 <PEC_calculate+0x8>
		//remainder = (remainder << 8 ) ^ pec15Table[address];
    }
    return(remainder*2);/*The CRC15 has a 0 in the LSB so the final value must be multiplied by 2*/
  400200:	0060      	lsls	r0, r4, #1
  400202:	b280      	uxth	r0, r0
}
  400204:	bc30      	pop	{r4, r5}
  400206:	4770      	bx	lr
  400208:	00400f38 	.word	0x00400f38

0040020c <init_PEC15_Table>:


void init_PEC15_Table(){
	unsigned int remainder;
	for (int i = 0; i < 256; i++){
  40020c:	2000      	movs	r0, #0
  40020e:	e010      	b.n	400232 <init_PEC15_Table+0x26>
				remainder = ((remainder << 1));
				remainder = (remainder ^ CRC15_POLY);
			}
			else
			{
				remainder = ((remainder << 1));
  400210:	0052      	lsls	r2, r2, #1
		for (int bit = 8; bit > 0; --bit){
  400212:	3b01      	subs	r3, #1
  400214:	2b00      	cmp	r3, #0
  400216:	dd08      	ble.n	40022a <init_PEC15_Table+0x1e>
			if (remainder & 0x4000){
  400218:	f412 4f80 	tst.w	r2, #16384	; 0x4000
  40021c:	d0f8      	beq.n	400210 <init_PEC15_Table+0x4>
				remainder = (remainder ^ CRC15_POLY);
  40021e:	4908      	ldr	r1, [pc, #32]	; (400240 <init_PEC15_Table+0x34>)
  400220:	f9b1 1000 	ldrsh.w	r1, [r1]
  400224:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
  400228:	e7f3      	b.n	400212 <init_PEC15_Table+0x6>
			}
		}
		pec15Table[i] = remainder&0xFFFF;
  40022a:	4b06      	ldr	r3, [pc, #24]	; (400244 <init_PEC15_Table+0x38>)
  40022c:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
	for (int i = 0; i < 256; i++){
  400230:	3001      	adds	r0, #1
  400232:	28ff      	cmp	r0, #255	; 0xff
  400234:	dc02      	bgt.n	40023c <init_PEC15_Table+0x30>
		remainder = i << 7;
  400236:	01c2      	lsls	r2, r0, #7
		for (int bit = 8; bit > 0; --bit){
  400238:	2308      	movs	r3, #8
  40023a:	e7eb      	b.n	400214 <init_PEC15_Table+0x8>
	}
}
  40023c:	4770      	bx	lr
  40023e:	bf00      	nop
  400240:	20400000 	.word	0x20400000
  400244:	20400024 	.word	0x20400024

00400248 <isoSpi_send>:
 * \param[in] transfer_data Pointer to uint8_t array containing the data to send
 * \param[in] size 	 Number of bytes to send and read. 
 * \param[out] receive_data  Pointer for output data using uint8_t data
 * @returns 0 if fine, -1 if wrong PEC
 */
void isoSpi_send(uint8_t *transfer_data, int size){
  400248:	b570      	push	{r4, r5, r6, lr}
  40024a:	b082      	sub	sp, #8
  40024c:	4605      	mov	r5, r0
  40024e:	460e      	mov	r6, r1
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_1, &io);
  400250:	4c0c      	ldr	r4, [pc, #48]	; (400284 <isoSpi_send+0x3c>)
  400252:	a901      	add	r1, sp, #4
  400254:	4620      	mov	r0, r4
  400256:	4b0c      	ldr	r3, [pc, #48]	; (400288 <isoSpi_send+0x40>)
  400258:	4798      	blx	r3
	spi_m_sync_enable(&SPI_1);
  40025a:	4620      	mov	r0, r4
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <isoSpi_send+0x44>)
  40025e:	4798      	blx	r3
	spi_m_sync_set_data_order(&SPI_1,SPI_DATA_ORDER_MSB_1ST);
  400260:	2100      	movs	r1, #0
  400262:	4620      	mov	r0, r4
  400264:	4b0a      	ldr	r3, [pc, #40]	; (400290 <isoSpi_send+0x48>)
  400266:	4798      	blx	r3
	spi_m_sync_set_char_size(&SPI_1,SPI_CHAR_SIZE_8); 
  400268:	2100      	movs	r1, #0
  40026a:	4620      	mov	r0, r4
  40026c:	4b09      	ldr	r3, [pc, #36]	; (400294 <isoSpi_send+0x4c>)
  40026e:	4798      	blx	r3
	//uint16_t delay_100_us = 100; 
	
	struct spi_xfer spi_transmit_buffer;
	io_write(io, transfer_data, size);
  400270:	b2b2      	uxth	r2, r6
  400272:	4629      	mov	r1, r5
  400274:	9801      	ldr	r0, [sp, #4]
  400276:	4b08      	ldr	r3, [pc, #32]	; (400298 <isoSpi_send+0x50>)
  400278:	4798      	blx	r3
	//spi_transmit_buffer.rxbuf  = receive_data;
	//for(int i = 0; i < size; i++){
		// spi_transmit_buffer.txbuf = transfer_data;
		// spi_m_sync_transfer(&SPI_1, &spi_transmit_buffer);
	//}
	spi_m_sync_disable(&SPI_1);
  40027a:	4620      	mov	r0, r4
  40027c:	4b07      	ldr	r3, [pc, #28]	; (40029c <isoSpi_send+0x54>)
  40027e:	4798      	blx	r3
	
}
  400280:	b002      	add	sp, #8
  400282:	bd70      	pop	{r4, r5, r6, pc}
  400284:	20400224 	.word	0x20400224
  400288:	004006dd 	.word	0x004006dd
  40028c:	0040057d 	.word	0x0040057d
  400290:	004005f9 	.word	0x004005f9
  400294:	004005cd 	.word	0x004005cd
  400298:	004004dd 	.word	0x004004dd
  40029c:	004005a5 	.word	0x004005a5

004002a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4002a0:	e7fe      	b.n	4002a0 <Dummy_Handler>
	...

004002a4 <Reset_Handler>:
{
  4002a4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4002a6:	4b10      	ldr	r3, [pc, #64]	; (4002e8 <Reset_Handler+0x44>)
  4002a8:	4a10      	ldr	r2, [pc, #64]	; (4002ec <Reset_Handler+0x48>)
  4002aa:	429a      	cmp	r2, r3
  4002ac:	d009      	beq.n	4002c2 <Reset_Handler+0x1e>
  4002ae:	4b0e      	ldr	r3, [pc, #56]	; (4002e8 <Reset_Handler+0x44>)
  4002b0:	4a0e      	ldr	r2, [pc, #56]	; (4002ec <Reset_Handler+0x48>)
  4002b2:	e003      	b.n	4002bc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4002b4:	6811      	ldr	r1, [r2, #0]
  4002b6:	6019      	str	r1, [r3, #0]
  4002b8:	3304      	adds	r3, #4
  4002ba:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4002bc:	490c      	ldr	r1, [pc, #48]	; (4002f0 <Reset_Handler+0x4c>)
  4002be:	428b      	cmp	r3, r1
  4002c0:	d3f8      	bcc.n	4002b4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4002c2:	4b0c      	ldr	r3, [pc, #48]	; (4002f4 <Reset_Handler+0x50>)
  4002c4:	e002      	b.n	4002cc <Reset_Handler+0x28>
                *pDest++ = 0;
  4002c6:	2200      	movs	r2, #0
  4002c8:	601a      	str	r2, [r3, #0]
  4002ca:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4002cc:	4a0a      	ldr	r2, [pc, #40]	; (4002f8 <Reset_Handler+0x54>)
  4002ce:	4293      	cmp	r3, r2
  4002d0:	d3f9      	bcc.n	4002c6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4002d2:	4a0a      	ldr	r2, [pc, #40]	; (4002fc <Reset_Handler+0x58>)
  4002d4:	4b0a      	ldr	r3, [pc, #40]	; (400300 <Reset_Handler+0x5c>)
  4002d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4002da:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4002dc:	4b09      	ldr	r3, [pc, #36]	; (400304 <Reset_Handler+0x60>)
  4002de:	4798      	blx	r3
        main();
  4002e0:	4b09      	ldr	r3, [pc, #36]	; (400308 <Reset_Handler+0x64>)
  4002e2:	4798      	blx	r3
  4002e4:	e7fe      	b.n	4002e4 <Reset_Handler+0x40>
  4002e6:	bf00      	nop
  4002e8:	20400000 	.word	0x20400000
  4002ec:	00401410 	.word	0x00401410
  4002f0:	20400004 	.word	0x20400004
  4002f4:	20400004 	.word	0x20400004
  4002f8:	20400248 	.word	0x20400248
  4002fc:	e000ed00 	.word	0xe000ed00
  400300:	00400000 	.word	0x00400000
  400304:	00400ef1 	.word	0x00400ef1
  400308:	00400e65 	.word	0x00400e65

0040030c <SPI_1_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40030c:	4b16      	ldr	r3, [pc, #88]	; (400368 <SPI_1_PORT_init+0x5c>)
  40030e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400310:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  400314:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400316:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400318:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
  40031c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40031e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400322:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400326:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  40032a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40032c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40032e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
  400332:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400334:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400338:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40033a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40033c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  400340:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400342:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400344:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400348:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40034a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40034e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_PER = mask;
  400350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400354:	601a      	str	r2, [r3, #0]
  400356:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40035a:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_OER = mask;
  40035c:	611a      	str	r2, [r3, #16]
  40035e:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  400360:	6319      	str	r1, [r3, #48]	; 0x30
  400362:	631a      	str	r2, [r3, #48]	; 0x30
  400364:	4770      	bx	lr
  400366:	bf00      	nop
  400368:	400e1200 	.word	0x400e1200

0040036c <SPI_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40036c:	4b05      	ldr	r3, [pc, #20]	; (400384 <SPI_1_CLOCK_init+0x18>)
  40036e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400372:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400376:	d104      	bne.n	400382 <SPI_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400378:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40037c:	4b01      	ldr	r3, [pc, #4]	; (400384 <SPI_1_CLOCK_init+0x18>)
  40037e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400382:	4770      	bx	lr
  400384:	400e0600 	.word	0x400e0600

00400388 <SPI_1_init>:

/**
 * @brief Initialize SPI1 peripheral
 */
void SPI_1_init(void)
{
  400388:	b510      	push	{r4, lr}
	SPI_1_CLOCK_init();
  40038a:	4b08      	ldr	r3, [pc, #32]	; (4003ac <SPI_1_init+0x24>)
  40038c:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_1, _spi_get_spi_m_sync());
  40038e:	4b08      	ldr	r3, [pc, #32]	; (4003b0 <SPI_1_init+0x28>)
  400390:	4798      	blx	r3
  400392:	4c08      	ldr	r4, [pc, #32]	; (4003b4 <SPI_1_init+0x2c>)
  400394:	4601      	mov	r1, r0
  400396:	4620      	mov	r0, r4
  400398:	4b07      	ldr	r3, [pc, #28]	; (4003b8 <SPI_1_init+0x30>)
  40039a:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SPI1);
  40039c:	4907      	ldr	r1, [pc, #28]	; (4003bc <SPI_1_init+0x34>)
  40039e:	4620      	mov	r0, r4
  4003a0:	4b07      	ldr	r3, [pc, #28]	; (4003c0 <SPI_1_init+0x38>)
  4003a2:	4798      	blx	r3
	SPI_1_PORT_init();
  4003a4:	4b07      	ldr	r3, [pc, #28]	; (4003c4 <SPI_1_init+0x3c>)
  4003a6:	4798      	blx	r3
  4003a8:	bd10      	pop	{r4, pc}
  4003aa:	bf00      	nop
  4003ac:	0040036d 	.word	0x0040036d
  4003b0:	00400bfd 	.word	0x00400bfd
  4003b4:	20400224 	.word	0x20400224
  4003b8:	0040050d 	.word	0x0040050d
  4003bc:	40058000 	.word	0x40058000
  4003c0:	0040052d 	.word	0x0040052d
  4003c4:	0040030d 	.word	0x0040030d

004003c8 <delay_driver_init>:
}

void delay_driver_init(void)
{
  4003c8:	b508      	push	{r3, lr}
	delay_init(SysTick);
  4003ca:	4802      	ldr	r0, [pc, #8]	; (4003d4 <delay_driver_init+0xc>)
  4003cc:	4b02      	ldr	r3, [pc, #8]	; (4003d8 <delay_driver_init+0x10>)
  4003ce:	4798      	blx	r3
  4003d0:	bd08      	pop	{r3, pc}
  4003d2:	bf00      	nop
  4003d4:	e000e010 	.word	0xe000e010
  4003d8:	004004a9 	.word	0x004004a9

004003dc <USART_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003dc:	4b0a      	ldr	r3, [pc, #40]	; (400408 <USART_1_PORT_init+0x2c>)
  4003de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003e0:	f022 0220 	bic.w	r2, r2, #32
  4003e4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003e6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003e8:	f042 0220 	orr.w	r2, r2, #32
  4003ec:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003ee:	2220      	movs	r2, #32
  4003f0:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  4003f8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003fa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  400400:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400402:	2240      	movs	r2, #64	; 0x40
  400404:	605a      	str	r2, [r3, #4]
  400406:	4770      	bx	lr
  400408:	400e0e00 	.word	0x400e0e00

0040040c <USART_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40040c:	4b04      	ldr	r3, [pc, #16]	; (400420 <USART_1_CLOCK_init+0x14>)
  40040e:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400410:	f413 7f80 	tst.w	r3, #256	; 0x100
  400414:	d103      	bne.n	40041e <USART_1_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400416:	f44f 7280 	mov.w	r2, #256	; 0x100
  40041a:	4b01      	ldr	r3, [pc, #4]	; (400420 <USART_1_CLOCK_init+0x14>)
  40041c:	611a      	str	r2, [r3, #16]
  40041e:	4770      	bx	lr
  400420:	400e0600 	.word	0x400e0600

00400424 <USART_1_init>:
{
	_pmc_enable_periph_clock(ID_UART1);
}

void USART_1_init(void)
{
  400424:	b508      	push	{r3, lr}
	USART_1_CLOCK_init();
  400426:	4b06      	ldr	r3, [pc, #24]	; (400440 <USART_1_init+0x1c>)
  400428:	4798      	blx	r3
	usart_sync_init(&USART_1, UART1, _uart_get_usart_sync());
  40042a:	4b06      	ldr	r3, [pc, #24]	; (400444 <USART_1_init+0x20>)
  40042c:	4798      	blx	r3
  40042e:	4602      	mov	r2, r0
  400430:	4905      	ldr	r1, [pc, #20]	; (400448 <USART_1_init+0x24>)
  400432:	4806      	ldr	r0, [pc, #24]	; (40044c <USART_1_init+0x28>)
  400434:	4b06      	ldr	r3, [pc, #24]	; (400450 <USART_1_init+0x2c>)
  400436:	4798      	blx	r3
	USART_1_PORT_init();
  400438:	4b06      	ldr	r3, [pc, #24]	; (400454 <USART_1_init+0x30>)
  40043a:	4798      	blx	r3
  40043c:	bd08      	pop	{r3, pc}
  40043e:	bf00      	nop
  400440:	0040040d 	.word	0x0040040d
  400444:	00400e61 	.word	0x00400e61
  400448:	400e0a00 	.word	0x400e0a00
  40044c:	2040023c 	.word	0x2040023c
  400450:	004007d9 	.word	0x004007d9
  400454:	004003dd 	.word	0x004003dd

00400458 <system_init>:
}

void system_init(void)
{
  400458:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40045a:	4b07      	ldr	r3, [pc, #28]	; (400478 <system_init+0x20>)
  40045c:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40045e:	4a07      	ldr	r2, [pc, #28]	; (40047c <system_init+0x24>)
  400460:	6853      	ldr	r3, [r2, #4]
  400462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400466:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	SPI_1_init();
  400468:	4b05      	ldr	r3, [pc, #20]	; (400480 <system_init+0x28>)
  40046a:	4798      	blx	r3

	delay_driver_init();
  40046c:	4b05      	ldr	r3, [pc, #20]	; (400484 <system_init+0x2c>)
  40046e:	4798      	blx	r3

	USART_1_init();
  400470:	4b05      	ldr	r3, [pc, #20]	; (400488 <system_init+0x30>)
  400472:	4798      	blx	r3
  400474:	bd08      	pop	{r3, pc}
  400476:	bf00      	nop
  400478:	00400839 	.word	0x00400839
  40047c:	400e1850 	.word	0x400e1850
  400480:	00400389 	.word	0x00400389
  400484:	004003c9 	.word	0x004003c9
  400488:	00400425 	.word	0x00400425

0040048c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40048c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400490:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400492:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400494:	f3bf 8f5f 	dmb	sy
  400498:	4770      	bx	lr

0040049a <atomic_leave_critical>:
  40049a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40049e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4004a0:	f383 8810 	msr	PRIMASK, r3
  4004a4:	4770      	bx	lr
	...

004004a8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4004a8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4004aa:	4b02      	ldr	r3, [pc, #8]	; (4004b4 <delay_init+0xc>)
  4004ac:	6018      	str	r0, [r3, #0]
  4004ae:	4b02      	ldr	r3, [pc, #8]	; (4004b8 <delay_init+0x10>)
  4004b0:	4798      	blx	r3
  4004b2:	bd08      	pop	{r3, pc}
  4004b4:	20400020 	.word	0x20400020
  4004b8:	00400c15 	.word	0x00400c15

004004bc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4004bc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4004be:	4b04      	ldr	r3, [pc, #16]	; (4004d0 <delay_ms+0x14>)
  4004c0:	681c      	ldr	r4, [r3, #0]
  4004c2:	4b04      	ldr	r3, [pc, #16]	; (4004d4 <delay_ms+0x18>)
  4004c4:	4798      	blx	r3
  4004c6:	4601      	mov	r1, r0
  4004c8:	4620      	mov	r0, r4
  4004ca:	4b03      	ldr	r3, [pc, #12]	; (4004d8 <delay_ms+0x1c>)
  4004cc:	4798      	blx	r3
  4004ce:	bd10      	pop	{r4, pc}
  4004d0:	20400020 	.word	0x20400020
  4004d4:	00400827 	.word	0x00400827
  4004d8:	00400c21 	.word	0x00400c21

004004dc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4004dc:	b570      	push	{r4, r5, r6, lr}
  4004de:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4004e0:	4604      	mov	r4, r0
  4004e2:	460d      	mov	r5, r1
  4004e4:	2800      	cmp	r0, #0
  4004e6:	bf18      	it	ne
  4004e8:	2900      	cmpne	r1, #0
  4004ea:	bf14      	ite	ne
  4004ec:	2001      	movne	r0, #1
  4004ee:	2000      	moveq	r0, #0
  4004f0:	2234      	movs	r2, #52	; 0x34
  4004f2:	4904      	ldr	r1, [pc, #16]	; (400504 <io_write+0x28>)
  4004f4:	4b04      	ldr	r3, [pc, #16]	; (400508 <io_write+0x2c>)
  4004f6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  4004f8:	6823      	ldr	r3, [r4, #0]
  4004fa:	4632      	mov	r2, r6
  4004fc:	4629      	mov	r1, r5
  4004fe:	4620      	mov	r0, r4
  400500:	4798      	blx	r3
}
  400502:	bd70      	pop	{r4, r5, r6, pc}
  400504:	0040134c 	.word	0x0040134c
  400508:	00400821 	.word	0x00400821

0040050c <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  40050c:	b538      	push	{r3, r4, r5, lr}
  40050e:	460d      	mov	r5, r1
	ASSERT(spi);
  400510:	4604      	mov	r4, r0
  400512:	2239      	movs	r2, #57	; 0x39
  400514:	4903      	ldr	r1, [pc, #12]	; (400524 <spi_m_sync_set_func_ptr+0x18>)
  400516:	3000      	adds	r0, #0
  400518:	bf18      	it	ne
  40051a:	2001      	movne	r0, #1
  40051c:	4b02      	ldr	r3, [pc, #8]	; (400528 <spi_m_sync_set_func_ptr+0x1c>)
  40051e:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400520:	6025      	str	r5, [r4, #0]
  400522:	bd38      	pop	{r3, r4, r5, pc}
  400524:	00401360 	.word	0x00401360
  400528:	00400821 	.word	0x00400821

0040052c <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  40052c:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  40052e:	4604      	mov	r4, r0
  400530:	460d      	mov	r5, r1
  400532:	2800      	cmp	r0, #0
  400534:	bf18      	it	ne
  400536:	2900      	cmpne	r1, #0
  400538:	bf14      	ite	ne
  40053a:	2001      	movne	r0, #1
  40053c:	2000      	moveq	r0, #0
  40053e:	2240      	movs	r2, #64	; 0x40
  400540:	4909      	ldr	r1, [pc, #36]	; (400568 <spi_m_sync_init+0x3c>)
  400542:	4b0a      	ldr	r3, [pc, #40]	; (40056c <spi_m_sync_init+0x40>)
  400544:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400546:	4620      	mov	r0, r4
  400548:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  40054c:	4629      	mov	r1, r5
  40054e:	4b08      	ldr	r3, [pc, #32]	; (400570 <spi_m_sync_init+0x44>)
  400550:	4798      	blx	r3

	if (rc < 0) {
  400552:	2800      	cmp	r0, #0
  400554:	db07      	blt.n	400566 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40055a:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  40055c:	4b05      	ldr	r3, [pc, #20]	; (400574 <spi_m_sync_init+0x48>)
  40055e:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  400560:	4b05      	ldr	r3, [pc, #20]	; (400578 <spi_m_sync_init+0x4c>)
  400562:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  400564:	2000      	movs	r0, #0
}
  400566:	bd38      	pop	{r3, r4, r5, pc}
  400568:	00401360 	.word	0x00401360
  40056c:	00400821 	.word	0x00400821
  400570:	00400989 	.word	0x00400989
  400574:	004006a1 	.word	0x004006a1
  400578:	00400665 	.word	0x00400665

0040057c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  40057c:	b510      	push	{r4, lr}
	ASSERT(spi);
  40057e:	4604      	mov	r4, r0
  400580:	2257      	movs	r2, #87	; 0x57
  400582:	4905      	ldr	r1, [pc, #20]	; (400598 <spi_m_sync_enable+0x1c>)
  400584:	3000      	adds	r0, #0
  400586:	bf18      	it	ne
  400588:	2001      	movne	r0, #1
  40058a:	4b04      	ldr	r3, [pc, #16]	; (40059c <spi_m_sync_enable+0x20>)
  40058c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  40058e:	1d20      	adds	r0, r4, #4
  400590:	4b03      	ldr	r3, [pc, #12]	; (4005a0 <spi_m_sync_enable+0x24>)
  400592:	4798      	blx	r3
  400594:	bd10      	pop	{r4, pc}
  400596:	bf00      	nop
  400598:	00401360 	.word	0x00401360
  40059c:	00400821 	.word	0x00400821
  4005a0:	00400a31 	.word	0x00400a31

004005a4 <spi_m_sync_disable>:
}

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
  4005a4:	b510      	push	{r4, lr}
	ASSERT(spi);
  4005a6:	4604      	mov	r4, r0
  4005a8:	225d      	movs	r2, #93	; 0x5d
  4005aa:	4905      	ldr	r1, [pc, #20]	; (4005c0 <spi_m_sync_disable+0x1c>)
  4005ac:	3000      	adds	r0, #0
  4005ae:	bf18      	it	ne
  4005b0:	2001      	movne	r0, #1
  4005b2:	4b04      	ldr	r3, [pc, #16]	; (4005c4 <spi_m_sync_disable+0x20>)
  4005b4:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
  4005b6:	1d20      	adds	r0, r4, #4
  4005b8:	4b03      	ldr	r3, [pc, #12]	; (4005c8 <spi_m_sync_disable+0x24>)
  4005ba:	4798      	blx	r3
  4005bc:	bd10      	pop	{r4, pc}
  4005be:	bf00      	nop
  4005c0:	00401360 	.word	0x00401360
  4005c4:	00400821 	.word	0x00400821
  4005c8:	00400a65 	.word	0x00400a65

004005cc <spi_m_sync_set_char_size>:
	ASSERT(spi);
	return _spi_m_sync_set_mode(&spi->dev, mode);
}

int32_t spi_m_sync_set_char_size(struct spi_m_sync_descriptor *spi, const enum spi_char_size char_size)
{
  4005cc:	b538      	push	{r3, r4, r5, lr}
  4005ce:	460d      	mov	r5, r1
	ASSERT(spi);
  4005d0:	4604      	mov	r4, r0
  4005d2:	226f      	movs	r2, #111	; 0x6f
  4005d4:	4905      	ldr	r1, [pc, #20]	; (4005ec <spi_m_sync_set_char_size+0x20>)
  4005d6:	3000      	adds	r0, #0
  4005d8:	bf18      	it	ne
  4005da:	2001      	movne	r0, #1
  4005dc:	4b04      	ldr	r3, [pc, #16]	; (4005f0 <spi_m_sync_set_char_size+0x24>)
  4005de:	4798      	blx	r3
	return _spi_m_sync_set_char_size(&spi->dev, char_size);
  4005e0:	4629      	mov	r1, r5
  4005e2:	1d20      	adds	r0, r4, #4
  4005e4:	4b03      	ldr	r3, [pc, #12]	; (4005f4 <spi_m_sync_set_char_size+0x28>)
  4005e6:	4798      	blx	r3
}
  4005e8:	bd38      	pop	{r3, r4, r5, pc}
  4005ea:	bf00      	nop
  4005ec:	00401360 	.word	0x00401360
  4005f0:	00400821 	.word	0x00400821
  4005f4:	00400ac5 	.word	0x00400ac5

004005f8 <spi_m_sync_set_data_order>:

int32_t spi_m_sync_set_data_order(struct spi_m_sync_descriptor *spi, const enum spi_data_order dord)
{
  4005f8:	b538      	push	{r3, r4, r5, lr}
  4005fa:	460d      	mov	r5, r1
	ASSERT(spi);
  4005fc:	4604      	mov	r4, r0
  4005fe:	2275      	movs	r2, #117	; 0x75
  400600:	4905      	ldr	r1, [pc, #20]	; (400618 <spi_m_sync_set_data_order+0x20>)
  400602:	3000      	adds	r0, #0
  400604:	bf18      	it	ne
  400606:	2001      	movne	r0, #1
  400608:	4b04      	ldr	r3, [pc, #16]	; (40061c <spi_m_sync_set_data_order+0x24>)
  40060a:	4798      	blx	r3
	return _spi_m_sync_set_data_order(&spi->dev, dord);
  40060c:	4629      	mov	r1, r5
  40060e:	1d20      	adds	r0, r4, #4
  400610:	4b03      	ldr	r3, [pc, #12]	; (400620 <spi_m_sync_set_data_order+0x28>)
  400612:	4798      	blx	r3
}
  400614:	bd38      	pop	{r3, r4, r5, pc}
  400616:	bf00      	nop
  400618:	00401360 	.word	0x00401360
  40061c:	00400821 	.word	0x00400821
  400620:	00400a99 	.word	0x00400a99

00400624 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400624:	b530      	push	{r4, r5, lr}
  400626:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400628:	4605      	mov	r5, r0
  40062a:	460c      	mov	r4, r1
  40062c:	2800      	cmp	r0, #0
  40062e:	bf18      	it	ne
  400630:	2900      	cmpne	r1, #0
  400632:	bf14      	ite	ne
  400634:	2001      	movne	r0, #1
  400636:	2000      	moveq	r0, #0
  400638:	22b3      	movs	r2, #179	; 0xb3
  40063a:	4907      	ldr	r1, [pc, #28]	; (400658 <spi_m_sync_transfer+0x34>)
  40063c:	4b07      	ldr	r3, [pc, #28]	; (40065c <spi_m_sync_transfer+0x38>)
  40063e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400640:	6823      	ldr	r3, [r4, #0]
  400642:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400644:	6863      	ldr	r3, [r4, #4]
  400646:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400648:	68a3      	ldr	r3, [r4, #8]
  40064a:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  40064c:	a901      	add	r1, sp, #4
  40064e:	1d28      	adds	r0, r5, #4
  400650:	4b03      	ldr	r3, [pc, #12]	; (400660 <spi_m_sync_transfer+0x3c>)
  400652:	4798      	blx	r3
}
  400654:	b005      	add	sp, #20
  400656:	bd30      	pop	{r4, r5, pc}
  400658:	00401360 	.word	0x00401360
  40065c:	00400821 	.word	0x00400821
  400660:	00400afd 	.word	0x00400afd

00400664 <_spi_m_sync_io_write>:
{
  400664:	b570      	push	{r4, r5, r6, lr}
  400666:	b084      	sub	sp, #16
  400668:	460e      	mov	r6, r1
  40066a:	4615      	mov	r5, r2
	ASSERT(io);
  40066c:	4604      	mov	r4, r0
  40066e:	22a3      	movs	r2, #163	; 0xa3
  400670:	4908      	ldr	r1, [pc, #32]	; (400694 <_spi_m_sync_io_write+0x30>)
  400672:	3000      	adds	r0, #0
  400674:	bf18      	it	ne
  400676:	2001      	movne	r0, #1
  400678:	4b07      	ldr	r3, [pc, #28]	; (400698 <_spi_m_sync_io_write+0x34>)
  40067a:	4798      	blx	r3
	xfer.rxbuf = 0;
  40067c:	2300      	movs	r3, #0
  40067e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400680:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  400682:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400684:	a901      	add	r1, sp, #4
  400686:	f1a4 000c 	sub.w	r0, r4, #12
  40068a:	4b04      	ldr	r3, [pc, #16]	; (40069c <_spi_m_sync_io_write+0x38>)
  40068c:	4798      	blx	r3
}
  40068e:	b004      	add	sp, #16
  400690:	bd70      	pop	{r4, r5, r6, pc}
  400692:	bf00      	nop
  400694:	00401360 	.word	0x00401360
  400698:	00400821 	.word	0x00400821
  40069c:	00400625 	.word	0x00400625

004006a0 <_spi_m_sync_io_read>:
{
  4006a0:	b570      	push	{r4, r5, r6, lr}
  4006a2:	b084      	sub	sp, #16
  4006a4:	460e      	mov	r6, r1
  4006a6:	4615      	mov	r5, r2
	ASSERT(io);
  4006a8:	4604      	mov	r4, r0
  4006aa:	2287      	movs	r2, #135	; 0x87
  4006ac:	4908      	ldr	r1, [pc, #32]	; (4006d0 <_spi_m_sync_io_read+0x30>)
  4006ae:	3000      	adds	r0, #0
  4006b0:	bf18      	it	ne
  4006b2:	2001      	movne	r0, #1
  4006b4:	4b07      	ldr	r3, [pc, #28]	; (4006d4 <_spi_m_sync_io_read+0x34>)
  4006b6:	4798      	blx	r3
	xfer.rxbuf = buf;
  4006b8:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  4006ba:	2300      	movs	r3, #0
  4006bc:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  4006be:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  4006c0:	a901      	add	r1, sp, #4
  4006c2:	f1a4 000c 	sub.w	r0, r4, #12
  4006c6:	4b04      	ldr	r3, [pc, #16]	; (4006d8 <_spi_m_sync_io_read+0x38>)
  4006c8:	4798      	blx	r3
}
  4006ca:	b004      	add	sp, #16
  4006cc:	bd70      	pop	{r4, r5, r6, pc}
  4006ce:	bf00      	nop
  4006d0:	00401360 	.word	0x00401360
  4006d4:	00400821 	.word	0x00400821
  4006d8:	00400625 	.word	0x00400625

004006dc <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  4006dc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  4006de:	4604      	mov	r4, r0
  4006e0:	460d      	mov	r5, r1
  4006e2:	2800      	cmp	r0, #0
  4006e4:	bf18      	it	ne
  4006e6:	2900      	cmpne	r1, #0
  4006e8:	bf14      	ite	ne
  4006ea:	2001      	movne	r0, #1
  4006ec:	2000      	moveq	r0, #0
  4006ee:	22bd      	movs	r2, #189	; 0xbd
  4006f0:	4903      	ldr	r1, [pc, #12]	; (400700 <spi_m_sync_get_io_descriptor+0x24>)
  4006f2:	4b04      	ldr	r3, [pc, #16]	; (400704 <spi_m_sync_get_io_descriptor+0x28>)
  4006f4:	4798      	blx	r3
	*io = &spi->io;
  4006f6:	340c      	adds	r4, #12
  4006f8:	602c      	str	r4, [r5, #0]
	return 0;
}
  4006fa:	2000      	movs	r0, #0
  4006fc:	bd38      	pop	{r3, r4, r5, pc}
  4006fe:	bf00      	nop
  400700:	00401360 	.word	0x00401360
  400704:	00400821 	.word	0x00400821

00400708 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40070a:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40070c:	4605      	mov	r5, r0
  40070e:	460f      	mov	r7, r1
  400710:	2800      	cmp	r0, #0
  400712:	bf18      	it	ne
  400714:	2900      	cmpne	r1, #0
  400716:	d002      	beq.n	40071e <usart_sync_write+0x16>
  400718:	bb0a      	cbnz	r2, 40075e <usart_sync_write+0x56>
  40071a:	2000      	movs	r0, #0
  40071c:	e000      	b.n	400720 <usart_sync_write+0x18>
  40071e:	2000      	movs	r0, #0
  400720:	22f1      	movs	r2, #241	; 0xf1
  400722:	4910      	ldr	r1, [pc, #64]	; (400764 <usart_sync_write+0x5c>)
  400724:	4b10      	ldr	r3, [pc, #64]	; (400768 <usart_sync_write+0x60>)
  400726:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400728:	f105 0408 	add.w	r4, r5, #8
  40072c:	4620      	mov	r0, r4
  40072e:	4b0f      	ldr	r3, [pc, #60]	; (40076c <usart_sync_write+0x64>)
  400730:	4798      	blx	r3
  400732:	2800      	cmp	r0, #0
  400734:	d0f8      	beq.n	400728 <usart_sync_write+0x20>
  400736:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400738:	5d79      	ldrb	r1, [r7, r5]
  40073a:	4620      	mov	r0, r4
  40073c:	4b0c      	ldr	r3, [pc, #48]	; (400770 <usart_sync_write+0x68>)
  40073e:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400740:	4620      	mov	r0, r4
  400742:	4b0a      	ldr	r3, [pc, #40]	; (40076c <usart_sync_write+0x64>)
  400744:	4798      	blx	r3
  400746:	2800      	cmp	r0, #0
  400748:	d0fa      	beq.n	400740 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  40074a:	3501      	adds	r5, #1
  40074c:	42b5      	cmp	r5, r6
  40074e:	d3f3      	bcc.n	400738 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400750:	4620      	mov	r0, r4
  400752:	4b08      	ldr	r3, [pc, #32]	; (400774 <usart_sync_write+0x6c>)
  400754:	4798      	blx	r3
  400756:	2800      	cmp	r0, #0
  400758:	d0fa      	beq.n	400750 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  40075a:	4628      	mov	r0, r5
  40075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  40075e:	2001      	movs	r0, #1
  400760:	e7de      	b.n	400720 <usart_sync_write+0x18>
  400762:	bf00      	nop
  400764:	0040137c 	.word	0x0040137c
  400768:	00400821 	.word	0x00400821
  40076c:	00400de9 	.word	0x00400de9
  400770:	00400da1 	.word	0x00400da1
  400774:	00400e11 	.word	0x00400e11

00400778 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40077c:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40077e:	4605      	mov	r5, r0
  400780:	4688      	mov	r8, r1
  400782:	2800      	cmp	r0, #0
  400784:	bf18      	it	ne
  400786:	2900      	cmpne	r1, #0
  400788:	d002      	beq.n	400790 <usart_sync_read+0x18>
  40078a:	b9d2      	cbnz	r2, 4007c2 <usart_sync_read+0x4a>
  40078c:	2000      	movs	r0, #0
  40078e:	e000      	b.n	400792 <usart_sync_read+0x1a>
  400790:	2000      	movs	r0, #0
  400792:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400796:	490c      	ldr	r1, [pc, #48]	; (4007c8 <usart_sync_read+0x50>)
  400798:	4b0c      	ldr	r3, [pc, #48]	; (4007cc <usart_sync_read+0x54>)
  40079a:	4798      	blx	r3
	uint32_t                      offset = 0;
  40079c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  40079e:	f105 0408 	add.w	r4, r5, #8
  4007a2:	4620      	mov	r0, r4
  4007a4:	4b0a      	ldr	r3, [pc, #40]	; (4007d0 <usart_sync_read+0x58>)
  4007a6:	4798      	blx	r3
  4007a8:	2800      	cmp	r0, #0
  4007aa:	d0f8      	beq.n	40079e <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4007ac:	4620      	mov	r0, r4
  4007ae:	4b09      	ldr	r3, [pc, #36]	; (4007d4 <usart_sync_read+0x5c>)
  4007b0:	4798      	blx	r3
  4007b2:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  4007b6:	3601      	adds	r6, #1
  4007b8:	42be      	cmp	r6, r7
  4007ba:	d3f0      	bcc.n	40079e <usart_sync_read+0x26>

	return (int32_t)offset;
}
  4007bc:	4630      	mov	r0, r6
  4007be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  4007c2:	2001      	movs	r0, #1
  4007c4:	e7e5      	b.n	400792 <usart_sync_read+0x1a>
  4007c6:	bf00      	nop
  4007c8:	0040137c 	.word	0x0040137c
  4007cc:	00400821 	.word	0x00400821
  4007d0:	00400e39 	.word	0x00400e39
  4007d4:	00400dc5 	.word	0x00400dc5

004007d8 <usart_sync_init>:
{
  4007d8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4007da:	4604      	mov	r4, r0
  4007dc:	460d      	mov	r5, r1
  4007de:	2800      	cmp	r0, #0
  4007e0:	bf18      	it	ne
  4007e2:	2900      	cmpne	r1, #0
  4007e4:	bf14      	ite	ne
  4007e6:	2001      	movne	r0, #1
  4007e8:	2000      	moveq	r0, #0
  4007ea:	2234      	movs	r2, #52	; 0x34
  4007ec:	4907      	ldr	r1, [pc, #28]	; (40080c <usart_sync_init+0x34>)
  4007ee:	4b08      	ldr	r3, [pc, #32]	; (400810 <usart_sync_init+0x38>)
  4007f0:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  4007f2:	4629      	mov	r1, r5
  4007f4:	f104 0008 	add.w	r0, r4, #8
  4007f8:	4b06      	ldr	r3, [pc, #24]	; (400814 <usart_sync_init+0x3c>)
  4007fa:	4798      	blx	r3
	if (init_status) {
  4007fc:	4603      	mov	r3, r0
  4007fe:	b918      	cbnz	r0, 400808 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400800:	4a05      	ldr	r2, [pc, #20]	; (400818 <usart_sync_init+0x40>)
  400802:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400804:	4a05      	ldr	r2, [pc, #20]	; (40081c <usart_sync_init+0x44>)
  400806:	6022      	str	r2, [r4, #0]
}
  400808:	4618      	mov	r0, r3
  40080a:	bd38      	pop	{r3, r4, r5, pc}
  40080c:	0040137c 	.word	0x0040137c
  400810:	00400821 	.word	0x00400821
  400814:	00400d69 	.word	0x00400d69
  400818:	00400779 	.word	0x00400779
  40081c:	00400709 	.word	0x00400709

00400820 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400820:	b900      	cbnz	r0, 400824 <assert+0x4>
		__asm("BKPT #0");
  400822:	be00      	bkpt	0x0000
  400824:	4770      	bx	lr

00400826 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  400826:	f44f 7396 	mov.w	r3, #300	; 0x12c
  40082a:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  40082e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400832:	fb03 f000 	mul.w	r0, r3, r0
  400836:	4770      	bx	lr

00400838 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400838:	b500      	push	{lr}
  40083a:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  40083c:	a801      	add	r0, sp, #4
  40083e:	4b0e      	ldr	r3, [pc, #56]	; (400878 <_init_chip+0x40>)
  400840:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400842:	4a0e      	ldr	r2, [pc, #56]	; (40087c <_init_chip+0x44>)
  400844:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40084c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400850:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400854:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400858:	a801      	add	r0, sp, #4
  40085a:	4b09      	ldr	r3, [pc, #36]	; (400880 <_init_chip+0x48>)
  40085c:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  40085e:	4a09      	ldr	r2, [pc, #36]	; (400884 <_init_chip+0x4c>)
  400860:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400862:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400866:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  40086a:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  40086c:	4b06      	ldr	r3, [pc, #24]	; (400888 <_init_chip+0x50>)
  40086e:	4798      	blx	r3
}
  400870:	b003      	add	sp, #12
  400872:	f85d fb04 	ldr.w	pc, [sp], #4
  400876:	bf00      	nop
  400878:	0040048d 	.word	0x0040048d
  40087c:	e000ed00 	.word	0xe000ed00
  400880:	0040049b 	.word	0x0040049b
  400884:	400e0c00 	.word	0x400e0c00
  400888:	00400929 	.word	0x00400929

0040088c <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  40088c:	490e      	ldr	r1, [pc, #56]	; (4008c8 <_pmc_init_sources+0x3c>)
  40088e:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400890:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400894:	4b0d      	ldr	r3, [pc, #52]	; (4008cc <_pmc_init_sources+0x40>)
  400896:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400898:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40089a:	4b0b      	ldr	r3, [pc, #44]	; (4008c8 <_pmc_init_sources+0x3c>)
  40089c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  40089e:	f013 0f01 	tst.w	r3, #1
  4008a2:	d0fa      	beq.n	40089a <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4008a4:	4b08      	ldr	r3, [pc, #32]	; (4008c8 <_pmc_init_sources+0x3c>)
  4008a6:	6a19      	ldr	r1, [r3, #32]
  4008a8:	4a09      	ldr	r2, [pc, #36]	; (4008d0 <_pmc_init_sources+0x44>)
  4008aa:	430a      	orrs	r2, r1
  4008ac:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4008ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4008b0:	4a08      	ldr	r2, [pc, #32]	; (4008d4 <_pmc_init_sources+0x48>)
  4008b2:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4008b4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4008b6:	4a08      	ldr	r2, [pc, #32]	; (4008d8 <_pmc_init_sources+0x4c>)
  4008b8:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4008ba:	4b03      	ldr	r3, [pc, #12]	; (4008c8 <_pmc_init_sources+0x3c>)
  4008bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4008be:	f013 0f02 	tst.w	r3, #2
  4008c2:	d0fa      	beq.n	4008ba <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4008c4:	4770      	bx	lr
  4008c6:	bf00      	nop
  4008c8:	400e0600 	.word	0x400e0600
  4008cc:	00373e01 	.word	0x00373e01
  4008d0:	01370000 	.word	0x01370000
  4008d4:	f800ffff 	.word	0xf800ffff
  4008d8:	20183f01 	.word	0x20183f01

004008dc <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4008dc:	4a11      	ldr	r2, [pc, #68]	; (400924 <_pmc_init_master_clock+0x48>)
  4008de:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4008e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4008e4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4008e6:	4b0f      	ldr	r3, [pc, #60]	; (400924 <_pmc_init_master_clock+0x48>)
  4008e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4008ea:	f013 0f08 	tst.w	r3, #8
  4008ee:	d0fa      	beq.n	4008e6 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4008f0:	4a0c      	ldr	r2, [pc, #48]	; (400924 <_pmc_init_master_clock+0x48>)
  4008f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4008f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4008f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  4008fc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4008fe:	4b09      	ldr	r3, [pc, #36]	; (400924 <_pmc_init_master_clock+0x48>)
  400900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400902:	f013 0f08 	tst.w	r3, #8
  400906:	d0fa      	beq.n	4008fe <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400908:	4a06      	ldr	r2, [pc, #24]	; (400924 <_pmc_init_master_clock+0x48>)
  40090a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  40090c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400910:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400914:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400916:	4b03      	ldr	r3, [pc, #12]	; (400924 <_pmc_init_master_clock+0x48>)
  400918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40091a:	f013 0f08 	tst.w	r3, #8
  40091e:	d0fa      	beq.n	400916 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400920:	4770      	bx	lr
  400922:	bf00      	nop
  400924:	400e0600 	.word	0x400e0600

00400928 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400928:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40092a:	4b02      	ldr	r3, [pc, #8]	; (400934 <_pmc_init+0xc>)
  40092c:	4798      	blx	r3
	_pmc_init_master_clock();
  40092e:	4b02      	ldr	r3, [pc, #8]	; (400938 <_pmc_init+0x10>)
  400930:	4798      	blx	r3
  400932:	bd08      	pop	{r3, pc}
  400934:	0040088d 	.word	0x0040088d
  400938:	004008dd 	.word	0x004008dd

0040093c <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  40093c:	2301      	movs	r3, #1
  40093e:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  400940:	2000      	movs	r0, #0
  400942:	4770      	bx	lr

00400944 <_spi_sync_disable>:
  400944:	2302      	movs	r3, #2
  400946:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_disable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIDIS);

	return ERR_NONE;
}
  400948:	2000      	movs	r0, #0
  40094a:	4770      	bx	lr

0040094c <_spi_set_char_size>:
 * \param[out] size    Stored char size
 *
 * \return Setting char size status
 */
static int32_t _spi_set_char_size(void *const hw, const enum spi_char_size char_size, uint8_t *const size)
{
  40094c:	b410      	push	{r4}
	tmp = ((Spi *)hw)->SPI_CSR[index];
  40094e:	6b03      	ldr	r3, [r0, #48]	; 0x30
	tmp &= ~SPI_CSR_BITS_Msk;
  400950:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
	tmp |= SPI_CSR_BITS(data);
  400954:	010c      	lsls	r4, r1, #4
  400956:	b2e4      	uxtb	r4, r4
  400958:	4323      	orrs	r3, r4
	((Spi *)hw)->SPI_CSR[index] = tmp;
  40095a:	6303      	str	r3, [r0, #48]	; 0x30
	hri_spi_write_CSR_BITS_bf(hw, 0, char_size);
	if (char_size == SPI_CHAR_SIZE_8) {
  40095c:	b129      	cbz	r1, 40096a <_spi_set_char_size+0x1e>
		*size = 1;
	} else {
		*size = 2;
  40095e:	2302      	movs	r3, #2
  400960:	7013      	strb	r3, [r2, #0]
	}

	return ERR_NONE;
}
  400962:	2000      	movs	r0, #0
  400964:	f85d 4b04 	ldr.w	r4, [sp], #4
  400968:	4770      	bx	lr
		*size = 1;
  40096a:	2301      	movs	r3, #1
  40096c:	7013      	strb	r3, [r2, #0]
  40096e:	e7f8      	b.n	400962 <_spi_set_char_size+0x16>

00400970 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  400970:	4b04      	ldr	r3, [pc, #16]	; (400984 <_spi_get_hardware_index+0x14>)
  400972:	4403      	add	r3, r0
  400974:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  400978:	2b05      	cmp	r3, #5
  40097a:	d001      	beq.n	400980 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  40097c:	2000      	movs	r0, #0
	}
}
  40097e:	4770      	bx	lr
		return 1;
  400980:	2001      	movs	r0, #1
  400982:	4770      	bx	lr
  400984:	bfff8000 	.word	0xbfff8000

00400988 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  400988:	b570      	push	{r4, r5, r6, lr}
  40098a:	4606      	mov	r6, r0
  40098c:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  40098e:	4608      	mov	r0, r1
  400990:	4b20      	ldr	r3, [pc, #128]	; (400a14 <_spi_m_sync_init+0x8c>)
  400992:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400994:	2300      	movs	r3, #0
  400996:	b33b      	cbz	r3, 4009e8 <_spi_m_sync_init+0x60>
	return NULL;
  400998:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  40099a:	f44f 729a 	mov.w	r2, #308	; 0x134
  40099e:	491e      	ldr	r1, [pc, #120]	; (400a18 <_spi_m_sync_init+0x90>)
  4009a0:	2e00      	cmp	r6, #0
  4009a2:	bf18      	it	ne
  4009a4:	2c00      	cmpne	r4, #0
  4009a6:	bf14      	ite	ne
  4009a8:	2001      	movne	r0, #1
  4009aa:	2000      	moveq	r0, #0
  4009ac:	4b1b      	ldr	r3, [pc, #108]	; (400a1c <_spi_m_sync_init+0x94>)
  4009ae:	4798      	blx	r3

	if (regs == NULL) {
  4009b0:	b355      	cbz	r5, 400a08 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  4009b2:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  4009b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4009b8:	d129      	bne.n	400a0e <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  4009ba:	2380      	movs	r3, #128	; 0x80
  4009bc:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  4009be:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  4009c0:	686a      	ldr	r2, [r5, #4]
  4009c2:	4b17      	ldr	r3, [pc, #92]	; (400a20 <_spi_m_sync_init+0x98>)
  4009c4:	4013      	ands	r3, r2
  4009c6:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  4009c8:	68ab      	ldr	r3, [r5, #8]
  4009ca:	4a16      	ldr	r2, [pc, #88]	; (400a24 <_spi_m_sync_init+0x9c>)
  4009cc:	401a      	ands	r2, r3
  4009ce:	4b16      	ldr	r3, [pc, #88]	; (400a28 <_spi_m_sync_init+0xa0>)
  4009d0:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  4009d2:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  4009d4:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  4009d6:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  4009d8:	8a2b      	ldrh	r3, [r5, #16]
  4009da:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  4009dc:	68eb      	ldr	r3, [r5, #12]
  4009de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  4009e2:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  4009e4:	2000      	movs	r0, #0
  4009e6:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  4009e8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4009ec:	008a      	lsls	r2, r1, #2
  4009ee:	490f      	ldr	r1, [pc, #60]	; (400a2c <_spi_m_sync_init+0xa4>)
  4009f0:	5c8a      	ldrb	r2, [r1, r2]
  4009f2:	4290      	cmp	r0, r2
  4009f4:	d002      	beq.n	4009fc <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4009f6:	3301      	adds	r3, #1
  4009f8:	b2db      	uxtb	r3, r3
  4009fa:	e7cc      	b.n	400996 <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  4009fc:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  400a00:	00ab      	lsls	r3, r5, #2
  400a02:	460d      	mov	r5, r1
  400a04:	441d      	add	r5, r3
  400a06:	e7c8      	b.n	40099a <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  400a08:	f06f 000c 	mvn.w	r0, #12
  400a0c:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  400a0e:	f06f 0010 	mvn.w	r0, #16
}
  400a12:	bd70      	pop	{r4, r5, r6, pc}
  400a14:	00400971 	.word	0x00400971
  400a18:	004013ac 	.word	0x004013ac
  400a1c:	00400821 	.word	0x00400821
  400a20:	feffff7c 	.word	0xfeffff7c
  400a24:	fff1ff6f 	.word	0xfff1ff6f
  400a28:	000e0010 	.word	0x000e0010
  400a2c:	00401398 	.word	0x00401398

00400a30 <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  400a30:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  400a32:	4604      	mov	r4, r0
  400a34:	b168      	cbz	r0, 400a52 <_spi_m_sync_enable+0x22>
  400a36:	6803      	ldr	r3, [r0, #0]
  400a38:	b14b      	cbz	r3, 400a4e <_spi_m_sync_enable+0x1e>
  400a3a:	2001      	movs	r0, #1
  400a3c:	f44f 72b9 	mov.w	r2, #370	; 0x172
  400a40:	4905      	ldr	r1, [pc, #20]	; (400a58 <_spi_m_sync_enable+0x28>)
  400a42:	4b06      	ldr	r3, [pc, #24]	; (400a5c <_spi_m_sync_enable+0x2c>)
  400a44:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  400a46:	6820      	ldr	r0, [r4, #0]
  400a48:	4b05      	ldr	r3, [pc, #20]	; (400a60 <_spi_m_sync_enable+0x30>)
  400a4a:	4798      	blx	r3
}
  400a4c:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  400a4e:	2000      	movs	r0, #0
  400a50:	e7f4      	b.n	400a3c <_spi_m_sync_enable+0xc>
  400a52:	2000      	movs	r0, #0
  400a54:	e7f2      	b.n	400a3c <_spi_m_sync_enable+0xc>
  400a56:	bf00      	nop
  400a58:	004013ac 	.word	0x004013ac
  400a5c:	00400821 	.word	0x00400821
  400a60:	0040093d 	.word	0x0040093d

00400a64 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
  400a64:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  400a66:	4604      	mov	r4, r0
  400a68:	b168      	cbz	r0, 400a86 <_spi_m_sync_disable+0x22>
  400a6a:	6803      	ldr	r3, [r0, #0]
  400a6c:	b14b      	cbz	r3, 400a82 <_spi_m_sync_disable+0x1e>
  400a6e:	2001      	movs	r0, #1
  400a70:	f44f 72c0 	mov.w	r2, #384	; 0x180
  400a74:	4905      	ldr	r1, [pc, #20]	; (400a8c <_spi_m_sync_disable+0x28>)
  400a76:	4b06      	ldr	r3, [pc, #24]	; (400a90 <_spi_m_sync_disable+0x2c>)
  400a78:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
  400a7a:	6820      	ldr	r0, [r4, #0]
  400a7c:	4b05      	ldr	r3, [pc, #20]	; (400a94 <_spi_m_sync_disable+0x30>)
  400a7e:	4798      	blx	r3
}
  400a80:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  400a82:	2000      	movs	r0, #0
  400a84:	e7f4      	b.n	400a70 <_spi_m_sync_disable+0xc>
  400a86:	2000      	movs	r0, #0
  400a88:	e7f2      	b.n	400a70 <_spi_m_sync_disable+0xc>
  400a8a:	bf00      	nop
  400a8c:	004013ac 	.word	0x004013ac
  400a90:	00400821 	.word	0x00400821
  400a94:	00400945 	.word	0x00400945

00400a98 <_spi_m_sync_set_data_order>:

	return _spi_set_baudrate(dev->prvt, baud_val);
}

int32_t _spi_m_sync_set_data_order(struct _spi_m_sync_dev *dev, const enum spi_data_order dord)
{
  400a98:	b508      	push	{r3, lr}
	ASSERT(dev && dev->prvt);
  400a9a:	b160      	cbz	r0, 400ab6 <_spi_m_sync_set_data_order+0x1e>
  400a9c:	6803      	ldr	r3, [r0, #0]
  400a9e:	b143      	cbz	r3, 400ab2 <_spi_m_sync_set_data_order+0x1a>
  400aa0:	2001      	movs	r0, #1
  400aa2:	f240 12bd 	movw	r2, #445	; 0x1bd
  400aa6:	4905      	ldr	r1, [pc, #20]	; (400abc <_spi_m_sync_set_data_order+0x24>)
  400aa8:	4b05      	ldr	r3, [pc, #20]	; (400ac0 <_spi_m_sync_set_data_order+0x28>)
  400aaa:	4798      	blx	r3
	(void)dord;

	return ERR_UNSUPPORTED_OP;
}
  400aac:	f06f 001a 	mvn.w	r0, #26
  400ab0:	bd08      	pop	{r3, pc}
	ASSERT(dev && dev->prvt);
  400ab2:	2000      	movs	r0, #0
  400ab4:	e7f5      	b.n	400aa2 <_spi_m_sync_set_data_order+0xa>
  400ab6:	2000      	movs	r0, #0
  400ab8:	e7f3      	b.n	400aa2 <_spi_m_sync_set_data_order+0xa>
  400aba:	bf00      	nop
  400abc:	004013ac 	.word	0x004013ac
  400ac0:	00400821 	.word	0x00400821

00400ac4 <_spi_m_sync_set_char_size>:

	return ERR_UNSUPPORTED_OP;
}

int32_t _spi_m_sync_set_char_size(struct _spi_m_sync_dev *dev, const enum spi_char_size char_size)
{
  400ac4:	b538      	push	{r3, r4, r5, lr}
  400ac6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
  400ac8:	4604      	mov	r4, r0
  400aca:	b178      	cbz	r0, 400aec <_spi_m_sync_set_char_size+0x28>
  400acc:	6803      	ldr	r3, [r0, #0]
  400ace:	b15b      	cbz	r3, 400ae8 <_spi_m_sync_set_char_size+0x24>
  400ad0:	2001      	movs	r0, #1
  400ad2:	f240 12cd 	movw	r2, #461	; 0x1cd
  400ad6:	4906      	ldr	r1, [pc, #24]	; (400af0 <_spi_m_sync_set_char_size+0x2c>)
  400ad8:	4b06      	ldr	r3, [pc, #24]	; (400af4 <_spi_m_sync_set_char_size+0x30>)
  400ada:	4798      	blx	r3

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
  400adc:	1d22      	adds	r2, r4, #4
  400ade:	4629      	mov	r1, r5
  400ae0:	6820      	ldr	r0, [r4, #0]
  400ae2:	4b05      	ldr	r3, [pc, #20]	; (400af8 <_spi_m_sync_set_char_size+0x34>)
  400ae4:	4798      	blx	r3
}
  400ae6:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && dev->prvt);
  400ae8:	2000      	movs	r0, #0
  400aea:	e7f2      	b.n	400ad2 <_spi_m_sync_set_char_size+0xe>
  400aec:	2000      	movs	r0, #0
  400aee:	e7f0      	b.n	400ad2 <_spi_m_sync_set_char_size+0xe>
  400af0:	004013ac 	.word	0x004013ac
  400af4:	00400821 	.word	0x00400821
  400af8:	0040094d 	.word	0x0040094d

00400afc <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  400afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b00:	b086      	sub	sp, #24
  400b02:	4607      	mov	r7, r0
  400b04:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  400b06:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  400b08:	680b      	ldr	r3, [r1, #0]
  400b0a:	9301      	str	r3, [sp, #4]
  400b0c:	684b      	ldr	r3, [r1, #4]
  400b0e:	9302      	str	r3, [sp, #8]
  400b10:	2300      	movs	r3, #0
  400b12:	9303      	str	r3, [sp, #12]
  400b14:	9304      	str	r3, [sp, #16]
  400b16:	7903      	ldrb	r3, [r0, #4]
  400b18:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  400b1c:	1c26      	adds	r6, r4, #0
  400b1e:	bf18      	it	ne
  400b20:	2601      	movne	r6, #1
  400b22:	f240 2231 	movw	r2, #561	; 0x231
  400b26:	4933      	ldr	r1, [pc, #204]	; (400bf4 <_spi_m_sync_trans+0xf8>)
  400b28:	2800      	cmp	r0, #0
  400b2a:	bf0c      	ite	eq
  400b2c:	2000      	moveq	r0, #0
  400b2e:	f006 0001 	andne.w	r0, r6, #1
  400b32:	4b31      	ldr	r3, [pc, #196]	; (400bf8 <_spi_m_sync_trans+0xfc>)
  400b34:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400b36:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  400b38:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400b3c:	d122      	bne.n	400b84 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  400b3e:	f06f 0013 	mvn.w	r0, #19
  400b42:	e053      	b.n	400bec <_spi_m_sync_trans+0xf0>
		return false;
  400b44:	2300      	movs	r3, #0
  400b46:	e035      	b.n	400bb4 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  400b48:	7850      	ldrb	r0, [r2, #1]
  400b4a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  400b4e:	3202      	adds	r2, #2
  400b50:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  400b52:	3301      	adds	r3, #1
  400b54:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  400b56:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  400b58:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  400b5c:	f240 2222 	movw	r2, #546	; 0x222
  400b60:	4924      	ldr	r1, [pc, #144]	; (400bf4 <_spi_m_sync_trans+0xf8>)
  400b62:	4630      	mov	r0, r6
  400b64:	4b24      	ldr	r3, [pc, #144]	; (400bf8 <_spi_m_sync_trans+0xfc>)
  400b66:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  400b68:	f018 0f08 	tst.w	r8, #8
  400b6c:	d038      	beq.n	400be0 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  400b6e:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  400b72:	2800      	cmp	r0, #0
  400b74:	db36      	blt.n	400be4 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  400b76:	9803      	ldr	r0, [sp, #12]
  400b78:	68ab      	ldr	r3, [r5, #8]
  400b7a:	4298      	cmp	r0, r3
  400b7c:	d302      	bcc.n	400b84 <_spi_m_sync_trans+0x88>
  400b7e:	9a04      	ldr	r2, [sp, #16]
  400b80:	4293      	cmp	r3, r2
  400b82:	d92f      	bls.n	400be4 <_spi_m_sync_trans+0xe8>
  400b84:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  400b86:	f013 0f01 	tst.w	r3, #1
  400b8a:	d0db      	beq.n	400b44 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  400b8c:	68a3      	ldr	r3, [r4, #8]
  400b8e:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  400b90:	9a02      	ldr	r2, [sp, #8]
  400b92:	b15a      	cbz	r2, 400bac <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  400b94:	1c51      	adds	r1, r2, #1
  400b96:	9102      	str	r1, [sp, #8]
  400b98:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  400b9a:	f89d 2014 	ldrb.w	r2, [sp, #20]
  400b9e:	2a01      	cmp	r2, #1
  400ba0:	d904      	bls.n	400bac <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  400ba2:	460a      	mov	r2, r1
  400ba4:	3101      	adds	r1, #1
  400ba6:	9102      	str	r1, [sp, #8]
  400ba8:	0a1b      	lsrs	r3, r3, #8
  400baa:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  400bac:	9b04      	ldr	r3, [sp, #16]
  400bae:	3301      	adds	r3, #1
  400bb0:	9304      	str	r3, [sp, #16]
	return true;
  400bb2:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  400bb4:	2b00      	cmp	r3, #0
  400bb6:	d1cf      	bne.n	400b58 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  400bb8:	9b03      	ldr	r3, [sp, #12]
  400bba:	9a04      	ldr	r2, [sp, #16]
  400bbc:	429a      	cmp	r2, r3
  400bbe:	d3cb      	bcc.n	400b58 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  400bc0:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  400bc2:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  400bc4:	f012 0f02 	tst.w	r2, #2
  400bc8:	d0c6      	beq.n	400b58 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  400bca:	9a01      	ldr	r2, [sp, #4]
  400bcc:	2a00      	cmp	r2, #0
  400bce:	d0c0      	beq.n	400b52 <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  400bd0:	1c51      	adds	r1, r2, #1
  400bd2:	9101      	str	r1, [sp, #4]
  400bd4:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  400bd6:	f89d 0014 	ldrb.w	r0, [sp, #20]
  400bda:	2801      	cmp	r0, #1
  400bdc:	d8b4      	bhi.n	400b48 <_spi_m_sync_trans+0x4c>
  400bde:	e7b8      	b.n	400b52 <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  400be0:	2000      	movs	r0, #0
  400be2:	e7c6      	b.n	400b72 <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  400be4:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  400be6:	f413 7f00 	tst.w	r3, #512	; 0x200
  400bea:	d0fb      	beq.n	400be4 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  400bec:	b006      	add	sp, #24
  400bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bf2:	bf00      	nop
  400bf4:	004013ac 	.word	0x004013ac
  400bf8:	00400821 	.word	0x00400821

00400bfc <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  400bfc:	2000      	movs	r0, #0
  400bfe:	4770      	bx	lr

00400c00 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  400c00:	4b03      	ldr	r3, [pc, #12]	; (400c10 <_system_time_init+0x10>)
  400c02:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  400c06:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  400c08:	2205      	movs	r2, #5
  400c0a:	601a      	str	r2, [r3, #0]
  400c0c:	4770      	bx	lr
  400c0e:	bf00      	nop
  400c10:	e000e010 	.word	0xe000e010

00400c14 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  400c14:	b508      	push	{r3, lr}
	_system_time_init(hw);
  400c16:	4b01      	ldr	r3, [pc, #4]	; (400c1c <_delay_init+0x8>)
  400c18:	4798      	blx	r3
  400c1a:	bd08      	pop	{r3, pc}
  400c1c:	00400c01 	.word	0x00400c01

00400c20 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  400c20:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  400c22:	e00d      	b.n	400c40 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  400c24:	4b0d      	ldr	r3, [pc, #52]	; (400c5c <_delay_cycles+0x3c>)
  400c26:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  400c2a:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  400c2c:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  400c2e:	4b0b      	ldr	r3, [pc, #44]	; (400c5c <_delay_cycles+0x3c>)
  400c30:	681b      	ldr	r3, [r3, #0]
  400c32:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400c36:	d0fa      	beq.n	400c2e <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  400c38:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  400c3c:	3101      	adds	r1, #1
	while (n--) {
  400c3e:	4610      	mov	r0, r2
  400c40:	1e43      	subs	r3, r0, #1
  400c42:	b2da      	uxtb	r2, r3
  400c44:	2800      	cmp	r0, #0
  400c46:	d1ed      	bne.n	400c24 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  400c48:	4b04      	ldr	r3, [pc, #16]	; (400c5c <_delay_cycles+0x3c>)
  400c4a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  400c4c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  400c4e:	4b03      	ldr	r3, [pc, #12]	; (400c5c <_delay_cycles+0x3c>)
  400c50:	681b      	ldr	r3, [r3, #0]
  400c52:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400c56:	d0fa      	beq.n	400c4e <_delay_cycles+0x2e>
		;
}
  400c58:	4770      	bx	lr
  400c5a:	bf00      	nop
  400c5c:	e000e010 	.word	0xe000e010

00400c60 <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  400c60:	b510      	push	{r4, lr}
	ASSERT(hw);
  400c62:	4604      	mov	r4, r0
  400c64:	f240 2219 	movw	r2, #537	; 0x219
  400c68:	4912      	ldr	r1, [pc, #72]	; (400cb4 <_uart_get_hardware_index+0x54>)
  400c6a:	3000      	adds	r0, #0
  400c6c:	bf18      	it	ne
  400c6e:	2001      	movne	r0, #1
  400c70:	4b11      	ldr	r3, [pc, #68]	; (400cb8 <_uart_get_hardware_index+0x58>)
  400c72:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  400c74:	4b11      	ldr	r3, [pc, #68]	; (400cbc <_uart_get_hardware_index+0x5c>)
  400c76:	429c      	cmp	r4, r3
  400c78:	d013      	beq.n	400ca2 <_uart_get_hardware_index+0x42>
		return 0;
	} else if (UART1 == hw) {
  400c7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400c7e:	429c      	cmp	r4, r3
  400c80:	d011      	beq.n	400ca6 <_uart_get_hardware_index+0x46>
		return 1;
	} else if (UART2 == hw) {
  400c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  400c86:	429c      	cmp	r4, r3
  400c88:	d00f      	beq.n	400caa <_uart_get_hardware_index+0x4a>
		return 2;
	} else if (UART3 == hw) {
  400c8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400c8e:	429c      	cmp	r4, r3
  400c90:	d00d      	beq.n	400cae <_uart_get_hardware_index+0x4e>
		return 3;
	} else if (UART4 == hw) {
  400c92:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400c96:	429c      	cmp	r4, r3
  400c98:	d001      	beq.n	400c9e <_uart_get_hardware_index+0x3e>
		return 4;
	} else {
		return ERR_INVALID_DATA;
  400c9a:	20ff      	movs	r0, #255	; 0xff
	}
}
  400c9c:	bd10      	pop	{r4, pc}
		return 4;
  400c9e:	2004      	movs	r0, #4
  400ca0:	bd10      	pop	{r4, pc}
		return 0;
  400ca2:	2000      	movs	r0, #0
  400ca4:	bd10      	pop	{r4, pc}
		return 1;
  400ca6:	2001      	movs	r0, #1
  400ca8:	bd10      	pop	{r4, pc}
		return 2;
  400caa:	2002      	movs	r0, #2
  400cac:	bd10      	pop	{r4, pc}
		return 3;
  400cae:	2003      	movs	r0, #3
  400cb0:	bd10      	pop	{r4, pc}
  400cb2:	bf00      	nop
  400cb4:	004013d0 	.word	0x004013d0
  400cb8:	00400821 	.word	0x00400821
  400cbc:	400e0800 	.word	0x400e0800

00400cc0 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  400cc0:	b510      	push	{r4, lr}
	ASSERT(hw);
  400cc2:	4604      	mov	r4, r0
  400cc4:	f44f 7227 	mov.w	r2, #668	; 0x29c
  400cc8:	490e      	ldr	r1, [pc, #56]	; (400d04 <_get_uart_index+0x44>)
  400cca:	3000      	adds	r0, #0
  400ccc:	bf18      	it	ne
  400cce:	2001      	movne	r0, #1
  400cd0:	4b0d      	ldr	r3, [pc, #52]	; (400d08 <_get_uart_index+0x48>)
  400cd2:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  400cd4:	4620      	mov	r0, r4
  400cd6:	4b0d      	ldr	r3, [pc, #52]	; (400d0c <_get_uart_index+0x4c>)
  400cd8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400cda:	2300      	movs	r3, #0
  400cdc:	b143      	cbz	r3, 400cf0 <_get_uart_index+0x30>
		if (_uarts[i].number == uart_offset) {
			return i;
		}
	}

	ASSERT(false);
  400cde:	f240 22a6 	movw	r2, #678	; 0x2a6
  400ce2:	4908      	ldr	r1, [pc, #32]	; (400d04 <_get_uart_index+0x44>)
  400ce4:	2000      	movs	r0, #0
  400ce6:	4b08      	ldr	r3, [pc, #32]	; (400d08 <_get_uart_index+0x48>)
  400ce8:	4798      	blx	r3
	return 0;
  400cea:	2300      	movs	r3, #0
}
  400cec:	4618      	mov	r0, r3
  400cee:	bd10      	pop	{r4, pc}
		if (_uarts[i].number == uart_offset) {
  400cf0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  400cf4:	008a      	lsls	r2, r1, #2
  400cf6:	4906      	ldr	r1, [pc, #24]	; (400d10 <_get_uart_index+0x50>)
  400cf8:	5c8a      	ldrb	r2, [r1, r2]
  400cfa:	4290      	cmp	r0, r2
  400cfc:	d0f6      	beq.n	400cec <_get_uart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400cfe:	3301      	adds	r3, #1
  400d00:	b2db      	uxtb	r3, r3
  400d02:	e7eb      	b.n	400cdc <_get_uart_index+0x1c>
  400d04:	004013d0 	.word	0x004013d0
  400d08:	00400821 	.word	0x00400821
  400d0c:	00400c61 	.word	0x00400c61
  400d10:	004013c4 	.word	0x004013c4

00400d14 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  400d14:	b510      	push	{r4, lr}
	ASSERT(hw);
  400d16:	4604      	mov	r4, r0
  400d18:	f240 22b3 	movw	r2, #691	; 0x2b3
  400d1c:	490d      	ldr	r1, [pc, #52]	; (400d54 <_uart_init+0x40>)
  400d1e:	3000      	adds	r0, #0
  400d20:	bf18      	it	ne
  400d22:	2001      	movne	r0, #1
  400d24:	4b0c      	ldr	r3, [pc, #48]	; (400d58 <_uart_init+0x44>)
  400d26:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  400d28:	4620      	mov	r0, r4
  400d2a:	4b0c      	ldr	r3, [pc, #48]	; (400d5c <_uart_init+0x48>)
  400d2c:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  400d2e:	4b0c      	ldr	r3, [pc, #48]	; (400d60 <_uart_init+0x4c>)
  400d30:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  400d34:	23ac      	movs	r3, #172	; 0xac
  400d36:	6023      	str	r3, [r4, #0]
  400d38:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d3c:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  400d3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400d42:	0082      	lsls	r2, r0, #2
  400d44:	4b07      	ldr	r3, [pc, #28]	; (400d64 <_uart_init+0x50>)
  400d46:	4413      	add	r3, r2
  400d48:	685b      	ldr	r3, [r3, #4]
	((Uart *)hw)->UART_MR = data;
  400d4a:	6063      	str	r3, [r4, #4]
	((Uart *)hw)->UART_BRGR = data;
  400d4c:	23f4      	movs	r3, #244	; 0xf4
  400d4e:	6223      	str	r3, [r4, #32]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);

	return ERR_NONE;
}
  400d50:	2000      	movs	r0, #0
  400d52:	bd10      	pop	{r4, pc}
  400d54:	004013d0 	.word	0x004013d0
  400d58:	00400821 	.word	0x00400821
  400d5c:	00400cc1 	.word	0x00400cc1
  400d60:	55415200 	.word	0x55415200
  400d64:	004013c4 	.word	0x004013c4

00400d68 <_usart_sync_init>:
{
  400d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400d6a:	460c      	mov	r4, r1
	ASSERT(device);
  400d6c:	4e09      	ldr	r6, [pc, #36]	; (400d94 <_usart_sync_init+0x2c>)
  400d6e:	4607      	mov	r7, r0
  400d70:	22a9      	movs	r2, #169	; 0xa9
  400d72:	4631      	mov	r1, r6
  400d74:	3000      	adds	r0, #0
  400d76:	bf18      	it	ne
  400d78:	2001      	movne	r0, #1
  400d7a:	4d07      	ldr	r5, [pc, #28]	; (400d98 <_usart_sync_init+0x30>)
  400d7c:	47a8      	blx	r5
	ASSERT(hw);
  400d7e:	22aa      	movs	r2, #170	; 0xaa
  400d80:	4631      	mov	r1, r6
  400d82:	1c20      	adds	r0, r4, #0
  400d84:	bf18      	it	ne
  400d86:	2001      	movne	r0, #1
  400d88:	47a8      	blx	r5
	device->hw = hw;
  400d8a:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  400d8c:	4620      	mov	r0, r4
  400d8e:	4b03      	ldr	r3, [pc, #12]	; (400d9c <_usart_sync_init+0x34>)
  400d90:	4798      	blx	r3
}
  400d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d94:	004013d0 	.word	0x004013d0
  400d98:	00400821 	.word	0x00400821
  400d9c:	00400d15 	.word	0x00400d15

00400da0 <_usart_sync_write_byte>:
{
  400da0:	b538      	push	{r3, r4, r5, lr}
  400da2:	460c      	mov	r4, r1
	ASSERT(device);
  400da4:	4605      	mov	r5, r0
  400da6:	f240 1295 	movw	r2, #405	; 0x195
  400daa:	4904      	ldr	r1, [pc, #16]	; (400dbc <_usart_sync_write_byte+0x1c>)
  400dac:	3000      	adds	r0, #0
  400dae:	bf18      	it	ne
  400db0:	2001      	movne	r0, #1
  400db2:	4b03      	ldr	r3, [pc, #12]	; (400dc0 <_usart_sync_write_byte+0x20>)
  400db4:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  400db6:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  400db8:	61dc      	str	r4, [r3, #28]
  400dba:	bd38      	pop	{r3, r4, r5, pc}
  400dbc:	004013d0 	.word	0x004013d0
  400dc0:	00400821 	.word	0x00400821

00400dc4 <_usart_sync_read_byte>:
{
  400dc4:	b510      	push	{r4, lr}
	ASSERT(device);
  400dc6:	4604      	mov	r4, r0
  400dc8:	f240 12a7 	movw	r2, #423	; 0x1a7
  400dcc:	4904      	ldr	r1, [pc, #16]	; (400de0 <_usart_sync_read_byte+0x1c>)
  400dce:	3000      	adds	r0, #0
  400dd0:	bf18      	it	ne
  400dd2:	2001      	movne	r0, #1
  400dd4:	4b03      	ldr	r3, [pc, #12]	; (400de4 <_usart_sync_read_byte+0x20>)
  400dd6:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  400dd8:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  400dda:	6998      	ldr	r0, [r3, #24]
}
  400ddc:	b2c0      	uxtb	r0, r0
  400dde:	bd10      	pop	{r4, pc}
  400de0:	004013d0 	.word	0x004013d0
  400de4:	00400821 	.word	0x00400821

00400de8 <_usart_sync_is_ready_to_send>:
{
  400de8:	b510      	push	{r4, lr}
	ASSERT(device);
  400dea:	4604      	mov	r4, r0
  400dec:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  400df0:	4905      	ldr	r1, [pc, #20]	; (400e08 <_usart_sync_is_ready_to_send+0x20>)
  400df2:	3000      	adds	r0, #0
  400df4:	bf18      	it	ne
  400df6:	2001      	movne	r0, #1
  400df8:	4b04      	ldr	r3, [pc, #16]	; (400e0c <_usart_sync_is_ready_to_send+0x24>)
  400dfa:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  400dfc:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  400dfe:	6958      	ldr	r0, [r3, #20]
}
  400e00:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400e04:	bd10      	pop	{r4, pc}
  400e06:	bf00      	nop
  400e08:	004013d0 	.word	0x004013d0
  400e0c:	00400821 	.word	0x00400821

00400e10 <_usart_sync_is_transmit_done>:
{
  400e10:	b510      	push	{r4, lr}
	ASSERT(device);
  400e12:	4604      	mov	r4, r0
  400e14:	f240 12b9 	movw	r2, #441	; 0x1b9
  400e18:	4905      	ldr	r1, [pc, #20]	; (400e30 <_usart_sync_is_transmit_done+0x20>)
  400e1a:	3000      	adds	r0, #0
  400e1c:	bf18      	it	ne
  400e1e:	2001      	movne	r0, #1
  400e20:	4b04      	ldr	r3, [pc, #16]	; (400e34 <_usart_sync_is_transmit_done+0x24>)
  400e22:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  400e24:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  400e26:	6958      	ldr	r0, [r3, #20]
}
  400e28:	f3c0 2040 	ubfx	r0, r0, #9, #1
  400e2c:	bd10      	pop	{r4, pc}
  400e2e:	bf00      	nop
  400e30:	004013d0 	.word	0x004013d0
  400e34:	00400821 	.word	0x00400821

00400e38 <_usart_sync_is_byte_received>:
{
  400e38:	b510      	push	{r4, lr}
	ASSERT(device);
  400e3a:	4604      	mov	r4, r0
  400e3c:	f240 12cb 	movw	r2, #459	; 0x1cb
  400e40:	4905      	ldr	r1, [pc, #20]	; (400e58 <_usart_sync_is_byte_received+0x20>)
  400e42:	3000      	adds	r0, #0
  400e44:	bf18      	it	ne
  400e46:	2001      	movne	r0, #1
  400e48:	4b04      	ldr	r3, [pc, #16]	; (400e5c <_usart_sync_is_byte_received+0x24>)
  400e4a:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  400e4c:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  400e4e:	6958      	ldr	r0, [r3, #20]
  400e50:	f000 0001 	and.w	r0, r0, #1
}
  400e54:	bd10      	pop	{r4, pc}
  400e56:	bf00      	nop
  400e58:	004013d0 	.word	0x004013d0
  400e5c:	00400821 	.word	0x00400821

00400e60 <_uart_get_usart_sync>:
}
  400e60:	2000      	movs	r0, #0
  400e62:	4770      	bx	lr

00400e64 <main>:
	Implements printing function
*/
#include "function_def.h" 

int main(void)
{
  400e64:	b570      	push	{r4, r5, r6, lr}
  400e66:	b084      	sub	sp, #16
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  400e68:	4b1a      	ldr	r3, [pc, #104]	; (400ed4 <main+0x70>)
  400e6a:	4798      	blx	r3
	init_PEC15_Table();
  400e6c:	4b1a      	ldr	r3, [pc, #104]	; (400ed8 <main+0x74>)
  400e6e:	4798      	blx	r3

	/* Turn on ref */
	uint8_t cfg_refon[6] = {0x04,0,0,0,0,0x04};
  400e70:	4b1a      	ldr	r3, [pc, #104]	; (400edc <main+0x78>)
  400e72:	e893 0003 	ldmia.w	r3, {r0, r1}
  400e76:	9002      	str	r0, [sp, #8]
  400e78:	f8ad 100c 	strh.w	r1, [sp, #12]
	((Pio *)hw)->PIO_CODR = mask;
  400e7c:	4d18      	ldr	r5, [pc, #96]	; (400ee0 <main+0x7c>)
  400e7e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  400e82:	636e      	str	r6, [r5, #52]	; 0x34
	while(1){
		/* enable chip select - active low */
		gpio_set_pin_level(PC25, false);

		everything_is_valid = true;
		command_message[0] = 0;
  400e84:	2300      	movs	r3, #0
  400e86:	f88d 3004 	strb.w	r3, [sp, #4]
		command_message[1] = 1;
  400e8a:	2301      	movs	r3, #1
  400e8c:	f88d 3005 	strb.w	r3, [sp, #5]
		command_PEC = PEC_calculate(command_message, 2);
  400e90:	2102      	movs	r1, #2
  400e92:	a801      	add	r0, sp, #4
  400e94:	4c13      	ldr	r4, [pc, #76]	; (400ee4 <main+0x80>)
  400e96:	47a0      	blx	r4
		command_message[2] = (command_PEC >> 8)&0x00FF;
  400e98:	0a03      	lsrs	r3, r0, #8
  400e9a:	f88d 3006 	strb.w	r3, [sp, #6]
		command_message[3] = command_PEC&0x00FF;
  400e9e:	f88d 0007 	strb.w	r0, [sp, #7]

		PEC_data = PEC_calculate(cfg_refon, 6);
  400ea2:	2106      	movs	r1, #6
  400ea4:	a802      	add	r0, sp, #8
  400ea6:	47a0      	blx	r4
		
		pec_data[0] = PEC_data>>8;
  400ea8:	0a03      	lsrs	r3, r0, #8
  400eaa:	f88d 3000 	strb.w	r3, [sp]
		pec_data[1] = PEC_data&0x00FF;
  400eae:	f88d 0001 	strb.w	r0, [sp, #1]

		isoSpi_send(command_message, 4);
  400eb2:	2104      	movs	r1, #4
  400eb4:	eb0d 0001 	add.w	r0, sp, r1
  400eb8:	4c0b      	ldr	r4, [pc, #44]	; (400ee8 <main+0x84>)
  400eba:	47a0      	blx	r4
		isoSpi_send(cfg_refon, 6);
  400ebc:	2106      	movs	r1, #6
  400ebe:	a802      	add	r0, sp, #8
  400ec0:	47a0      	blx	r4
		isoSpi_send(pec_data, 2);
  400ec2:	2102      	movs	r1, #2
  400ec4:	4668      	mov	r0, sp
  400ec6:	47a0      	blx	r4
	((Pio *)hw)->PIO_SODR = mask;
  400ec8:	632e      	str	r6, [r5, #48]	; 0x30
		/*Broadcast write end*/

		/* disable chip select - active low */
		gpio_set_pin_level(PC25, true);

		delay_ms(2);
  400eca:	2002      	movs	r0, #2
  400ecc:	4b07      	ldr	r3, [pc, #28]	; (400eec <main+0x88>)
  400ece:	4798      	blx	r3
  400ed0:	e7d4      	b.n	400e7c <main+0x18>
  400ed2:	bf00      	nop
  400ed4:	004001d5 	.word	0x004001d5
  400ed8:	0040020d 	.word	0x0040020d
  400edc:	004013e8 	.word	0x004013e8
  400ee0:	400e1200 	.word	0x400e1200
  400ee4:	004001e1 	.word	0x004001e1
  400ee8:	00400249 	.word	0x00400249
  400eec:	004004bd 	.word	0x004004bd

00400ef0 <__libc_init_array>:
  400ef0:	b570      	push	{r4, r5, r6, lr}
  400ef2:	4e0d      	ldr	r6, [pc, #52]	; (400f28 <__libc_init_array+0x38>)
  400ef4:	4c0d      	ldr	r4, [pc, #52]	; (400f2c <__libc_init_array+0x3c>)
  400ef6:	1ba4      	subs	r4, r4, r6
  400ef8:	10a4      	asrs	r4, r4, #2
  400efa:	2500      	movs	r5, #0
  400efc:	42a5      	cmp	r5, r4
  400efe:	d109      	bne.n	400f14 <__libc_init_array+0x24>
  400f00:	4e0b      	ldr	r6, [pc, #44]	; (400f30 <__libc_init_array+0x40>)
  400f02:	4c0c      	ldr	r4, [pc, #48]	; (400f34 <__libc_init_array+0x44>)
  400f04:	f000 fa74 	bl	4013f0 <_init>
  400f08:	1ba4      	subs	r4, r4, r6
  400f0a:	10a4      	asrs	r4, r4, #2
  400f0c:	2500      	movs	r5, #0
  400f0e:	42a5      	cmp	r5, r4
  400f10:	d105      	bne.n	400f1e <__libc_init_array+0x2e>
  400f12:	bd70      	pop	{r4, r5, r6, pc}
  400f14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400f18:	4798      	blx	r3
  400f1a:	3501      	adds	r5, #1
  400f1c:	e7ee      	b.n	400efc <__libc_init_array+0xc>
  400f1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400f22:	4798      	blx	r3
  400f24:	3501      	adds	r5, #1
  400f26:	e7f2      	b.n	400f0e <__libc_init_array+0x1e>
  400f28:	004013fc 	.word	0x004013fc
  400f2c:	004013fc 	.word	0x004013fc
  400f30:	004013fc 	.word	0x004013fc
  400f34:	00401400 	.word	0x00401400

00400f38 <crc15Table>:
  400f38:	00000000 0000c599 0000ceab 00000b32     ............2...
  400f48:	0000d8cf 00001d56 00001664 0000d3fd     ....V...d.......
  400f58:	0000f407 0000319e 00003aac 0000ff35     .....1...:..5...
  400f68:	00002cc8 0000e951 0000e263 000027fa     .,..Q...c....'..
  400f78:	0000ad97 0000680e 0000633c 0000a6a5     .....h..<c......
  400f88:	00007558 0000b0c1 0000bbf3 00007e6a     Xu..........j~..
  400f98:	00005990 00009c09 0000973b 000052a2     .Y......;....R..
  400fa8:	0000815f 000044c6 00004ff4 00008a6d     _....D...O..m...
  400fb8:	00005b2e 00009eb7 00009585 0000501c     .[...........P..
  400fc8:	000083e1 00004678 00004d4a 000088d3     ....xF..JM......
  400fd8:	0000af29 00006ab0 00006182 0000a41b     )....j...a......
  400fe8:	000077e6 0000b27f 0000b94d 00007cd4     .w......M....|..
  400ff8:	0000f6b9 00003320 00003812 0000fd8b     .... 3...8......
  401008:	00002e76 0000ebef 0000e0dd 00002544     v...........D%..
  401018:	000002be 0000c727 0000cc15 0000098c     ....'...........
  401028:	0000da71 00001fe8 000014da 0000d143     q...........C...
  401038:	0000f3c5 0000365c 00003d6e 0000f8f7     ....\6..n=......
  401048:	00002b0a 0000ee93 0000e5a1 00002038     .+..........8 ..
  401058:	000007c2 0000c25b 0000c969 00000cf0     ....[...i.......
  401068:	0000df0d 00001a94 000011a6 0000d43f     ............?...
  401078:	00005e52 00009bcb 000090f9 00005560     R^..........`U..
  401088:	0000869d 00004304 00004836 00008daf     .....C..6H......
  401098:	0000aa55 00006fcc 000064fe 0000a167     U....o...d..g...
  4010a8:	0000729a 0000b703 0000bc31 000079a8     .r......1....y..
  4010b8:	0000a8eb 00006d72 00006640 0000a3d9     ....rm..@f......
  4010c8:	00007024 0000b5bd 0000be8f 00007b16     $p...........{..
  4010d8:	00005cec 00009975 00009247 000057de     .\..u...G....W..
  4010e8:	00008423 000041ba 00004a88 00008f11     #....A...J......
  4010f8:	0000057c 0000c0e5 0000cbd7 00000e4e     |...........N...
  401108:	0000ddb3 0000182a 00001318 0000d681     ....*...........
  401118:	0000f17b 000034e2 00003fd0 0000fa49     {....4...?..I...
  401128:	000029b4 0000ec2d 0000e71f 00002286     .)..-........"..
  401138:	0000a213 0000678a 00006cb8 0000a921     .....g...l..!...
  401148:	00007adc 0000bf45 0000b477 000071ee     .z..E...w....q..
  401158:	00005614 0000938d 000098bf 00005d26     .V..........&]..
  401168:	00008edb 00004b42 00004070 000085e9     ....BK..p@......
  401178:	00000f84 0000ca1d 0000c12f 000004b6     ......../.......
  401188:	0000d74b 000012d2 000019e0 0000dc79     K...........y...
  401198:	0000fb83 00003e1a 00003528 0000f0b1     .....>..(5......
  4011a8:	0000234c 0000e6d5 0000ede7 0000287e     L#..........~(..
  4011b8:	0000f93d 00003ca4 00003796 0000f20f     =....<...7......
  4011c8:	000021f2 0000e46b 0000ef59 00002ac0     .!..k...Y....*..
  4011d8:	00000d3a 0000c8a3 0000c391 00000608     :...............
  4011e8:	0000d5f5 0000106c 00001b5e 0000dec7     ....l...^.......
  4011f8:	000054aa 00009133 00009a01 00005f98     .T..3........_..
  401208:	00008c65 000049fc 000042ce 00008757     e....I...B..W...
  401218:	0000a0ad 00006534 00006e06 0000ab9f     ....4e...n......
  401228:	00007862 0000bdfb 0000b6c9 00007350     bx..........Ps..
  401238:	000051d6 0000944f 00009f7d 00005ae4     .Q..O...}....Z..
  401248:	00008919 00004c80 000047b2 0000822b     .....L...G..+...
  401258:	0000a5d1 00006048 00006b7a 0000aee3     ....H`..zk......
  401268:	00007d1e 0000b887 0000b3b5 0000762c     .}..........,v..
  401278:	0000fc41 000039d8 000032ea 0000f773     A....9...2..s...
  401288:	0000248e 0000e117 0000ea25 00002fbc     .$......%..../..
  401298:	00000846 0000cddf 0000c6ed 00000374     F...........t...
  4012a8:	0000d089 00001510 00001e22 0000dbbb     ........".......
  4012b8:	00000af8 0000cf61 0000c453 000001ca     ....a...S.......
  4012c8:	0000d237 000017ae 00001c9c 0000d905     7...............
  4012d8:	0000feff 00003b66 00003054 0000f5cd     ....f;..T0......
  4012e8:	00002630 0000e3a9 0000e89b 00002d02     0&...........-..
  4012f8:	0000a76f 000062f6 000069c4 0000ac5d     o....b...i..]...
  401308:	00007fa0 0000ba39 0000b10b 00007492     ....9........t..
  401318:	00005368 000096f1 00009dc3 0000585a     hS..........ZX..
  401328:	00008ba7 00004e3e 0000450c 00008095     ....>N...E......
  401338:	ffffffff ffffffff 0000ffff 000000ff     ................
  401348:	0000ff00 682f2e2e 732f6c61 682f6372     ....../hal/src/h
  401358:	695f6c61 00632e6f 682f2e2e 732f6c61     al_io.c.../hal/s
  401368:	682f6372 735f6c61 6d5f6970 6e79735f     rc/hal_spi_m_syn
  401378:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
  401388:	755f6c61 74726173 6e79735f 00632e63     al_usart_sync.c.

00401398 <spi_regs>:
  401398:	00000001 80000000 00000001 0496dc02     ................
  4013a8:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  4013b8:	735f6c70 632e6970 00000000              pl_spi.c....

004013c4 <_uarts>:
  4013c4:	00000001 00000800 000000f4 682f2e2e     ............../h
  4013d4:	752f6c70 2f747261 5f6c7068 74726175     pl/uart/hpl_uart
  4013e4:	0000632e 00000004 00000400              .c..........

004013f0 <_init>:
  4013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4013f2:	bf00      	nop
  4013f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4013f6:	bc08      	pop	{r3}
  4013f8:	469e      	mov	lr, r3
  4013fa:	4770      	bx	lr

004013fc <__init_array_start>:
  4013fc:	0040018d 	.word	0x0040018d

00401400 <_fini>:
  401400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401402:	bf00      	nop
  401404:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401406:	bc08      	pop	{r3}
  401408:	469e      	mov	lr, r3
  40140a:	4770      	bx	lr

0040140c <__fini_array_start>:
  40140c:	00400169 	.word	0x00400169
