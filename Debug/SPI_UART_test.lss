
SPI_UART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001904  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20400000  00401904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  20400064  00401968  00020064  2**2
                  ALLOC
  3 .heap         00000200  204000b8  004019bc  00020064  2**0
                  ALLOC
  4 .stack        00000400  204002b8  00401bbc  00020064  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  7 .debug_info   00010b74  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002861  00000000  00000000  00030c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006355  00000000  00000000  000334c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008a8  00000000  00000000  00039815  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007f0  00000000  00000000  0003a0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003e9c4  00000000  00000000  0003a8ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010695  00000000  00000000  00079271  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00146248  00000000  00000000  00089906  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000018d0  00000000  00000000  001cfb50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 06 40 20 01 03 40 00 fd 02 40 00 fd 02 40 00     ..@ ..@...@...@.
  400010:	fd 02 40 00 fd 02 40 00 fd 02 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	fd 02 40 00 fd 02 40 00 00 00 00 00 fd 02 40 00     ..@...@.......@.
  40003c:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  40004c:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  40005c:	fd 02 40 00 fd 02 40 00 00 00 00 00 fd 02 40 00     ..@...@.......@.
  40006c:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  40007c:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  40008c:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  40009c:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  4000ac:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  4000bc:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  4000cc:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  4000dc:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  4000ec:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  4000fc:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  40010c:	fd 02 40 00 fd 02 40 00 fd 02 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ......@...@...@.
  40012c:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  40013c:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  40014c:	fd 02 40 00 fd 02 40 00 fd 02 40 00 fd 02 40 00     ..@...@...@...@.
  40015c:	fd 02 40 00 fd 02 40 00 fd 02 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400064 	.word	0x20400064
  400184:	00000000 	.word	0x00000000
  400188:	00401904 	.word	0x00401904

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00401904 	.word	0x00401904
  4001c8:	20400068 	.word	0x20400068
  4001cc:	00401904 	.word	0x00401904
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	004004b5 	.word	0x004004b5

004001e0 <bms_read_cell_voltages>:
	write_to_ltc6811(WRCFGA, reg_cfga, 6);

}

void bms_read_cell_voltages(uint16_t* voltage_buffer)
{
  4001e0:	b570      	push	{r4, r5, r6, lr}
  4001e2:	b086      	sub	sp, #24
  4001e4:	4605      	mov	r5, r0
	* 2. Wait for delay according to frequency
	* 3. Disable cs, wait for a bit, enable cs
	* 4. Send read command for register
	* 5. enjoy all the munchy munchy voltages
	*/
	uint16_t voltages[12*NUMBER_OF_SLAVES] = {0};
  4001e6:	2400      	movs	r4, #0
  4001e8:	9400      	str	r4, [sp, #0]
  4001ea:	9401      	str	r4, [sp, #4]
  4001ec:	9402      	str	r4, [sp, #8]
  4001ee:	9403      	str	r4, [sp, #12]
  4001f0:	9404      	str	r4, [sp, #16]
  4001f2:	9405      	str	r4, [sp, #20]

	/*Initialize the ADC reading*/
	/*1. Configuration of command*/
	uint16_t start_adc_meas;
	start_adc_meas = ADCV | FOURTY_TWO_kHz | DISCHARGE_NOT_PERMITTED | ALL_CELLS;
	bms_send_command(start_adc_meas, true);
  4001f4:	2101      	movs	r1, #1
  4001f6:	f44f 7038 	mov.w	r0, #736	; 0x2e0
  4001fa:	4b2a      	ldr	r3, [pc, #168]	; (4002a4 <bms_read_cell_voltages+0xc4>)
  4001fc:	4798      	blx	r3
	delay_us(1100); //time for measurement to finish
  4001fe:	f240 404c 	movw	r0, #1100	; 0x44c
  400202:	4b29      	ldr	r3, [pc, #164]	; (4002a8 <bms_read_cell_voltages+0xc8>)
  400204:	4798      	blx	r3
	
	///* Tell IC to send voltages from reg A */
	read_data_from_ltc6811(RDCVA, (uint8_t*)voltages, 6, true);
  400206:	2301      	movs	r3, #1
  400208:	2206      	movs	r2, #6
  40020a:	4669      	mov	r1, sp
  40020c:	2004      	movs	r0, #4
  40020e:	4e27      	ldr	r6, [pc, #156]	; (4002ac <bms_read_cell_voltages+0xcc>)
  400210:	47b0      	blx	r6
	for(int i = 0; i < 3; i++)
  400212:	4623      	mov	r3, r4
  400214:	e007      	b.n	400226 <bms_read_cell_voltages+0x46>
		voltage_buffer[i] = voltages[i];
  400216:	aa06      	add	r2, sp, #24
  400218:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  40021c:	f832 2c18 	ldrh.w	r2, [r2, #-24]
  400220:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
	for(int i = 0; i < 3; i++)
  400224:	3301      	adds	r3, #1
  400226:	2b02      	cmp	r3, #2
  400228:	ddf5      	ble.n	400216 <bms_read_cell_voltages+0x36>
		
	read_data_from_ltc6811(RDCVB, (uint8_t*)voltages, 6, true);
  40022a:	2301      	movs	r3, #1
  40022c:	2206      	movs	r2, #6
  40022e:	4669      	mov	r1, sp
  400230:	4610      	mov	r0, r2
  400232:	4c1e      	ldr	r4, [pc, #120]	; (4002ac <bms_read_cell_voltages+0xcc>)
  400234:	47a0      	blx	r4
	for(int i = 0; i < 3; i++)
  400236:	2300      	movs	r3, #0
  400238:	e008      	b.n	40024c <bms_read_cell_voltages+0x6c>
		voltage_buffer[i+3] = voltages[i];
  40023a:	1cda      	adds	r2, r3, #3
  40023c:	a906      	add	r1, sp, #24
  40023e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  400242:	f831 1c18 	ldrh.w	r1, [r1, #-24]
  400246:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
	for(int i = 0; i < 3; i++)
  40024a:	3301      	adds	r3, #1
  40024c:	2b02      	cmp	r3, #2
  40024e:	ddf4      	ble.n	40023a <bms_read_cell_voltages+0x5a>

	read_data_from_ltc6811(RDCVC, (uint8_t*)voltages, 6, true);
  400250:	2301      	movs	r3, #1
  400252:	2206      	movs	r2, #6
  400254:	4669      	mov	r1, sp
  400256:	2008      	movs	r0, #8
  400258:	4c14      	ldr	r4, [pc, #80]	; (4002ac <bms_read_cell_voltages+0xcc>)
  40025a:	47a0      	blx	r4
	for(int i = 0; i < 3; i++)
  40025c:	2300      	movs	r3, #0
  40025e:	e008      	b.n	400272 <bms_read_cell_voltages+0x92>
		voltage_buffer[i+6] = voltages[i];
  400260:	1d9a      	adds	r2, r3, #6
  400262:	a906      	add	r1, sp, #24
  400264:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  400268:	f831 1c18 	ldrh.w	r1, [r1, #-24]
  40026c:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
	for(int i = 0; i < 3; i++)
  400270:	3301      	adds	r3, #1
  400272:	2b02      	cmp	r3, #2
  400274:	ddf4      	ble.n	400260 <bms_read_cell_voltages+0x80>
		
	read_data_from_ltc6811(RDCVD, (uint8_t*)voltages, 6, true);
  400276:	2301      	movs	r3, #1
  400278:	2206      	movs	r2, #6
  40027a:	4669      	mov	r1, sp
  40027c:	200a      	movs	r0, #10
  40027e:	4c0b      	ldr	r4, [pc, #44]	; (4002ac <bms_read_cell_voltages+0xcc>)
  400280:	47a0      	blx	r4
	for(int i = 0; i < 3; i++)
  400282:	2300      	movs	r3, #0
  400284:	e009      	b.n	40029a <bms_read_cell_voltages+0xba>
		voltage_buffer[i+9] = voltages[i];
  400286:	f103 0209 	add.w	r2, r3, #9
  40028a:	a906      	add	r1, sp, #24
  40028c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  400290:	f831 1c18 	ldrh.w	r1, [r1, #-24]
  400294:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
	for(int i = 0; i < 3; i++)
  400298:	3301      	adds	r3, #1
  40029a:	2b02      	cmp	r3, #2
  40029c:	ddf3      	ble.n	400286 <bms_read_cell_voltages+0xa6>
}
  40029e:	b006      	add	sp, #24
  4002a0:	bd70      	pop	{r4, r5, r6, pc}
  4002a2:	bf00      	nop
  4002a4:	00401035 	.word	0x00401035
  4002a8:	00400519 	.word	0x00400519
  4002ac:	00401085 	.word	0x00401085

004002b0 <bms_enable_cs>:

void bms_enable_cs(){
  4002b0:	b508      	push	{r3, lr}
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
	((Pio *)hw)->PIO_CODR = mask;
  4002b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4002b6:	4b03      	ldr	r3, [pc, #12]	; (4002c4 <bms_enable_cs+0x14>)
  4002b8:	635a      	str	r2, [r3, #52]	; 0x34
	gpio_set_pin_level(PC25, false);
	delay_us(10);
  4002ba:	200a      	movs	r0, #10
  4002bc:	4b02      	ldr	r3, [pc, #8]	; (4002c8 <bms_enable_cs+0x18>)
  4002be:	4798      	blx	r3
  4002c0:	bd08      	pop	{r3, pc}
  4002c2:	bf00      	nop
  4002c4:	400e1200 	.word	0x400e1200
  4002c8:	00400519 	.word	0x00400519

004002cc <bms_disable_cs>:
	((Pio *)hw)->PIO_SODR = mask;
  4002cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4002d0:	4b01      	ldr	r3, [pc, #4]	; (4002d8 <bms_disable_cs+0xc>)
  4002d2:	631a      	str	r2, [r3, #48]	; 0x30
  4002d4:	4770      	bx	lr
  4002d6:	bf00      	nop
  4002d8:	400e1200 	.word	0x400e1200

004002dc <wake_up_ltc>:
void wake_up_ltc(){
  4002dc:	b508      	push	{r3, lr}
	bms_enable_cs();
  4002de:	4b04      	ldr	r3, [pc, #16]	; (4002f0 <wake_up_ltc+0x14>)
  4002e0:	4798      	blx	r3
	bms_disable_cs();
  4002e2:	4b04      	ldr	r3, [pc, #16]	; (4002f4 <wake_up_ltc+0x18>)
  4002e4:	4798      	blx	r3
	delay_us(400);
  4002e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4002ea:	4b03      	ldr	r3, [pc, #12]	; (4002f8 <wake_up_ltc+0x1c>)
  4002ec:	4798      	blx	r3
  4002ee:	bd08      	pop	{r3, pc}
  4002f0:	004002b1 	.word	0x004002b1
  4002f4:	004002cd 	.word	0x004002cd
  4002f8:	00400519 	.word	0x00400519

004002fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4002fc:	e7fe      	b.n	4002fc <Dummy_Handler>
	...

00400300 <Reset_Handler>:
{
  400300:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400302:	4b10      	ldr	r3, [pc, #64]	; (400344 <Reset_Handler+0x44>)
  400304:	4a10      	ldr	r2, [pc, #64]	; (400348 <Reset_Handler+0x48>)
  400306:	429a      	cmp	r2, r3
  400308:	d009      	beq.n	40031e <Reset_Handler+0x1e>
  40030a:	4b0e      	ldr	r3, [pc, #56]	; (400344 <Reset_Handler+0x44>)
  40030c:	4a0e      	ldr	r2, [pc, #56]	; (400348 <Reset_Handler+0x48>)
  40030e:	e003      	b.n	400318 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400310:	6811      	ldr	r1, [r2, #0]
  400312:	6019      	str	r1, [r3, #0]
  400314:	3304      	adds	r3, #4
  400316:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400318:	490c      	ldr	r1, [pc, #48]	; (40034c <Reset_Handler+0x4c>)
  40031a:	428b      	cmp	r3, r1
  40031c:	d3f8      	bcc.n	400310 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40031e:	4b0c      	ldr	r3, [pc, #48]	; (400350 <Reset_Handler+0x50>)
  400320:	e002      	b.n	400328 <Reset_Handler+0x28>
                *pDest++ = 0;
  400322:	2200      	movs	r2, #0
  400324:	601a      	str	r2, [r3, #0]
  400326:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400328:	4a0a      	ldr	r2, [pc, #40]	; (400354 <Reset_Handler+0x54>)
  40032a:	4293      	cmp	r3, r2
  40032c:	d3f9      	bcc.n	400322 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40032e:	4a0a      	ldr	r2, [pc, #40]	; (400358 <Reset_Handler+0x58>)
  400330:	4b0a      	ldr	r3, [pc, #40]	; (40035c <Reset_Handler+0x5c>)
  400332:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400336:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400338:	4b09      	ldr	r3, [pc, #36]	; (400360 <Reset_Handler+0x60>)
  40033a:	4798      	blx	r3
        main();
  40033c:	4b09      	ldr	r3, [pc, #36]	; (400364 <Reset_Handler+0x64>)
  40033e:	4798      	blx	r3
  400340:	e7fe      	b.n	400340 <Reset_Handler+0x40>
  400342:	bf00      	nop
  400344:	20400000 	.word	0x20400000
  400348:	00401904 	.word	0x00401904
  40034c:	20400064 	.word	0x20400064
  400350:	20400064 	.word	0x20400064
  400354:	204000b8 	.word	0x204000b8
  400358:	e000ed00 	.word	0xe000ed00
  40035c:	00400000 	.word	0x00400000
  400360:	004011dd 	.word	0x004011dd
  400364:	00401131 	.word	0x00401131

00400368 <SPI_1_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400368:	4b16      	ldr	r3, [pc, #88]	; (4003c4 <SPI_1_PORT_init+0x5c>)
  40036a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40036c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  400370:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400372:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400374:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
  400378:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40037a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40037e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400380:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400382:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  400386:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400388:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40038a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
  40038e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400390:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400394:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400396:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400398:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  40039c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40039e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003a0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  4003a4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4003aa:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_PER = mask;
  4003ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003b0:	601a      	str	r2, [r3, #0]
  4003b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4003b6:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_OER = mask;
  4003b8:	611a      	str	r2, [r3, #16]
  4003ba:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  4003bc:	6319      	str	r1, [r3, #48]	; 0x30
  4003be:	631a      	str	r2, [r3, #48]	; 0x30
  4003c0:	4770      	bx	lr
  4003c2:	bf00      	nop
  4003c4:	400e1200 	.word	0x400e1200

004003c8 <SPI_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4003c8:	4b05      	ldr	r3, [pc, #20]	; (4003e0 <SPI_1_CLOCK_init+0x18>)
  4003ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4003ce:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4003d2:	d104      	bne.n	4003de <SPI_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4003d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4003d8:	4b01      	ldr	r3, [pc, #4]	; (4003e0 <SPI_1_CLOCK_init+0x18>)
  4003da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4003de:	4770      	bx	lr
  4003e0:	400e0600 	.word	0x400e0600

004003e4 <SPI_1_init>:

/**
 * @brief Initialize SPI1 peripheral
 */
void SPI_1_init(void)
{
  4003e4:	b510      	push	{r4, lr}
	SPI_1_CLOCK_init();
  4003e6:	4b08      	ldr	r3, [pc, #32]	; (400408 <SPI_1_init+0x24>)
  4003e8:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_1, _spi_get_spi_m_sync());
  4003ea:	4b08      	ldr	r3, [pc, #32]	; (40040c <SPI_1_init+0x28>)
  4003ec:	4798      	blx	r3
  4003ee:	4c08      	ldr	r4, [pc, #32]	; (400410 <SPI_1_init+0x2c>)
  4003f0:	4601      	mov	r1, r0
  4003f2:	4620      	mov	r0, r4
  4003f4:	4b07      	ldr	r3, [pc, #28]	; (400414 <SPI_1_init+0x30>)
  4003f6:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SPI1);
  4003f8:	4907      	ldr	r1, [pc, #28]	; (400418 <SPI_1_init+0x34>)
  4003fa:	4620      	mov	r0, r4
  4003fc:	4b07      	ldr	r3, [pc, #28]	; (40041c <SPI_1_init+0x38>)
  4003fe:	4798      	blx	r3
	SPI_1_PORT_init();
  400400:	4b07      	ldr	r3, [pc, #28]	; (400420 <SPI_1_init+0x3c>)
  400402:	4798      	blx	r3
  400404:	bd10      	pop	{r4, pc}
  400406:	bf00      	nop
  400408:	004003c9 	.word	0x004003c9
  40040c:	00400ce1 	.word	0x00400ce1
  400410:	20400090 	.word	0x20400090
  400414:	00400569 	.word	0x00400569
  400418:	40058000 	.word	0x40058000
  40041c:	00400589 	.word	0x00400589
  400420:	00400369 	.word	0x00400369

00400424 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400424:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400426:	4802      	ldr	r0, [pc, #8]	; (400430 <delay_driver_init+0xc>)
  400428:	4b02      	ldr	r3, [pc, #8]	; (400434 <delay_driver_init+0x10>)
  40042a:	4798      	blx	r3
  40042c:	bd08      	pop	{r3, pc}
  40042e:	bf00      	nop
  400430:	e000e010 	.word	0xe000e010
  400434:	00400505 	.word	0x00400505

00400438 <USART_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400438:	4b0a      	ldr	r3, [pc, #40]	; (400464 <USART_1_PORT_init+0x2c>)
  40043a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40043c:	f022 0220 	bic.w	r2, r2, #32
  400440:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400442:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400444:	f042 0220 	orr.w	r2, r2, #32
  400448:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40044a:	2220      	movs	r2, #32
  40044c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40044e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  400454:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400456:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40045c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40045e:	2240      	movs	r2, #64	; 0x40
  400460:	605a      	str	r2, [r3, #4]
  400462:	4770      	bx	lr
  400464:	400e0e00 	.word	0x400e0e00

00400468 <USART_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400468:	4b04      	ldr	r3, [pc, #16]	; (40047c <USART_1_CLOCK_init+0x14>)
  40046a:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40046c:	f413 7f80 	tst.w	r3, #256	; 0x100
  400470:	d103      	bne.n	40047a <USART_1_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400472:	f44f 7280 	mov.w	r2, #256	; 0x100
  400476:	4b01      	ldr	r3, [pc, #4]	; (40047c <USART_1_CLOCK_init+0x14>)
  400478:	611a      	str	r2, [r3, #16]
  40047a:	4770      	bx	lr
  40047c:	400e0600 	.word	0x400e0600

00400480 <USART_1_init>:
{
	_pmc_enable_periph_clock(ID_UART1);
}

void USART_1_init(void)
{
  400480:	b508      	push	{r3, lr}
	USART_1_CLOCK_init();
  400482:	4b06      	ldr	r3, [pc, #24]	; (40049c <USART_1_init+0x1c>)
  400484:	4798      	blx	r3
	usart_sync_init(&USART_1, UART1, _uart_get_usart_sync());
  400486:	4b06      	ldr	r3, [pc, #24]	; (4004a0 <USART_1_init+0x20>)
  400488:	4798      	blx	r3
  40048a:	4602      	mov	r2, r0
  40048c:	4905      	ldr	r1, [pc, #20]	; (4004a4 <USART_1_init+0x24>)
  40048e:	4806      	ldr	r0, [pc, #24]	; (4004a8 <USART_1_init+0x28>)
  400490:	4b06      	ldr	r3, [pc, #24]	; (4004ac <USART_1_init+0x2c>)
  400492:	4798      	blx	r3
	USART_1_PORT_init();
  400494:	4b06      	ldr	r3, [pc, #24]	; (4004b0 <USART_1_init+0x30>)
  400496:	4798      	blx	r3
  400498:	bd08      	pop	{r3, pc}
  40049a:	bf00      	nop
  40049c:	00400469 	.word	0x00400469
  4004a0:	00400f79 	.word	0x00400f79
  4004a4:	400e0a00 	.word	0x400e0a00
  4004a8:	204000a8 	.word	0x204000a8
  4004ac:	00400839 	.word	0x00400839
  4004b0:	00400439 	.word	0x00400439

004004b4 <system_init>:
}

void system_init(void)
{
  4004b4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4004b6:	4b07      	ldr	r3, [pc, #28]	; (4004d4 <system_init+0x20>)
  4004b8:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4004ba:	4a07      	ldr	r2, [pc, #28]	; (4004d8 <system_init+0x24>)
  4004bc:	6853      	ldr	r3, [r2, #4]
  4004be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4004c2:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	SPI_1_init();
  4004c4:	4b05      	ldr	r3, [pc, #20]	; (4004dc <system_init+0x28>)
  4004c6:	4798      	blx	r3

	delay_driver_init();
  4004c8:	4b05      	ldr	r3, [pc, #20]	; (4004e0 <system_init+0x2c>)
  4004ca:	4798      	blx	r3

	USART_1_init();
  4004cc:	4b05      	ldr	r3, [pc, #20]	; (4004e4 <system_init+0x30>)
  4004ce:	4798      	blx	r3
  4004d0:	bd08      	pop	{r3, pc}
  4004d2:	bf00      	nop
  4004d4:	0040090d 	.word	0x0040090d
  4004d8:	400e1850 	.word	0x400e1850
  4004dc:	004003e5 	.word	0x004003e5
  4004e0:	00400425 	.word	0x00400425
  4004e4:	00400481 	.word	0x00400481

004004e8 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4004e8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4004ec:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4004ee:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4004f0:	f3bf 8f5f 	dmb	sy
  4004f4:	4770      	bx	lr

004004f6 <atomic_leave_critical>:
  4004f6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4004fa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4004fc:	f383 8810 	msr	PRIMASK, r3
  400500:	4770      	bx	lr
	...

00400504 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400504:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400506:	4b02      	ldr	r3, [pc, #8]	; (400510 <delay_init+0xc>)
  400508:	6018      	str	r0, [r3, #0]
  40050a:	4b02      	ldr	r3, [pc, #8]	; (400514 <delay_init+0x10>)
  40050c:	4798      	blx	r3
  40050e:	bd08      	pop	{r3, pc}
  400510:	20400080 	.word	0x20400080
  400514:	00400cf9 	.word	0x00400cf9

00400518 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  400518:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  40051a:	4b04      	ldr	r3, [pc, #16]	; (40052c <delay_us+0x14>)
  40051c:	681c      	ldr	r4, [r3, #0]
  40051e:	4b04      	ldr	r3, [pc, #16]	; (400530 <delay_us+0x18>)
  400520:	4798      	blx	r3
  400522:	4601      	mov	r1, r0
  400524:	4620      	mov	r0, r4
  400526:	4b03      	ldr	r3, [pc, #12]	; (400534 <delay_us+0x1c>)
  400528:	4798      	blx	r3
  40052a:	bd10      	pop	{r4, pc}
  40052c:	20400080 	.word	0x20400080
  400530:	00400901 	.word	0x00400901
  400534:	00400d05 	.word	0x00400d05

00400538 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400538:	b570      	push	{r4, r5, r6, lr}
  40053a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  40053c:	4604      	mov	r4, r0
  40053e:	460d      	mov	r5, r1
  400540:	2800      	cmp	r0, #0
  400542:	bf18      	it	ne
  400544:	2900      	cmpne	r1, #0
  400546:	bf14      	ite	ne
  400548:	2001      	movne	r0, #1
  40054a:	2000      	moveq	r0, #0
  40054c:	2234      	movs	r2, #52	; 0x34
  40054e:	4904      	ldr	r1, [pc, #16]	; (400560 <io_write+0x28>)
  400550:	4b04      	ldr	r3, [pc, #16]	; (400564 <io_write+0x2c>)
  400552:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400554:	6823      	ldr	r3, [r4, #0]
  400556:	4632      	mov	r2, r6
  400558:	4629      	mov	r1, r5
  40055a:	4620      	mov	r0, r4
  40055c:	4798      	blx	r3
}
  40055e:	bd70      	pop	{r4, r5, r6, pc}
  400560:	004013e8 	.word	0x004013e8
  400564:	004008d5 	.word	0x004008d5

00400568 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400568:	b538      	push	{r3, r4, r5, lr}
  40056a:	460d      	mov	r5, r1
	ASSERT(spi);
  40056c:	4604      	mov	r4, r0
  40056e:	2239      	movs	r2, #57	; 0x39
  400570:	4903      	ldr	r1, [pc, #12]	; (400580 <spi_m_sync_set_func_ptr+0x18>)
  400572:	3000      	adds	r0, #0
  400574:	bf18      	it	ne
  400576:	2001      	movne	r0, #1
  400578:	4b02      	ldr	r3, [pc, #8]	; (400584 <spi_m_sync_set_func_ptr+0x1c>)
  40057a:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  40057c:	6025      	str	r5, [r4, #0]
  40057e:	bd38      	pop	{r3, r4, r5, pc}
  400580:	004013fc 	.word	0x004013fc
  400584:	004008d5 	.word	0x004008d5

00400588 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  400588:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  40058a:	4604      	mov	r4, r0
  40058c:	460d      	mov	r5, r1
  40058e:	2800      	cmp	r0, #0
  400590:	bf18      	it	ne
  400592:	2900      	cmpne	r1, #0
  400594:	bf14      	ite	ne
  400596:	2001      	movne	r0, #1
  400598:	2000      	moveq	r0, #0
  40059a:	2240      	movs	r2, #64	; 0x40
  40059c:	4909      	ldr	r1, [pc, #36]	; (4005c4 <spi_m_sync_init+0x3c>)
  40059e:	4b0a      	ldr	r3, [pc, #40]	; (4005c8 <spi_m_sync_init+0x40>)
  4005a0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  4005a2:	4620      	mov	r0, r4
  4005a4:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  4005a8:	4629      	mov	r1, r5
  4005aa:	4b08      	ldr	r3, [pc, #32]	; (4005cc <spi_m_sync_init+0x44>)
  4005ac:	4798      	blx	r3

	if (rc < 0) {
  4005ae:	2800      	cmp	r0, #0
  4005b0:	db07      	blt.n	4005c2 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  4005b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4005b6:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  4005b8:	4b05      	ldr	r3, [pc, #20]	; (4005d0 <spi_m_sync_init+0x48>)
  4005ba:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  4005bc:	4b05      	ldr	r3, [pc, #20]	; (4005d4 <spi_m_sync_init+0x4c>)
  4005be:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  4005c0:	2000      	movs	r0, #0
}
  4005c2:	bd38      	pop	{r3, r4, r5, pc}
  4005c4:	004013fc 	.word	0x004013fc
  4005c8:	004008d5 	.word	0x004008d5
  4005cc:	00400a69 	.word	0x00400a69
  4005d0:	00400701 	.word	0x00400701
  4005d4:	004006c5 	.word	0x004006c5

004005d8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  4005d8:	b510      	push	{r4, lr}
	ASSERT(spi);
  4005da:	4604      	mov	r4, r0
  4005dc:	2257      	movs	r2, #87	; 0x57
  4005de:	4905      	ldr	r1, [pc, #20]	; (4005f4 <spi_m_sync_enable+0x1c>)
  4005e0:	3000      	adds	r0, #0
  4005e2:	bf18      	it	ne
  4005e4:	2001      	movne	r0, #1
  4005e6:	4b04      	ldr	r3, [pc, #16]	; (4005f8 <spi_m_sync_enable+0x20>)
  4005e8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  4005ea:	1d20      	adds	r0, r4, #4
  4005ec:	4b03      	ldr	r3, [pc, #12]	; (4005fc <spi_m_sync_enable+0x24>)
  4005ee:	4798      	blx	r3
  4005f0:	bd10      	pop	{r4, pc}
  4005f2:	bf00      	nop
  4005f4:	004013fc 	.word	0x004013fc
  4005f8:	004008d5 	.word	0x004008d5
  4005fc:	00400b11 	.word	0x00400b11

00400600 <spi_m_sync_set_baudrate>:
	ASSERT(spi);
	_spi_m_sync_disable(&spi->dev);
}

int32_t spi_m_sync_set_baudrate(struct spi_m_sync_descriptor *spi, const uint32_t baud_val)
{
  400600:	b538      	push	{r3, r4, r5, lr}
  400602:	460d      	mov	r5, r1
	ASSERT(spi);
  400604:	4604      	mov	r4, r0
  400606:	2263      	movs	r2, #99	; 0x63
  400608:	4905      	ldr	r1, [pc, #20]	; (400620 <spi_m_sync_set_baudrate+0x20>)
  40060a:	3000      	adds	r0, #0
  40060c:	bf18      	it	ne
  40060e:	2001      	movne	r0, #1
  400610:	4b04      	ldr	r3, [pc, #16]	; (400624 <spi_m_sync_set_baudrate+0x24>)
  400612:	4798      	blx	r3
	return _spi_m_sync_set_baudrate(&spi->dev, baud_val);
  400614:	4629      	mov	r1, r5
  400616:	1d20      	adds	r0, r4, #4
  400618:	4b03      	ldr	r3, [pc, #12]	; (400628 <spi_m_sync_set_baudrate+0x28>)
  40061a:	4798      	blx	r3
}
  40061c:	bd38      	pop	{r3, r4, r5, pc}
  40061e:	bf00      	nop
  400620:	004013fc 	.word	0x004013fc
  400624:	004008d5 	.word	0x004008d5
  400628:	00400b45 	.word	0x00400b45

0040062c <spi_m_sync_set_char_size>:
	ASSERT(spi);
	return _spi_m_sync_set_mode(&spi->dev, mode);
}

int32_t spi_m_sync_set_char_size(struct spi_m_sync_descriptor *spi, const enum spi_char_size char_size)
{
  40062c:	b538      	push	{r3, r4, r5, lr}
  40062e:	460d      	mov	r5, r1
	ASSERT(spi);
  400630:	4604      	mov	r4, r0
  400632:	226f      	movs	r2, #111	; 0x6f
  400634:	4905      	ldr	r1, [pc, #20]	; (40064c <spi_m_sync_set_char_size+0x20>)
  400636:	3000      	adds	r0, #0
  400638:	bf18      	it	ne
  40063a:	2001      	movne	r0, #1
  40063c:	4b04      	ldr	r3, [pc, #16]	; (400650 <spi_m_sync_set_char_size+0x24>)
  40063e:	4798      	blx	r3
	return _spi_m_sync_set_char_size(&spi->dev, char_size);
  400640:	4629      	mov	r1, r5
  400642:	1d20      	adds	r0, r4, #4
  400644:	4b03      	ldr	r3, [pc, #12]	; (400654 <spi_m_sync_set_char_size+0x28>)
  400646:	4798      	blx	r3
}
  400648:	bd38      	pop	{r3, r4, r5, pc}
  40064a:	bf00      	nop
  40064c:	004013fc 	.word	0x004013fc
  400650:	004008d5 	.word	0x004008d5
  400654:	00400ba9 	.word	0x00400ba9

00400658 <spi_m_sync_set_data_order>:

int32_t spi_m_sync_set_data_order(struct spi_m_sync_descriptor *spi, const enum spi_data_order dord)
{
  400658:	b538      	push	{r3, r4, r5, lr}
  40065a:	460d      	mov	r5, r1
	ASSERT(spi);
  40065c:	4604      	mov	r4, r0
  40065e:	2275      	movs	r2, #117	; 0x75
  400660:	4905      	ldr	r1, [pc, #20]	; (400678 <spi_m_sync_set_data_order+0x20>)
  400662:	3000      	adds	r0, #0
  400664:	bf18      	it	ne
  400666:	2001      	movne	r0, #1
  400668:	4b04      	ldr	r3, [pc, #16]	; (40067c <spi_m_sync_set_data_order+0x24>)
  40066a:	4798      	blx	r3
	return _spi_m_sync_set_data_order(&spi->dev, dord);
  40066c:	4629      	mov	r1, r5
  40066e:	1d20      	adds	r0, r4, #4
  400670:	4b03      	ldr	r3, [pc, #12]	; (400680 <spi_m_sync_set_data_order+0x28>)
  400672:	4798      	blx	r3
}
  400674:	bd38      	pop	{r3, r4, r5, pc}
  400676:	bf00      	nop
  400678:	004013fc 	.word	0x004013fc
  40067c:	004008d5 	.word	0x004008d5
  400680:	00400b7d 	.word	0x00400b7d

00400684 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400684:	b530      	push	{r4, r5, lr}
  400686:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400688:	4605      	mov	r5, r0
  40068a:	460c      	mov	r4, r1
  40068c:	2800      	cmp	r0, #0
  40068e:	bf18      	it	ne
  400690:	2900      	cmpne	r1, #0
  400692:	bf14      	ite	ne
  400694:	2001      	movne	r0, #1
  400696:	2000      	moveq	r0, #0
  400698:	22b3      	movs	r2, #179	; 0xb3
  40069a:	4907      	ldr	r1, [pc, #28]	; (4006b8 <spi_m_sync_transfer+0x34>)
  40069c:	4b07      	ldr	r3, [pc, #28]	; (4006bc <spi_m_sync_transfer+0x38>)
  40069e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  4006a0:	6823      	ldr	r3, [r4, #0]
  4006a2:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  4006a4:	6863      	ldr	r3, [r4, #4]
  4006a6:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  4006a8:	68a3      	ldr	r3, [r4, #8]
  4006aa:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  4006ac:	a901      	add	r1, sp, #4
  4006ae:	1d28      	adds	r0, r5, #4
  4006b0:	4b03      	ldr	r3, [pc, #12]	; (4006c0 <spi_m_sync_transfer+0x3c>)
  4006b2:	4798      	blx	r3
}
  4006b4:	b005      	add	sp, #20
  4006b6:	bd30      	pop	{r4, r5, pc}
  4006b8:	004013fc 	.word	0x004013fc
  4006bc:	004008d5 	.word	0x004008d5
  4006c0:	00400be1 	.word	0x00400be1

004006c4 <_spi_m_sync_io_write>:
{
  4006c4:	b570      	push	{r4, r5, r6, lr}
  4006c6:	b084      	sub	sp, #16
  4006c8:	460e      	mov	r6, r1
  4006ca:	4615      	mov	r5, r2
	ASSERT(io);
  4006cc:	4604      	mov	r4, r0
  4006ce:	22a3      	movs	r2, #163	; 0xa3
  4006d0:	4908      	ldr	r1, [pc, #32]	; (4006f4 <_spi_m_sync_io_write+0x30>)
  4006d2:	3000      	adds	r0, #0
  4006d4:	bf18      	it	ne
  4006d6:	2001      	movne	r0, #1
  4006d8:	4b07      	ldr	r3, [pc, #28]	; (4006f8 <_spi_m_sync_io_write+0x34>)
  4006da:	4798      	blx	r3
	xfer.rxbuf = 0;
  4006dc:	2300      	movs	r3, #0
  4006de:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  4006e0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  4006e2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  4006e4:	a901      	add	r1, sp, #4
  4006e6:	f1a4 000c 	sub.w	r0, r4, #12
  4006ea:	4b04      	ldr	r3, [pc, #16]	; (4006fc <_spi_m_sync_io_write+0x38>)
  4006ec:	4798      	blx	r3
}
  4006ee:	b004      	add	sp, #16
  4006f0:	bd70      	pop	{r4, r5, r6, pc}
  4006f2:	bf00      	nop
  4006f4:	004013fc 	.word	0x004013fc
  4006f8:	004008d5 	.word	0x004008d5
  4006fc:	00400685 	.word	0x00400685

00400700 <_spi_m_sync_io_read>:
{
  400700:	b570      	push	{r4, r5, r6, lr}
  400702:	b084      	sub	sp, #16
  400704:	460e      	mov	r6, r1
  400706:	4615      	mov	r5, r2
	ASSERT(io);
  400708:	4604      	mov	r4, r0
  40070a:	2287      	movs	r2, #135	; 0x87
  40070c:	4908      	ldr	r1, [pc, #32]	; (400730 <_spi_m_sync_io_read+0x30>)
  40070e:	3000      	adds	r0, #0
  400710:	bf18      	it	ne
  400712:	2001      	movne	r0, #1
  400714:	4b07      	ldr	r3, [pc, #28]	; (400734 <_spi_m_sync_io_read+0x34>)
  400716:	4798      	blx	r3
	xfer.rxbuf = buf;
  400718:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  40071a:	2300      	movs	r3, #0
  40071c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  40071e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400720:	a901      	add	r1, sp, #4
  400722:	f1a4 000c 	sub.w	r0, r4, #12
  400726:	4b04      	ldr	r3, [pc, #16]	; (400738 <_spi_m_sync_io_read+0x38>)
  400728:	4798      	blx	r3
}
  40072a:	b004      	add	sp, #16
  40072c:	bd70      	pop	{r4, r5, r6, pc}
  40072e:	bf00      	nop
  400730:	004013fc 	.word	0x004013fc
  400734:	004008d5 	.word	0x004008d5
  400738:	00400685 	.word	0x00400685

0040073c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  40073c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  40073e:	4604      	mov	r4, r0
  400740:	460d      	mov	r5, r1
  400742:	2800      	cmp	r0, #0
  400744:	bf18      	it	ne
  400746:	2900      	cmpne	r1, #0
  400748:	bf14      	ite	ne
  40074a:	2001      	movne	r0, #1
  40074c:	2000      	moveq	r0, #0
  40074e:	22bd      	movs	r2, #189	; 0xbd
  400750:	4903      	ldr	r1, [pc, #12]	; (400760 <spi_m_sync_get_io_descriptor+0x24>)
  400752:	4b04      	ldr	r3, [pc, #16]	; (400764 <spi_m_sync_get_io_descriptor+0x28>)
  400754:	4798      	blx	r3
	*io = &spi->io;
  400756:	340c      	adds	r4, #12
  400758:	602c      	str	r4, [r5, #0]
	return 0;
}
  40075a:	2000      	movs	r0, #0
  40075c:	bd38      	pop	{r3, r4, r5, pc}
  40075e:	bf00      	nop
  400760:	004013fc 	.word	0x004013fc
  400764:	004008d5 	.word	0x004008d5

00400768 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40076a:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40076c:	4605      	mov	r5, r0
  40076e:	460f      	mov	r7, r1
  400770:	2800      	cmp	r0, #0
  400772:	bf18      	it	ne
  400774:	2900      	cmpne	r1, #0
  400776:	d002      	beq.n	40077e <usart_sync_write+0x16>
  400778:	bb0a      	cbnz	r2, 4007be <usart_sync_write+0x56>
  40077a:	2000      	movs	r0, #0
  40077c:	e000      	b.n	400780 <usart_sync_write+0x18>
  40077e:	2000      	movs	r0, #0
  400780:	22f1      	movs	r2, #241	; 0xf1
  400782:	4910      	ldr	r1, [pc, #64]	; (4007c4 <usart_sync_write+0x5c>)
  400784:	4b10      	ldr	r3, [pc, #64]	; (4007c8 <usart_sync_write+0x60>)
  400786:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400788:	f105 0408 	add.w	r4, r5, #8
  40078c:	4620      	mov	r0, r4
  40078e:	4b0f      	ldr	r3, [pc, #60]	; (4007cc <usart_sync_write+0x64>)
  400790:	4798      	blx	r3
  400792:	2800      	cmp	r0, #0
  400794:	d0f8      	beq.n	400788 <usart_sync_write+0x20>
  400796:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400798:	5d79      	ldrb	r1, [r7, r5]
  40079a:	4620      	mov	r0, r4
  40079c:	4b0c      	ldr	r3, [pc, #48]	; (4007d0 <usart_sync_write+0x68>)
  40079e:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4007a0:	4620      	mov	r0, r4
  4007a2:	4b0a      	ldr	r3, [pc, #40]	; (4007cc <usart_sync_write+0x64>)
  4007a4:	4798      	blx	r3
  4007a6:	2800      	cmp	r0, #0
  4007a8:	d0fa      	beq.n	4007a0 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  4007aa:	3501      	adds	r5, #1
  4007ac:	42b5      	cmp	r5, r6
  4007ae:	d3f3      	bcc.n	400798 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  4007b0:	4620      	mov	r0, r4
  4007b2:	4b08      	ldr	r3, [pc, #32]	; (4007d4 <usart_sync_write+0x6c>)
  4007b4:	4798      	blx	r3
  4007b6:	2800      	cmp	r0, #0
  4007b8:	d0fa      	beq.n	4007b0 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  4007ba:	4628      	mov	r0, r5
  4007bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  4007be:	2001      	movs	r0, #1
  4007c0:	e7de      	b.n	400780 <usart_sync_write+0x18>
  4007c2:	bf00      	nop
  4007c4:	00401418 	.word	0x00401418
  4007c8:	004008d5 	.word	0x004008d5
  4007cc:	00400f01 	.word	0x00400f01
  4007d0:	00400eb9 	.word	0x00400eb9
  4007d4:	00400f29 	.word	0x00400f29

004007d8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4007d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007dc:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4007de:	4605      	mov	r5, r0
  4007e0:	4688      	mov	r8, r1
  4007e2:	2800      	cmp	r0, #0
  4007e4:	bf18      	it	ne
  4007e6:	2900      	cmpne	r1, #0
  4007e8:	d002      	beq.n	4007f0 <usart_sync_read+0x18>
  4007ea:	b9d2      	cbnz	r2, 400822 <usart_sync_read+0x4a>
  4007ec:	2000      	movs	r0, #0
  4007ee:	e000      	b.n	4007f2 <usart_sync_read+0x1a>
  4007f0:	2000      	movs	r0, #0
  4007f2:	f44f 7286 	mov.w	r2, #268	; 0x10c
  4007f6:	490c      	ldr	r1, [pc, #48]	; (400828 <usart_sync_read+0x50>)
  4007f8:	4b0c      	ldr	r3, [pc, #48]	; (40082c <usart_sync_read+0x54>)
  4007fa:	4798      	blx	r3
	uint32_t                      offset = 0;
  4007fc:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  4007fe:	f105 0408 	add.w	r4, r5, #8
  400802:	4620      	mov	r0, r4
  400804:	4b0a      	ldr	r3, [pc, #40]	; (400830 <usart_sync_read+0x58>)
  400806:	4798      	blx	r3
  400808:	2800      	cmp	r0, #0
  40080a:	d0f8      	beq.n	4007fe <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  40080c:	4620      	mov	r0, r4
  40080e:	4b09      	ldr	r3, [pc, #36]	; (400834 <usart_sync_read+0x5c>)
  400810:	4798      	blx	r3
  400812:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400816:	3601      	adds	r6, #1
  400818:	42be      	cmp	r6, r7
  40081a:	d3f0      	bcc.n	4007fe <usart_sync_read+0x26>

	return (int32_t)offset;
}
  40081c:	4630      	mov	r0, r6
  40081e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400822:	2001      	movs	r0, #1
  400824:	e7e5      	b.n	4007f2 <usart_sync_read+0x1a>
  400826:	bf00      	nop
  400828:	00401418 	.word	0x00401418
  40082c:	004008d5 	.word	0x004008d5
  400830:	00400f51 	.word	0x00400f51
  400834:	00400edd 	.word	0x00400edd

00400838 <usart_sync_init>:
{
  400838:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40083a:	4604      	mov	r4, r0
  40083c:	460d      	mov	r5, r1
  40083e:	2800      	cmp	r0, #0
  400840:	bf18      	it	ne
  400842:	2900      	cmpne	r1, #0
  400844:	bf14      	ite	ne
  400846:	2001      	movne	r0, #1
  400848:	2000      	moveq	r0, #0
  40084a:	2234      	movs	r2, #52	; 0x34
  40084c:	4907      	ldr	r1, [pc, #28]	; (40086c <usart_sync_init+0x34>)
  40084e:	4b08      	ldr	r3, [pc, #32]	; (400870 <usart_sync_init+0x38>)
  400850:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400852:	4629      	mov	r1, r5
  400854:	f104 0008 	add.w	r0, r4, #8
  400858:	4b06      	ldr	r3, [pc, #24]	; (400874 <usart_sync_init+0x3c>)
  40085a:	4798      	blx	r3
	if (init_status) {
  40085c:	4603      	mov	r3, r0
  40085e:	b918      	cbnz	r0, 400868 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400860:	4a05      	ldr	r2, [pc, #20]	; (400878 <usart_sync_init+0x40>)
  400862:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400864:	4a05      	ldr	r2, [pc, #20]	; (40087c <usart_sync_init+0x44>)
  400866:	6022      	str	r2, [r4, #0]
}
  400868:	4618      	mov	r0, r3
  40086a:	bd38      	pop	{r3, r4, r5, pc}
  40086c:	00401418 	.word	0x00401418
  400870:	004008d5 	.word	0x004008d5
  400874:	00400e4d 	.word	0x00400e4d
  400878:	004007d9 	.word	0x004007d9
  40087c:	00400769 	.word	0x00400769

00400880 <usart_sync_enable>:
{
  400880:	b510      	push	{r4, lr}
	ASSERT(descr);
  400882:	4604      	mov	r4, r0
  400884:	2253      	movs	r2, #83	; 0x53
  400886:	4906      	ldr	r1, [pc, #24]	; (4008a0 <usart_sync_enable+0x20>)
  400888:	3000      	adds	r0, #0
  40088a:	bf18      	it	ne
  40088c:	2001      	movne	r0, #1
  40088e:	4b05      	ldr	r3, [pc, #20]	; (4008a4 <usart_sync_enable+0x24>)
  400890:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400892:	f104 0008 	add.w	r0, r4, #8
  400896:	4b04      	ldr	r3, [pc, #16]	; (4008a8 <usart_sync_enable+0x28>)
  400898:	4798      	blx	r3
}
  40089a:	2000      	movs	r0, #0
  40089c:	bd10      	pop	{r4, pc}
  40089e:	bf00      	nop
  4008a0:	00401418 	.word	0x00401418
  4008a4:	004008d5 	.word	0x004008d5
  4008a8:	00400e85 	.word	0x00400e85

004008ac <usart_sync_get_io_descriptor>:
{
  4008ac:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && io);
  4008ae:	4605      	mov	r5, r0
  4008b0:	460c      	mov	r4, r1
  4008b2:	2800      	cmp	r0, #0
  4008b4:	bf18      	it	ne
  4008b6:	2900      	cmpne	r1, #0
  4008b8:	bf14      	ite	ne
  4008ba:	2001      	movne	r0, #1
  4008bc:	2000      	moveq	r0, #0
  4008be:	2269      	movs	r2, #105	; 0x69
  4008c0:	4902      	ldr	r1, [pc, #8]	; (4008cc <usart_sync_get_io_descriptor+0x20>)
  4008c2:	4b03      	ldr	r3, [pc, #12]	; (4008d0 <usart_sync_get_io_descriptor+0x24>)
  4008c4:	4798      	blx	r3
	*io = &descr->io;
  4008c6:	6025      	str	r5, [r4, #0]
}
  4008c8:	2000      	movs	r0, #0
  4008ca:	bd38      	pop	{r3, r4, r5, pc}
  4008cc:	00401418 	.word	0x00401418
  4008d0:	004008d5 	.word	0x004008d5

004008d4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4008d4:	b900      	cbnz	r0, 4008d8 <assert+0x4>
		__asm("BKPT #0");
  4008d6:	be00      	bkpt	0x0000
  4008d8:	4770      	bx	lr
	...

004008dc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  4008dc:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  4008de:	4a06      	ldr	r2, [pc, #24]	; (4008f8 <_sbrk+0x1c>)
  4008e0:	6812      	ldr	r2, [r2, #0]
  4008e2:	b122      	cbz	r2, 4008ee <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4008e4:	4a04      	ldr	r2, [pc, #16]	; (4008f8 <_sbrk+0x1c>)
  4008e6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  4008e8:	4403      	add	r3, r0
  4008ea:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  4008ec:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4008ee:	4903      	ldr	r1, [pc, #12]	; (4008fc <_sbrk+0x20>)
  4008f0:	4a01      	ldr	r2, [pc, #4]	; (4008f8 <_sbrk+0x1c>)
  4008f2:	6011      	str	r1, [r2, #0]
  4008f4:	e7f6      	b.n	4008e4 <_sbrk+0x8>
  4008f6:	bf00      	nop
  4008f8:	20400084 	.word	0x20400084
  4008fc:	204006b8 	.word	0x204006b8

00400900 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400900:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400904:	fb03 f000 	mul.w	r0, r3, r0
  400908:	4770      	bx	lr
	...

0040090c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  40090c:	b500      	push	{lr}
  40090e:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400910:	a801      	add	r0, sp, #4
  400912:	4b0e      	ldr	r3, [pc, #56]	; (40094c <_init_chip+0x40>)
  400914:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400916:	4a0e      	ldr	r2, [pc, #56]	; (400950 <_init_chip+0x44>)
  400918:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  40091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400924:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400928:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  40092c:	a801      	add	r0, sp, #4
  40092e:	4b09      	ldr	r3, [pc, #36]	; (400954 <_init_chip+0x48>)
  400930:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400932:	4a09      	ldr	r2, [pc, #36]	; (400958 <_init_chip+0x4c>)
  400934:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400936:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  40093a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  40093e:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400940:	4b06      	ldr	r3, [pc, #24]	; (40095c <_init_chip+0x50>)
  400942:	4798      	blx	r3
}
  400944:	b003      	add	sp, #12
  400946:	f85d fb04 	ldr.w	pc, [sp], #4
  40094a:	bf00      	nop
  40094c:	004004e9 	.word	0x004004e9
  400950:	e000ed00 	.word	0xe000ed00
  400954:	004004f7 	.word	0x004004f7
  400958:	400e0c00 	.word	0x400e0c00
  40095c:	004009fd 	.word	0x004009fd

00400960 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400960:	490e      	ldr	r1, [pc, #56]	; (40099c <_pmc_init_sources+0x3c>)
  400962:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400964:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400968:	4b0d      	ldr	r3, [pc, #52]	; (4009a0 <_pmc_init_sources+0x40>)
  40096a:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  40096c:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40096e:	4b0b      	ldr	r3, [pc, #44]	; (40099c <_pmc_init_sources+0x3c>)
  400970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400972:	f013 0f01 	tst.w	r3, #1
  400976:	d0fa      	beq.n	40096e <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400978:	4b08      	ldr	r3, [pc, #32]	; (40099c <_pmc_init_sources+0x3c>)
  40097a:	6a19      	ldr	r1, [r3, #32]
  40097c:	4a09      	ldr	r2, [pc, #36]	; (4009a4 <_pmc_init_sources+0x44>)
  40097e:	430a      	orrs	r2, r1
  400980:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400982:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400984:	4a08      	ldr	r2, [pc, #32]	; (4009a8 <_pmc_init_sources+0x48>)
  400986:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400988:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40098a:	4a08      	ldr	r2, [pc, #32]	; (4009ac <_pmc_init_sources+0x4c>)
  40098c:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40098e:	4b03      	ldr	r3, [pc, #12]	; (40099c <_pmc_init_sources+0x3c>)
  400990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400992:	f013 0f02 	tst.w	r3, #2
  400996:	d0fa      	beq.n	40098e <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	400e0600 	.word	0x400e0600
  4009a0:	00373e01 	.word	0x00373e01
  4009a4:	01370000 	.word	0x01370000
  4009a8:	f800ffff 	.word	0xf800ffff
  4009ac:	20183f01 	.word	0x20183f01

004009b0 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4009b0:	4a11      	ldr	r2, [pc, #68]	; (4009f8 <_pmc_init_master_clock+0x48>)
  4009b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4009b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4009b8:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4009ba:	4b0f      	ldr	r3, [pc, #60]	; (4009f8 <_pmc_init_master_clock+0x48>)
  4009bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4009be:	f013 0f08 	tst.w	r3, #8
  4009c2:	d0fa      	beq.n	4009ba <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4009c4:	4a0c      	ldr	r2, [pc, #48]	; (4009f8 <_pmc_init_master_clock+0x48>)
  4009c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4009c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4009cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  4009d0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4009d2:	4b09      	ldr	r3, [pc, #36]	; (4009f8 <_pmc_init_master_clock+0x48>)
  4009d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4009d6:	f013 0f08 	tst.w	r3, #8
  4009da:	d0fa      	beq.n	4009d2 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4009dc:	4a06      	ldr	r2, [pc, #24]	; (4009f8 <_pmc_init_master_clock+0x48>)
  4009de:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  4009e0:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  4009e4:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  4009e8:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4009ea:	4b03      	ldr	r3, [pc, #12]	; (4009f8 <_pmc_init_master_clock+0x48>)
  4009ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4009ee:	f013 0f08 	tst.w	r3, #8
  4009f2:	d0fa      	beq.n	4009ea <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  4009f4:	4770      	bx	lr
  4009f6:	bf00      	nop
  4009f8:	400e0600 	.word	0x400e0600

004009fc <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4009fc:	b508      	push	{r3, lr}
	_pmc_init_sources();
  4009fe:	4b02      	ldr	r3, [pc, #8]	; (400a08 <_pmc_init+0xc>)
  400a00:	4798      	blx	r3
	_pmc_init_master_clock();
  400a02:	4b02      	ldr	r3, [pc, #8]	; (400a0c <_pmc_init+0x10>)
  400a04:	4798      	blx	r3
  400a06:	bd08      	pop	{r3, pc}
  400a08:	00400961 	.word	0x00400961
  400a0c:	004009b1 	.word	0x004009b1

00400a10 <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  400a10:	2301      	movs	r3, #1
  400a12:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  400a14:	2000      	movs	r0, #0
  400a16:	4770      	bx	lr

00400a18 <_spi_set_baudrate>:
	tmp = ((Spi *)hw)->SPI_CSR[index];
  400a18:	6b03      	ldr	r3, [r0, #48]	; 0x30
	tmp &= ~SPI_CSR_SCBR_Msk;
  400a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	tmp |= SPI_CSR_SCBR(data);
  400a1e:	0209      	lsls	r1, r1, #8
  400a20:	b289      	uxth	r1, r1
  400a22:	430b      	orrs	r3, r1
	((Spi *)hw)->SPI_CSR[index] = tmp;
  400a24:	6303      	str	r3, [r0, #48]	; 0x30
static int32_t _spi_set_baudrate(void *const hw, const uint32_t baud_val)
{
	hri_spi_write_CSR_SCBR_bf(hw, 0, (uint8_t)baud_val);

	return ERR_NONE;
}
  400a26:	2000      	movs	r0, #0
  400a28:	4770      	bx	lr

00400a2a <_spi_set_char_size>:
 * \param[out] size    Stored char size
 *
 * \return Setting char size status
 */
static int32_t _spi_set_char_size(void *const hw, const enum spi_char_size char_size, uint8_t *const size)
{
  400a2a:	b410      	push	{r4}
	tmp = ((Spi *)hw)->SPI_CSR[index];
  400a2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
	tmp &= ~SPI_CSR_BITS_Msk;
  400a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
	tmp |= SPI_CSR_BITS(data);
  400a32:	010c      	lsls	r4, r1, #4
  400a34:	b2e4      	uxtb	r4, r4
  400a36:	4323      	orrs	r3, r4
	((Spi *)hw)->SPI_CSR[index] = tmp;
  400a38:	6303      	str	r3, [r0, #48]	; 0x30
	hri_spi_write_CSR_BITS_bf(hw, 0, char_size);
	if (char_size == SPI_CHAR_SIZE_8) {
  400a3a:	b129      	cbz	r1, 400a48 <_spi_set_char_size+0x1e>
		*size = 1;
	} else {
		*size = 2;
  400a3c:	2302      	movs	r3, #2
  400a3e:	7013      	strb	r3, [r2, #0]
	}

	return ERR_NONE;
}
  400a40:	2000      	movs	r0, #0
  400a42:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a46:	4770      	bx	lr
		*size = 1;
  400a48:	2301      	movs	r3, #1
  400a4a:	7013      	strb	r3, [r2, #0]
  400a4c:	e7f8      	b.n	400a40 <_spi_set_char_size+0x16>
	...

00400a50 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  400a50:	4b04      	ldr	r3, [pc, #16]	; (400a64 <_spi_get_hardware_index+0x14>)
  400a52:	4403      	add	r3, r0
  400a54:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  400a58:	2b05      	cmp	r3, #5
  400a5a:	d001      	beq.n	400a60 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  400a5c:	2000      	movs	r0, #0
	}
}
  400a5e:	4770      	bx	lr
		return 1;
  400a60:	2001      	movs	r0, #1
  400a62:	4770      	bx	lr
  400a64:	bfff8000 	.word	0xbfff8000

00400a68 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  400a68:	b570      	push	{r4, r5, r6, lr}
  400a6a:	4606      	mov	r6, r0
  400a6c:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  400a6e:	4608      	mov	r0, r1
  400a70:	4b20      	ldr	r3, [pc, #128]	; (400af4 <_spi_m_sync_init+0x8c>)
  400a72:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400a74:	2300      	movs	r3, #0
  400a76:	b33b      	cbz	r3, 400ac8 <_spi_m_sync_init+0x60>
	return NULL;
  400a78:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  400a7a:	f44f 729a 	mov.w	r2, #308	; 0x134
  400a7e:	491e      	ldr	r1, [pc, #120]	; (400af8 <_spi_m_sync_init+0x90>)
  400a80:	2e00      	cmp	r6, #0
  400a82:	bf18      	it	ne
  400a84:	2c00      	cmpne	r4, #0
  400a86:	bf14      	ite	ne
  400a88:	2001      	movne	r0, #1
  400a8a:	2000      	moveq	r0, #0
  400a8c:	4b1b      	ldr	r3, [pc, #108]	; (400afc <_spi_m_sync_init+0x94>)
  400a8e:	4798      	blx	r3

	if (regs == NULL) {
  400a90:	b355      	cbz	r5, 400ae8 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400a92:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  400a94:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400a98:	d129      	bne.n	400aee <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  400a9a:	2380      	movs	r3, #128	; 0x80
  400a9c:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  400a9e:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  400aa0:	686a      	ldr	r2, [r5, #4]
  400aa2:	4b17      	ldr	r3, [pc, #92]	; (400b00 <_spi_m_sync_init+0x98>)
  400aa4:	4013      	ands	r3, r2
  400aa6:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  400aa8:	68ab      	ldr	r3, [r5, #8]
  400aaa:	4a16      	ldr	r2, [pc, #88]	; (400b04 <_spi_m_sync_init+0x9c>)
  400aac:	401a      	ands	r2, r3
  400aae:	4b16      	ldr	r3, [pc, #88]	; (400b08 <_spi_m_sync_init+0xa0>)
  400ab0:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  400ab2:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  400ab4:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  400ab6:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  400ab8:	8a2b      	ldrh	r3, [r5, #16]
  400aba:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  400abc:	68eb      	ldr	r3, [r5, #12]
  400abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  400ac2:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  400ac4:	2000      	movs	r0, #0
  400ac6:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  400ac8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  400acc:	008a      	lsls	r2, r1, #2
  400ace:	490f      	ldr	r1, [pc, #60]	; (400b0c <_spi_m_sync_init+0xa4>)
  400ad0:	5c8a      	ldrb	r2, [r1, r2]
  400ad2:	4290      	cmp	r0, r2
  400ad4:	d002      	beq.n	400adc <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400ad6:	3301      	adds	r3, #1
  400ad8:	b2db      	uxtb	r3, r3
  400ada:	e7cc      	b.n	400a76 <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  400adc:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  400ae0:	00ab      	lsls	r3, r5, #2
  400ae2:	460d      	mov	r5, r1
  400ae4:	441d      	add	r5, r3
  400ae6:	e7c8      	b.n	400a7a <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  400ae8:	f06f 000c 	mvn.w	r0, #12
  400aec:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  400aee:	f06f 0010 	mvn.w	r0, #16
}
  400af2:	bd70      	pop	{r4, r5, r6, pc}
  400af4:	00400a51 	.word	0x00400a51
  400af8:	00401448 	.word	0x00401448
  400afc:	004008d5 	.word	0x004008d5
  400b00:	feffff7c 	.word	0xfeffff7c
  400b04:	fff1ff6f 	.word	0xfff1ff6f
  400b08:	000e0010 	.word	0x000e0010
  400b0c:	00401434 	.word	0x00401434

00400b10 <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  400b10:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  400b12:	4604      	mov	r4, r0
  400b14:	b168      	cbz	r0, 400b32 <_spi_m_sync_enable+0x22>
  400b16:	6803      	ldr	r3, [r0, #0]
  400b18:	b14b      	cbz	r3, 400b2e <_spi_m_sync_enable+0x1e>
  400b1a:	2001      	movs	r0, #1
  400b1c:	f44f 72b9 	mov.w	r2, #370	; 0x172
  400b20:	4905      	ldr	r1, [pc, #20]	; (400b38 <_spi_m_sync_enable+0x28>)
  400b22:	4b06      	ldr	r3, [pc, #24]	; (400b3c <_spi_m_sync_enable+0x2c>)
  400b24:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  400b26:	6820      	ldr	r0, [r4, #0]
  400b28:	4b05      	ldr	r3, [pc, #20]	; (400b40 <_spi_m_sync_enable+0x30>)
  400b2a:	4798      	blx	r3
}
  400b2c:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  400b2e:	2000      	movs	r0, #0
  400b30:	e7f4      	b.n	400b1c <_spi_m_sync_enable+0xc>
  400b32:	2000      	movs	r0, #0
  400b34:	e7f2      	b.n	400b1c <_spi_m_sync_enable+0xc>
  400b36:	bf00      	nop
  400b38:	00401448 	.word	0x00401448
  400b3c:	004008d5 	.word	0x004008d5
  400b40:	00400a11 	.word	0x00400a11

00400b44 <_spi_m_sync_set_baudrate>:
	rc = clk / baud;
	return rc;
}

int32_t _spi_m_sync_set_baudrate(struct _spi_m_sync_dev *dev, const uint32_t baud_val)
{
  400b44:	b538      	push	{r3, r4, r5, lr}
  400b46:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
  400b48:	4604      	mov	r4, r0
  400b4a:	b170      	cbz	r0, 400b6a <_spi_m_sync_set_baudrate+0x26>
  400b4c:	6803      	ldr	r3, [r0, #0]
  400b4e:	b153      	cbz	r3, 400b66 <_spi_m_sync_set_baudrate+0x22>
  400b50:	2001      	movs	r0, #1
  400b52:	f240 12af 	movw	r2, #431	; 0x1af
  400b56:	4906      	ldr	r1, [pc, #24]	; (400b70 <_spi_m_sync_set_baudrate+0x2c>)
  400b58:	4b06      	ldr	r3, [pc, #24]	; (400b74 <_spi_m_sync_set_baudrate+0x30>)
  400b5a:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
  400b5c:	4629      	mov	r1, r5
  400b5e:	6820      	ldr	r0, [r4, #0]
  400b60:	4b05      	ldr	r3, [pc, #20]	; (400b78 <_spi_m_sync_set_baudrate+0x34>)
  400b62:	4798      	blx	r3
}
  400b64:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && dev->prvt);
  400b66:	2000      	movs	r0, #0
  400b68:	e7f3      	b.n	400b52 <_spi_m_sync_set_baudrate+0xe>
  400b6a:	2000      	movs	r0, #0
  400b6c:	e7f1      	b.n	400b52 <_spi_m_sync_set_baudrate+0xe>
  400b6e:	bf00      	nop
  400b70:	00401448 	.word	0x00401448
  400b74:	004008d5 	.word	0x004008d5
  400b78:	00400a19 	.word	0x00400a19

00400b7c <_spi_m_sync_set_data_order>:

	return _spi_set_baudrate(dev->prvt, baud_val);
}

int32_t _spi_m_sync_set_data_order(struct _spi_m_sync_dev *dev, const enum spi_data_order dord)
{
  400b7c:	b508      	push	{r3, lr}
	ASSERT(dev && dev->prvt);
  400b7e:	b160      	cbz	r0, 400b9a <_spi_m_sync_set_data_order+0x1e>
  400b80:	6803      	ldr	r3, [r0, #0]
  400b82:	b143      	cbz	r3, 400b96 <_spi_m_sync_set_data_order+0x1a>
  400b84:	2001      	movs	r0, #1
  400b86:	f240 12bd 	movw	r2, #445	; 0x1bd
  400b8a:	4905      	ldr	r1, [pc, #20]	; (400ba0 <_spi_m_sync_set_data_order+0x24>)
  400b8c:	4b05      	ldr	r3, [pc, #20]	; (400ba4 <_spi_m_sync_set_data_order+0x28>)
  400b8e:	4798      	blx	r3
	(void)dord;

	return ERR_UNSUPPORTED_OP;
}
  400b90:	f06f 001a 	mvn.w	r0, #26
  400b94:	bd08      	pop	{r3, pc}
	ASSERT(dev && dev->prvt);
  400b96:	2000      	movs	r0, #0
  400b98:	e7f5      	b.n	400b86 <_spi_m_sync_set_data_order+0xa>
  400b9a:	2000      	movs	r0, #0
  400b9c:	e7f3      	b.n	400b86 <_spi_m_sync_set_data_order+0xa>
  400b9e:	bf00      	nop
  400ba0:	00401448 	.word	0x00401448
  400ba4:	004008d5 	.word	0x004008d5

00400ba8 <_spi_m_sync_set_char_size>:

	return ERR_UNSUPPORTED_OP;
}

int32_t _spi_m_sync_set_char_size(struct _spi_m_sync_dev *dev, const enum spi_char_size char_size)
{
  400ba8:	b538      	push	{r3, r4, r5, lr}
  400baa:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
  400bac:	4604      	mov	r4, r0
  400bae:	b178      	cbz	r0, 400bd0 <_spi_m_sync_set_char_size+0x28>
  400bb0:	6803      	ldr	r3, [r0, #0]
  400bb2:	b15b      	cbz	r3, 400bcc <_spi_m_sync_set_char_size+0x24>
  400bb4:	2001      	movs	r0, #1
  400bb6:	f240 12cd 	movw	r2, #461	; 0x1cd
  400bba:	4906      	ldr	r1, [pc, #24]	; (400bd4 <_spi_m_sync_set_char_size+0x2c>)
  400bbc:	4b06      	ldr	r3, [pc, #24]	; (400bd8 <_spi_m_sync_set_char_size+0x30>)
  400bbe:	4798      	blx	r3

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
  400bc0:	1d22      	adds	r2, r4, #4
  400bc2:	4629      	mov	r1, r5
  400bc4:	6820      	ldr	r0, [r4, #0]
  400bc6:	4b05      	ldr	r3, [pc, #20]	; (400bdc <_spi_m_sync_set_char_size+0x34>)
  400bc8:	4798      	blx	r3
}
  400bca:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && dev->prvt);
  400bcc:	2000      	movs	r0, #0
  400bce:	e7f2      	b.n	400bb6 <_spi_m_sync_set_char_size+0xe>
  400bd0:	2000      	movs	r0, #0
  400bd2:	e7f0      	b.n	400bb6 <_spi_m_sync_set_char_size+0xe>
  400bd4:	00401448 	.word	0x00401448
  400bd8:	004008d5 	.word	0x004008d5
  400bdc:	00400a2b 	.word	0x00400a2b

00400be0 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  400be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400be4:	b086      	sub	sp, #24
  400be6:	4607      	mov	r7, r0
  400be8:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  400bea:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  400bec:	680b      	ldr	r3, [r1, #0]
  400bee:	9301      	str	r3, [sp, #4]
  400bf0:	684b      	ldr	r3, [r1, #4]
  400bf2:	9302      	str	r3, [sp, #8]
  400bf4:	2300      	movs	r3, #0
  400bf6:	9303      	str	r3, [sp, #12]
  400bf8:	9304      	str	r3, [sp, #16]
  400bfa:	7903      	ldrb	r3, [r0, #4]
  400bfc:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  400c00:	1c26      	adds	r6, r4, #0
  400c02:	bf18      	it	ne
  400c04:	2601      	movne	r6, #1
  400c06:	f240 2231 	movw	r2, #561	; 0x231
  400c0a:	4933      	ldr	r1, [pc, #204]	; (400cd8 <_spi_m_sync_trans+0xf8>)
  400c0c:	2800      	cmp	r0, #0
  400c0e:	bf0c      	ite	eq
  400c10:	2000      	moveq	r0, #0
  400c12:	f006 0001 	andne.w	r0, r6, #1
  400c16:	4b31      	ldr	r3, [pc, #196]	; (400cdc <_spi_m_sync_trans+0xfc>)
  400c18:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400c1a:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  400c1c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400c20:	d122      	bne.n	400c68 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  400c22:	f06f 0013 	mvn.w	r0, #19
  400c26:	e053      	b.n	400cd0 <_spi_m_sync_trans+0xf0>
		return false;
  400c28:	2300      	movs	r3, #0
  400c2a:	e035      	b.n	400c98 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  400c2c:	7850      	ldrb	r0, [r2, #1]
  400c2e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  400c32:	3202      	adds	r2, #2
  400c34:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  400c36:	3301      	adds	r3, #1
  400c38:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  400c3a:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  400c3c:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  400c40:	f240 2222 	movw	r2, #546	; 0x222
  400c44:	4924      	ldr	r1, [pc, #144]	; (400cd8 <_spi_m_sync_trans+0xf8>)
  400c46:	4630      	mov	r0, r6
  400c48:	4b24      	ldr	r3, [pc, #144]	; (400cdc <_spi_m_sync_trans+0xfc>)
  400c4a:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  400c4c:	f018 0f08 	tst.w	r8, #8
  400c50:	d038      	beq.n	400cc4 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  400c52:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  400c56:	2800      	cmp	r0, #0
  400c58:	db36      	blt.n	400cc8 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  400c5a:	9803      	ldr	r0, [sp, #12]
  400c5c:	68ab      	ldr	r3, [r5, #8]
  400c5e:	4298      	cmp	r0, r3
  400c60:	d302      	bcc.n	400c68 <_spi_m_sync_trans+0x88>
  400c62:	9a04      	ldr	r2, [sp, #16]
  400c64:	4293      	cmp	r3, r2
  400c66:	d92f      	bls.n	400cc8 <_spi_m_sync_trans+0xe8>
  400c68:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  400c6a:	f013 0f01 	tst.w	r3, #1
  400c6e:	d0db      	beq.n	400c28 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  400c70:	68a3      	ldr	r3, [r4, #8]
  400c72:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  400c74:	9a02      	ldr	r2, [sp, #8]
  400c76:	b15a      	cbz	r2, 400c90 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  400c78:	1c51      	adds	r1, r2, #1
  400c7a:	9102      	str	r1, [sp, #8]
  400c7c:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  400c7e:	f89d 2014 	ldrb.w	r2, [sp, #20]
  400c82:	2a01      	cmp	r2, #1
  400c84:	d904      	bls.n	400c90 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  400c86:	460a      	mov	r2, r1
  400c88:	3101      	adds	r1, #1
  400c8a:	9102      	str	r1, [sp, #8]
  400c8c:	0a1b      	lsrs	r3, r3, #8
  400c8e:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  400c90:	9b04      	ldr	r3, [sp, #16]
  400c92:	3301      	adds	r3, #1
  400c94:	9304      	str	r3, [sp, #16]
	return true;
  400c96:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  400c98:	2b00      	cmp	r3, #0
  400c9a:	d1cf      	bne.n	400c3c <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  400c9c:	9b03      	ldr	r3, [sp, #12]
  400c9e:	9a04      	ldr	r2, [sp, #16]
  400ca0:	429a      	cmp	r2, r3
  400ca2:	d3cb      	bcc.n	400c3c <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  400ca4:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  400ca6:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  400ca8:	f012 0f02 	tst.w	r2, #2
  400cac:	d0c6      	beq.n	400c3c <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  400cae:	9a01      	ldr	r2, [sp, #4]
  400cb0:	2a00      	cmp	r2, #0
  400cb2:	d0c0      	beq.n	400c36 <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  400cb4:	1c51      	adds	r1, r2, #1
  400cb6:	9101      	str	r1, [sp, #4]
  400cb8:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  400cba:	f89d 0014 	ldrb.w	r0, [sp, #20]
  400cbe:	2801      	cmp	r0, #1
  400cc0:	d8b4      	bhi.n	400c2c <_spi_m_sync_trans+0x4c>
  400cc2:	e7b8      	b.n	400c36 <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  400cc4:	2000      	movs	r0, #0
  400cc6:	e7c6      	b.n	400c56 <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  400cc8:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  400cca:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cce:	d0fb      	beq.n	400cc8 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  400cd0:	b006      	add	sp, #24
  400cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cd6:	bf00      	nop
  400cd8:	00401448 	.word	0x00401448
  400cdc:	004008d5 	.word	0x004008d5

00400ce0 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  400ce0:	2000      	movs	r0, #0
  400ce2:	4770      	bx	lr

00400ce4 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  400ce4:	4b03      	ldr	r3, [pc, #12]	; (400cf4 <_system_time_init+0x10>)
  400ce6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  400cea:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  400cec:	2205      	movs	r2, #5
  400cee:	601a      	str	r2, [r3, #0]
  400cf0:	4770      	bx	lr
  400cf2:	bf00      	nop
  400cf4:	e000e010 	.word	0xe000e010

00400cf8 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  400cf8:	b508      	push	{r3, lr}
	_system_time_init(hw);
  400cfa:	4b01      	ldr	r3, [pc, #4]	; (400d00 <_delay_init+0x8>)
  400cfc:	4798      	blx	r3
  400cfe:	bd08      	pop	{r3, pc}
  400d00:	00400ce5 	.word	0x00400ce5

00400d04 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  400d04:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  400d06:	e00d      	b.n	400d24 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  400d08:	4b0d      	ldr	r3, [pc, #52]	; (400d40 <_delay_cycles+0x3c>)
  400d0a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  400d0e:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  400d10:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  400d12:	4b0b      	ldr	r3, [pc, #44]	; (400d40 <_delay_cycles+0x3c>)
  400d14:	681b      	ldr	r3, [r3, #0]
  400d16:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400d1a:	d0fa      	beq.n	400d12 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  400d1c:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  400d20:	3101      	adds	r1, #1
	while (n--) {
  400d22:	4610      	mov	r0, r2
  400d24:	1e43      	subs	r3, r0, #1
  400d26:	b2da      	uxtb	r2, r3
  400d28:	2800      	cmp	r0, #0
  400d2a:	d1ed      	bne.n	400d08 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  400d2c:	4b04      	ldr	r3, [pc, #16]	; (400d40 <_delay_cycles+0x3c>)
  400d2e:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  400d30:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  400d32:	4b03      	ldr	r3, [pc, #12]	; (400d40 <_delay_cycles+0x3c>)
  400d34:	681b      	ldr	r3, [r3, #0]
  400d36:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400d3a:	d0fa      	beq.n	400d32 <_delay_cycles+0x2e>
		;
}
  400d3c:	4770      	bx	lr
  400d3e:	bf00      	nop
  400d40:	e000e010 	.word	0xe000e010

00400d44 <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  400d44:	b510      	push	{r4, lr}
	ASSERT(hw);
  400d46:	4604      	mov	r4, r0
  400d48:	f240 2219 	movw	r2, #537	; 0x219
  400d4c:	4912      	ldr	r1, [pc, #72]	; (400d98 <_uart_get_hardware_index+0x54>)
  400d4e:	3000      	adds	r0, #0
  400d50:	bf18      	it	ne
  400d52:	2001      	movne	r0, #1
  400d54:	4b11      	ldr	r3, [pc, #68]	; (400d9c <_uart_get_hardware_index+0x58>)
  400d56:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  400d58:	4b11      	ldr	r3, [pc, #68]	; (400da0 <_uart_get_hardware_index+0x5c>)
  400d5a:	429c      	cmp	r4, r3
  400d5c:	d013      	beq.n	400d86 <_uart_get_hardware_index+0x42>
		return 0;
	} else if (UART1 == hw) {
  400d5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400d62:	429c      	cmp	r4, r3
  400d64:	d011      	beq.n	400d8a <_uart_get_hardware_index+0x46>
		return 1;
	} else if (UART2 == hw) {
  400d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  400d6a:	429c      	cmp	r4, r3
  400d6c:	d00f      	beq.n	400d8e <_uart_get_hardware_index+0x4a>
		return 2;
	} else if (UART3 == hw) {
  400d6e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400d72:	429c      	cmp	r4, r3
  400d74:	d00d      	beq.n	400d92 <_uart_get_hardware_index+0x4e>
		return 3;
	} else if (UART4 == hw) {
  400d76:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400d7a:	429c      	cmp	r4, r3
  400d7c:	d001      	beq.n	400d82 <_uart_get_hardware_index+0x3e>
		return 4;
	} else {
		return ERR_INVALID_DATA;
  400d7e:	20ff      	movs	r0, #255	; 0xff
	}
}
  400d80:	bd10      	pop	{r4, pc}
		return 4;
  400d82:	2004      	movs	r0, #4
  400d84:	bd10      	pop	{r4, pc}
		return 0;
  400d86:	2000      	movs	r0, #0
  400d88:	bd10      	pop	{r4, pc}
		return 1;
  400d8a:	2001      	movs	r0, #1
  400d8c:	bd10      	pop	{r4, pc}
		return 2;
  400d8e:	2002      	movs	r0, #2
  400d90:	bd10      	pop	{r4, pc}
		return 3;
  400d92:	2003      	movs	r0, #3
  400d94:	bd10      	pop	{r4, pc}
  400d96:	bf00      	nop
  400d98:	0040146c 	.word	0x0040146c
  400d9c:	004008d5 	.word	0x004008d5
  400da0:	400e0800 	.word	0x400e0800

00400da4 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  400da4:	b510      	push	{r4, lr}
	ASSERT(hw);
  400da6:	4604      	mov	r4, r0
  400da8:	f44f 7227 	mov.w	r2, #668	; 0x29c
  400dac:	490e      	ldr	r1, [pc, #56]	; (400de8 <_get_uart_index+0x44>)
  400dae:	3000      	adds	r0, #0
  400db0:	bf18      	it	ne
  400db2:	2001      	movne	r0, #1
  400db4:	4b0d      	ldr	r3, [pc, #52]	; (400dec <_get_uart_index+0x48>)
  400db6:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  400db8:	4620      	mov	r0, r4
  400dba:	4b0d      	ldr	r3, [pc, #52]	; (400df0 <_get_uart_index+0x4c>)
  400dbc:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400dbe:	2300      	movs	r3, #0
  400dc0:	b143      	cbz	r3, 400dd4 <_get_uart_index+0x30>
		if (_uarts[i].number == uart_offset) {
			return i;
		}
	}

	ASSERT(false);
  400dc2:	f240 22a6 	movw	r2, #678	; 0x2a6
  400dc6:	4908      	ldr	r1, [pc, #32]	; (400de8 <_get_uart_index+0x44>)
  400dc8:	2000      	movs	r0, #0
  400dca:	4b08      	ldr	r3, [pc, #32]	; (400dec <_get_uart_index+0x48>)
  400dcc:	4798      	blx	r3
	return 0;
  400dce:	2300      	movs	r3, #0
}
  400dd0:	4618      	mov	r0, r3
  400dd2:	bd10      	pop	{r4, pc}
		if (_uarts[i].number == uart_offset) {
  400dd4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  400dd8:	008a      	lsls	r2, r1, #2
  400dda:	4906      	ldr	r1, [pc, #24]	; (400df4 <_get_uart_index+0x50>)
  400ddc:	5c8a      	ldrb	r2, [r1, r2]
  400dde:	4290      	cmp	r0, r2
  400de0:	d0f6      	beq.n	400dd0 <_get_uart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400de2:	3301      	adds	r3, #1
  400de4:	b2db      	uxtb	r3, r3
  400de6:	e7eb      	b.n	400dc0 <_get_uart_index+0x1c>
  400de8:	0040146c 	.word	0x0040146c
  400dec:	004008d5 	.word	0x004008d5
  400df0:	00400d45 	.word	0x00400d45
  400df4:	00401460 	.word	0x00401460

00400df8 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  400df8:	b510      	push	{r4, lr}
	ASSERT(hw);
  400dfa:	4604      	mov	r4, r0
  400dfc:	f240 22b3 	movw	r2, #691	; 0x2b3
  400e00:	490d      	ldr	r1, [pc, #52]	; (400e38 <_uart_init+0x40>)
  400e02:	3000      	adds	r0, #0
  400e04:	bf18      	it	ne
  400e06:	2001      	movne	r0, #1
  400e08:	4b0c      	ldr	r3, [pc, #48]	; (400e3c <_uart_init+0x44>)
  400e0a:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  400e0c:	4620      	mov	r0, r4
  400e0e:	4b0c      	ldr	r3, [pc, #48]	; (400e40 <_uart_init+0x48>)
  400e10:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  400e12:	4b0c      	ldr	r3, [pc, #48]	; (400e44 <_uart_init+0x4c>)
  400e14:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  400e18:	23ac      	movs	r3, #172	; 0xac
  400e1a:	6023      	str	r3, [r4, #0]
  400e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
  400e20:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  400e22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400e26:	0082      	lsls	r2, r0, #2
  400e28:	4b07      	ldr	r3, [pc, #28]	; (400e48 <_uart_init+0x50>)
  400e2a:	4413      	add	r3, r2
  400e2c:	685b      	ldr	r3, [r3, #4]
	((Uart *)hw)->UART_MR = data;
  400e2e:	6063      	str	r3, [r4, #4]
	((Uart *)hw)->UART_BRGR = data;
  400e30:	23f4      	movs	r3, #244	; 0xf4
  400e32:	6223      	str	r3, [r4, #32]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);

	return ERR_NONE;
}
  400e34:	2000      	movs	r0, #0
  400e36:	bd10      	pop	{r4, pc}
  400e38:	0040146c 	.word	0x0040146c
  400e3c:	004008d5 	.word	0x004008d5
  400e40:	00400da5 	.word	0x00400da5
  400e44:	55415200 	.word	0x55415200
  400e48:	00401460 	.word	0x00401460

00400e4c <_usart_sync_init>:
{
  400e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e4e:	460c      	mov	r4, r1
	ASSERT(device);
  400e50:	4e09      	ldr	r6, [pc, #36]	; (400e78 <_usart_sync_init+0x2c>)
  400e52:	4607      	mov	r7, r0
  400e54:	22a9      	movs	r2, #169	; 0xa9
  400e56:	4631      	mov	r1, r6
  400e58:	3000      	adds	r0, #0
  400e5a:	bf18      	it	ne
  400e5c:	2001      	movne	r0, #1
  400e5e:	4d07      	ldr	r5, [pc, #28]	; (400e7c <_usart_sync_init+0x30>)
  400e60:	47a8      	blx	r5
	ASSERT(hw);
  400e62:	22aa      	movs	r2, #170	; 0xaa
  400e64:	4631      	mov	r1, r6
  400e66:	1c20      	adds	r0, r4, #0
  400e68:	bf18      	it	ne
  400e6a:	2001      	movne	r0, #1
  400e6c:	47a8      	blx	r5
	device->hw = hw;
  400e6e:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  400e70:	4620      	mov	r0, r4
  400e72:	4b03      	ldr	r3, [pc, #12]	; (400e80 <_usart_sync_init+0x34>)
  400e74:	4798      	blx	r3
}
  400e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e78:	0040146c 	.word	0x0040146c
  400e7c:	004008d5 	.word	0x004008d5
  400e80:	00400df9 	.word	0x00400df9

00400e84 <_usart_sync_enable>:
{
  400e84:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  400e86:	4e0a      	ldr	r6, [pc, #40]	; (400eb0 <_usart_sync_enable+0x2c>)
  400e88:	4604      	mov	r4, r0
  400e8a:	22f2      	movs	r2, #242	; 0xf2
  400e8c:	4631      	mov	r1, r6
  400e8e:	3000      	adds	r0, #0
  400e90:	bf18      	it	ne
  400e92:	2001      	movne	r0, #1
  400e94:	4d07      	ldr	r5, [pc, #28]	; (400eb4 <_usart_sync_enable+0x30>)
  400e96:	47a8      	blx	r5
	_uart_enable(device->hw);
  400e98:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _uart_enable(void *const hw)
{
	ASSERT(hw);
  400e9a:	f240 22d7 	movw	r2, #727	; 0x2d7
  400e9e:	4631      	mov	r1, r6
  400ea0:	1c20      	adds	r0, r4, #0
  400ea2:	bf18      	it	ne
  400ea4:	2001      	movne	r0, #1
  400ea6:	47a8      	blx	r5
	((Uart *)hw)->UART_CR = data;
  400ea8:	2350      	movs	r3, #80	; 0x50
  400eaa:	6023      	str	r3, [r4, #0]
  400eac:	bd70      	pop	{r4, r5, r6, pc}
  400eae:	bf00      	nop
  400eb0:	0040146c 	.word	0x0040146c
  400eb4:	004008d5 	.word	0x004008d5

00400eb8 <_usart_sync_write_byte>:
{
  400eb8:	b538      	push	{r3, r4, r5, lr}
  400eba:	460c      	mov	r4, r1
	ASSERT(device);
  400ebc:	4605      	mov	r5, r0
  400ebe:	f240 1295 	movw	r2, #405	; 0x195
  400ec2:	4904      	ldr	r1, [pc, #16]	; (400ed4 <_usart_sync_write_byte+0x1c>)
  400ec4:	3000      	adds	r0, #0
  400ec6:	bf18      	it	ne
  400ec8:	2001      	movne	r0, #1
  400eca:	4b03      	ldr	r3, [pc, #12]	; (400ed8 <_usart_sync_write_byte+0x20>)
  400ecc:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  400ece:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  400ed0:	61dc      	str	r4, [r3, #28]
  400ed2:	bd38      	pop	{r3, r4, r5, pc}
  400ed4:	0040146c 	.word	0x0040146c
  400ed8:	004008d5 	.word	0x004008d5

00400edc <_usart_sync_read_byte>:
{
  400edc:	b510      	push	{r4, lr}
	ASSERT(device);
  400ede:	4604      	mov	r4, r0
  400ee0:	f240 12a7 	movw	r2, #423	; 0x1a7
  400ee4:	4904      	ldr	r1, [pc, #16]	; (400ef8 <_usart_sync_read_byte+0x1c>)
  400ee6:	3000      	adds	r0, #0
  400ee8:	bf18      	it	ne
  400eea:	2001      	movne	r0, #1
  400eec:	4b03      	ldr	r3, [pc, #12]	; (400efc <_usart_sync_read_byte+0x20>)
  400eee:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  400ef0:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  400ef2:	6998      	ldr	r0, [r3, #24]
}
  400ef4:	b2c0      	uxtb	r0, r0
  400ef6:	bd10      	pop	{r4, pc}
  400ef8:	0040146c 	.word	0x0040146c
  400efc:	004008d5 	.word	0x004008d5

00400f00 <_usart_sync_is_ready_to_send>:
{
  400f00:	b510      	push	{r4, lr}
	ASSERT(device);
  400f02:	4604      	mov	r4, r0
  400f04:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  400f08:	4905      	ldr	r1, [pc, #20]	; (400f20 <_usart_sync_is_ready_to_send+0x20>)
  400f0a:	3000      	adds	r0, #0
  400f0c:	bf18      	it	ne
  400f0e:	2001      	movne	r0, #1
  400f10:	4b04      	ldr	r3, [pc, #16]	; (400f24 <_usart_sync_is_ready_to_send+0x24>)
  400f12:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  400f14:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  400f16:	6958      	ldr	r0, [r3, #20]
}
  400f18:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400f1c:	bd10      	pop	{r4, pc}
  400f1e:	bf00      	nop
  400f20:	0040146c 	.word	0x0040146c
  400f24:	004008d5 	.word	0x004008d5

00400f28 <_usart_sync_is_transmit_done>:
{
  400f28:	b510      	push	{r4, lr}
	ASSERT(device);
  400f2a:	4604      	mov	r4, r0
  400f2c:	f240 12b9 	movw	r2, #441	; 0x1b9
  400f30:	4905      	ldr	r1, [pc, #20]	; (400f48 <_usart_sync_is_transmit_done+0x20>)
  400f32:	3000      	adds	r0, #0
  400f34:	bf18      	it	ne
  400f36:	2001      	movne	r0, #1
  400f38:	4b04      	ldr	r3, [pc, #16]	; (400f4c <_usart_sync_is_transmit_done+0x24>)
  400f3a:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  400f3c:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  400f3e:	6958      	ldr	r0, [r3, #20]
}
  400f40:	f3c0 2040 	ubfx	r0, r0, #9, #1
  400f44:	bd10      	pop	{r4, pc}
  400f46:	bf00      	nop
  400f48:	0040146c 	.word	0x0040146c
  400f4c:	004008d5 	.word	0x004008d5

00400f50 <_usart_sync_is_byte_received>:
{
  400f50:	b510      	push	{r4, lr}
	ASSERT(device);
  400f52:	4604      	mov	r4, r0
  400f54:	f240 12cb 	movw	r2, #459	; 0x1cb
  400f58:	4905      	ldr	r1, [pc, #20]	; (400f70 <_usart_sync_is_byte_received+0x20>)
  400f5a:	3000      	adds	r0, #0
  400f5c:	bf18      	it	ne
  400f5e:	2001      	movne	r0, #1
  400f60:	4b04      	ldr	r3, [pc, #16]	; (400f74 <_usart_sync_is_byte_received+0x24>)
  400f62:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  400f64:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  400f66:	6958      	ldr	r0, [r3, #20]
  400f68:	f000 0001 	and.w	r0, r0, #1
}
  400f6c:	bd10      	pop	{r4, pc}
  400f6e:	bf00      	nop
  400f70:	0040146c 	.word	0x0040146c
  400f74:	004008d5 	.word	0x004008d5

00400f78 <_uart_get_usart_sync>:
}
  400f78:	2000      	movs	r0, #0
  400f7a:	4770      	bx	lr

00400f7c <isoSpi_send>:
 * \param[in] transfer_data Pointer to uint8_t array containing the data to send
 * \param[in] size 	 Number of bytes to send and read. 
 * \param[out] receive_data  Pointer for output data using uint8_t data
 * @returns 0 if fine, -1 if wrong PEC
 */
void isoSpi_send(uint8_t *transfer_data, int size){
  400f7c:	b530      	push	{r4, r5, lr}
  400f7e:	b083      	sub	sp, #12
  400f80:	4604      	mov	r4, r0
  400f82:	460d      	mov	r5, r1
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_1, &io);
  400f84:	a901      	add	r1, sp, #4
  400f86:	4805      	ldr	r0, [pc, #20]	; (400f9c <isoSpi_send+0x20>)
  400f88:	4b05      	ldr	r3, [pc, #20]	; (400fa0 <isoSpi_send+0x24>)
  400f8a:	4798      	blx	r3
	io_write(io, transfer_data, size);
  400f8c:	b2aa      	uxth	r2, r5
  400f8e:	4621      	mov	r1, r4
  400f90:	9801      	ldr	r0, [sp, #4]
  400f92:	4b04      	ldr	r3, [pc, #16]	; (400fa4 <isoSpi_send+0x28>)
  400f94:	4798      	blx	r3
}
  400f96:	b003      	add	sp, #12
  400f98:	bd30      	pop	{r4, r5, pc}
  400f9a:	bf00      	nop
  400f9c:	20400090 	.word	0x20400090
  400fa0:	0040073d 	.word	0x0040073d
  400fa4:	00400539 	.word	0x00400539

00400fa8 <isoSpi_receive>:

void isoSpi_receive(uint8_t *receive_data, int num_bytes){
  400fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400faa:	b085      	sub	sp, #20
  400fac:	4607      	mov	r7, r0
  400fae:	460d      	mov	r5, r1
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_1, &io);
  400fb0:	4c0e      	ldr	r4, [pc, #56]	; (400fec <isoSpi_receive+0x44>)
  400fb2:	a903      	add	r1, sp, #12
  400fb4:	4620      	mov	r0, r4
  400fb6:	4b0e      	ldr	r3, [pc, #56]	; (400ff0 <isoSpi_receive+0x48>)
  400fb8:	4798      	blx	r3
	spi_m_sync_enable(&SPI_1);
  400fba:	4620      	mov	r0, r4
  400fbc:	4b0d      	ldr	r3, [pc, #52]	; (400ff4 <isoSpi_receive+0x4c>)
  400fbe:	4798      	blx	r3

	uint8_t* nothing = malloc(num_bytes);
  400fc0:	4628      	mov	r0, r5
  400fc2:	4b0d      	ldr	r3, [pc, #52]	; (400ff8 <isoSpi_receive+0x50>)
  400fc4:	4798      	blx	r3
  400fc6:	4606      	mov	r6, r0
	memset(nothing, 0xFF, num_bytes);
  400fc8:	462a      	mov	r2, r5
  400fca:	21ff      	movs	r1, #255	; 0xff
  400fcc:	4b0b      	ldr	r3, [pc, #44]	; (400ffc <isoSpi_receive+0x54>)
  400fce:	4798      	blx	r3

	struct spi_xfer spi_transmit_buffer;
	spi_transmit_buffer.size  = num_bytes;
  400fd0:	9502      	str	r5, [sp, #8]
	spi_transmit_buffer.rxbuf = receive_data;
  400fd2:	9701      	str	r7, [sp, #4]
	spi_transmit_buffer.txbuf = nothing;
  400fd4:	a904      	add	r1, sp, #16
  400fd6:	f841 6d10 	str.w	r6, [r1, #-16]!

	spi_m_sync_transfer(&SPI_1, &spi_transmit_buffer);
  400fda:	4620      	mov	r0, r4
  400fdc:	4b08      	ldr	r3, [pc, #32]	; (401000 <isoSpi_receive+0x58>)
  400fde:	4798      	blx	r3
	
	free(nothing);
  400fe0:	4630      	mov	r0, r6
  400fe2:	4b08      	ldr	r3, [pc, #32]	; (401004 <isoSpi_receive+0x5c>)
  400fe4:	4798      	blx	r3
	
}
  400fe6:	b005      	add	sp, #20
  400fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400fea:	bf00      	nop
  400fec:	20400090 	.word	0x20400090
  400ff0:	0040073d 	.word	0x0040073d
  400ff4:	004005d9 	.word	0x004005d9
  400ff8:	00401225 	.word	0x00401225
  400ffc:	0040125b 	.word	0x0040125b
  401000:	00400685 	.word	0x00400685
  401004:	00401235 	.word	0x00401235

00401008 <PEC_calculate>:
 * \brief Transmit and receive data from LTC6811. PEC is verified
 * \param[in] data Pointer to char array containing PEC
 * \param[in] len  Number of bytes in the PEC
 * @returns the 2 PEC bytes
 */
uint16_t PEC_calculate(uint8_t *data , int len){
  401008:	b430      	push	{r4, r5}
	
    unsigned int remainder, address;
    remainder = 16;/*PEC seed*/
    int i;
    for (i = 0; i < len; i++){
  40100a:	2200      	movs	r2, #0
    remainder = 16;/*PEC seed*/
  40100c:	2410      	movs	r4, #16
    for (i = 0; i < len; i++){
  40100e:	e009      	b.n	401024 <PEC_calculate+0x1c>
        address = ((remainder >> 7) ^ data[i]) & 0xff;/*calculate PEC table address*/
  401010:	5c83      	ldrb	r3, [r0, r2]
  401012:	ea83 13d4 	eor.w	r3, r3, r4, lsr #7
  401016:	b2db      	uxtb	r3, r3
         remainder = (remainder << 8 ) ^ crc15Table[address];  //lookup table
  401018:	4d05      	ldr	r5, [pc, #20]	; (401030 <PEC_calculate+0x28>)
  40101a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
  40101e:	ea83 2404 	eor.w	r4, r3, r4, lsl #8
    for (i = 0; i < len; i++){
  401022:	3201      	adds	r2, #1
  401024:	428a      	cmp	r2, r1
  401026:	dbf3      	blt.n	401010 <PEC_calculate+0x8>
		//remainder = (remainder << 8 ) ^ pec15Table[address]; //values calculated
    }
    return(remainder*2);/*The CRC15 has a 0 in the LSB so the final value must be multiplied by 2*/
  401028:	0060      	lsls	r0, r4, #1
  40102a:	b280      	uxth	r0, r0
}
  40102c:	bc30      	pop	{r4, r5}
  40102e:	4770      	bx	lr
  401030:	00401484 	.word	0x00401484

00401034 <bms_send_command>:
{
  401034:	b510      	push	{r4, lr}
  401036:	b082      	sub	sp, #8
  401038:	460c      	mov	r4, r1
    message[0] = command >> 8;
  40103a:	0a03      	lsrs	r3, r0, #8
  40103c:	f88d 3004 	strb.w	r3, [sp, #4]
	message[1] = command & 0xFF;
  401040:	f88d 0005 	strb.w	r0, [sp, #5]
    PEC = PEC_calculate(message, 2);
  401044:	2102      	movs	r1, #2
  401046:	a801      	add	r0, sp, #4
  401048:	4b0a      	ldr	r3, [pc, #40]	; (401074 <bms_send_command+0x40>)
  40104a:	4798      	blx	r3
    message[2] = PEC >> 8;
  40104c:	0a03      	lsrs	r3, r0, #8
  40104e:	f88d 3006 	strb.w	r3, [sp, #6]
    message[3] = PEC & 0xFF;
  401052:	f88d 0007 	strb.w	r0, [sp, #7]
	if(chip_select)
  401056:	b93c      	cbnz	r4, 401068 <bms_send_command+0x34>
    isoSpi_send(message, 4);
  401058:	2104      	movs	r1, #4
  40105a:	eb0d 0001 	add.w	r0, sp, r1
  40105e:	4b06      	ldr	r3, [pc, #24]	; (401078 <bms_send_command+0x44>)
  401060:	4798      	blx	r3
	if(chip_select)
  401062:	b924      	cbnz	r4, 40106e <bms_send_command+0x3a>
}
  401064:	b002      	add	sp, #8
  401066:	bd10      	pop	{r4, pc}
		bms_enable_cs();
  401068:	4b04      	ldr	r3, [pc, #16]	; (40107c <bms_send_command+0x48>)
  40106a:	4798      	blx	r3
  40106c:	e7f4      	b.n	401058 <bms_send_command+0x24>
		bms_disable_cs();
  40106e:	4b04      	ldr	r3, [pc, #16]	; (401080 <bms_send_command+0x4c>)
  401070:	4798      	blx	r3
}
  401072:	e7f7      	b.n	401064 <bms_send_command+0x30>
  401074:	00401009 	.word	0x00401009
  401078:	00400f7d 	.word	0x00400f7d
  40107c:	004002b1 	.word	0x004002b1
  401080:	004002cd 	.word	0x004002cd

00401084 <read_data_from_ltc6811>:
{
  401084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401088:	4681      	mov	r9, r0
  40108a:	4688      	mov	r8, r1
  40108c:	4616      	mov	r6, r2
  40108e:	461f      	mov	r7, r3
	uint8_t* receive_value_pec = malloc(num_bytes + 2);
  401090:	1c95      	adds	r5, r2, #2
  401092:	4628      	mov	r0, r5
  401094:	4b10      	ldr	r3, [pc, #64]	; (4010d8 <read_data_from_ltc6811+0x54>)
  401096:	4798      	blx	r3
  401098:	4604      	mov	r4, r0
	memset(receive_value_pec, 0, num_bytes + 2);
  40109a:	462a      	mov	r2, r5
  40109c:	2100      	movs	r1, #0
  40109e:	4b0f      	ldr	r3, [pc, #60]	; (4010dc <read_data_from_ltc6811+0x58>)
  4010a0:	4798      	blx	r3
	if(chip_select)
  4010a2:	b997      	cbnz	r7, 4010ca <read_data_from_ltc6811+0x46>
	bms_send_command(command, false);
  4010a4:	2100      	movs	r1, #0
  4010a6:	4648      	mov	r0, r9
  4010a8:	4b0d      	ldr	r3, [pc, #52]	; (4010e0 <read_data_from_ltc6811+0x5c>)
  4010aa:	4798      	blx	r3
	isoSpi_receive(receive_value_pec, num_bytes+2);
  4010ac:	4629      	mov	r1, r5
  4010ae:	4620      	mov	r0, r4
  4010b0:	4b0c      	ldr	r3, [pc, #48]	; (4010e4 <read_data_from_ltc6811+0x60>)
  4010b2:	4798      	blx	r3
	if(chip_select)
  4010b4:	b967      	cbnz	r7, 4010d0 <read_data_from_ltc6811+0x4c>
	memcpy(receive_values, receive_value_pec, num_bytes);
  4010b6:	4632      	mov	r2, r6
  4010b8:	4621      	mov	r1, r4
  4010ba:	4640      	mov	r0, r8
  4010bc:	4b0a      	ldr	r3, [pc, #40]	; (4010e8 <read_data_from_ltc6811+0x64>)
  4010be:	4798      	blx	r3
	free(receive_value_pec);
  4010c0:	4620      	mov	r0, r4
  4010c2:	4b0a      	ldr	r3, [pc, #40]	; (4010ec <read_data_from_ltc6811+0x68>)
  4010c4:	4798      	blx	r3
  4010c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		bms_enable_cs();
  4010ca:	4b09      	ldr	r3, [pc, #36]	; (4010f0 <read_data_from_ltc6811+0x6c>)
  4010cc:	4798      	blx	r3
  4010ce:	e7e9      	b.n	4010a4 <read_data_from_ltc6811+0x20>
		bms_disable_cs();
  4010d0:	4b08      	ldr	r3, [pc, #32]	; (4010f4 <read_data_from_ltc6811+0x70>)
  4010d2:	4798      	blx	r3
  4010d4:	e7ef      	b.n	4010b6 <read_data_from_ltc6811+0x32>
  4010d6:	bf00      	nop
  4010d8:	00401225 	.word	0x00401225
  4010dc:	0040125b 	.word	0x0040125b
  4010e0:	00401035 	.word	0x00401035
  4010e4:	00400fa9 	.word	0x00400fa9
  4010e8:	00401245 	.word	0x00401245
  4010ec:	00401235 	.word	0x00401235
  4010f0:	004002b1 	.word	0x004002b1
  4010f4:	004002cd 	.word	0x004002cd

004010f8 <print_uart>:
 * \brief Print chars on ser port through uart
 * \param[in] string Pointer to char array
 * \param[in] len 	 Length of char array
 */
void print_uart(uint8_t* string, int len)
{
  4010f8:	b570      	push	{r4, r5, r6, lr}
  4010fa:	b082      	sub	sp, #8
  4010fc:	4605      	mov	r5, r0
  4010fe:	460e      	mov	r6, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&USART_1, &io);
  401100:	4c07      	ldr	r4, [pc, #28]	; (401120 <print_uart+0x28>)
  401102:	a901      	add	r1, sp, #4
  401104:	4620      	mov	r0, r4
  401106:	4b07      	ldr	r3, [pc, #28]	; (401124 <print_uart+0x2c>)
  401108:	4798      	blx	r3
	usart_sync_enable(&USART_1);
  40110a:	4620      	mov	r0, r4
  40110c:	4b06      	ldr	r3, [pc, #24]	; (401128 <print_uart+0x30>)
  40110e:	4798      	blx	r3

	io_write(io, string, len);
  401110:	b2b2      	uxth	r2, r6
  401112:	4629      	mov	r1, r5
  401114:	9801      	ldr	r0, [sp, #4]
  401116:	4b05      	ldr	r3, [pc, #20]	; (40112c <print_uart+0x34>)
  401118:	4798      	blx	r3
}
  40111a:	b002      	add	sp, #8
  40111c:	bd70      	pop	{r4, r5, r6, pc}
  40111e:	bf00      	nop
  401120:	204000a8 	.word	0x204000a8
  401124:	004008ad 	.word	0x004008ad
  401128:	00400881 	.word	0x00400881
  40112c:	00400539 	.word	0x00400539

00401130 <main>:
{
  401130:	b530      	push	{r4, r5, lr}
  401132:	b089      	sub	sp, #36	; 0x24
	atmel_start_init();
  401134:	4b1f      	ldr	r3, [pc, #124]	; (4011b4 <main+0x84>)
  401136:	4798      	blx	r3
	spi_m_sync_enable(&SPI_1);
  401138:	4c1f      	ldr	r4, [pc, #124]	; (4011b8 <main+0x88>)
  40113a:	4620      	mov	r0, r4
  40113c:	4b1f      	ldr	r3, [pc, #124]	; (4011bc <main+0x8c>)
  40113e:	4798      	blx	r3
	spi_m_sync_set_data_order(&SPI_1, SPI_DATA_ORDER_MSB_1ST);
  401140:	2100      	movs	r1, #0
  401142:	4620      	mov	r0, r4
  401144:	4b1e      	ldr	r3, [pc, #120]	; (4011c0 <main+0x90>)
  401146:	4798      	blx	r3
	spi_m_sync_set_char_size( &SPI_1, SPI_CHAR_SIZE_8); 
  401148:	2100      	movs	r1, #0
  40114a:	4620      	mov	r0, r4
  40114c:	4b1d      	ldr	r3, [pc, #116]	; (4011c4 <main+0x94>)
  40114e:	4798      	blx	r3
	spi_m_sync_set_baudrate(  &SPI_1, 100000); //max frequency of the LTC6820 is 1MHz.... Should use like 900KHz because of reasons
  401150:	491d      	ldr	r1, [pc, #116]	; (4011c8 <main+0x98>)
  401152:	4620      	mov	r0, r4
  401154:	4b1d      	ldr	r3, [pc, #116]	; (4011cc <main+0x9c>)
  401156:	4798      	blx	r3
	uint16_t voltage_buffer[12]={0};
  401158:	2300      	movs	r3, #0
  40115a:	9302      	str	r3, [sp, #8]
  40115c:	9303      	str	r3, [sp, #12]
  40115e:	9304      	str	r3, [sp, #16]
  401160:	9305      	str	r3, [sp, #20]
  401162:	9306      	str	r3, [sp, #24]
  401164:	9307      	str	r3, [sp, #28]
	uint16_t delimiter = 0xAAAA;
  401166:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
  40116a:	f8ad 3004 	strh.w	r3, [sp, #4]
  40116e:	e019      	b.n	4011a4 <main+0x74>
			hc = voltage_buffer[i]>>8;
  401170:	ab08      	add	r3, sp, #32
  401172:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  401176:	f833 3c18 	ldrh.w	r3, [r3, #-24]
  40117a:	0a1a      	lsrs	r2, r3, #8
  40117c:	f88d 2007 	strb.w	r2, [sp, #7]
			lc = voltage_buffer[i]&0xFF;
  401180:	f88d 3006 	strb.w	r3, [sp, #6]
			print_uart(&hc, 1);
  401184:	2101      	movs	r1, #1
  401186:	f10d 0007 	add.w	r0, sp, #7
  40118a:	4d11      	ldr	r5, [pc, #68]	; (4011d0 <main+0xa0>)
  40118c:	47a8      	blx	r5
			print_uart(&lc, 1);
  40118e:	2101      	movs	r1, #1
  401190:	f10d 0006 	add.w	r0, sp, #6
  401194:	47a8      	blx	r5
		for(int i = 0; i < 12; i++){
  401196:	3401      	adds	r4, #1
  401198:	2c0b      	cmp	r4, #11
  40119a:	dde9      	ble.n	401170 <main+0x40>
		print_uart((uint8_t*)&delimiter, 2);
  40119c:	2102      	movs	r1, #2
  40119e:	a801      	add	r0, sp, #4
  4011a0:	4b0b      	ldr	r3, [pc, #44]	; (4011d0 <main+0xa0>)
  4011a2:	4798      	blx	r3
		wake_up_ltc();
  4011a4:	4b0b      	ldr	r3, [pc, #44]	; (4011d4 <main+0xa4>)
  4011a6:	4798      	blx	r3
		bms_read_cell_voltages(voltage_buffer);
  4011a8:	a802      	add	r0, sp, #8
  4011aa:	4b0b      	ldr	r3, [pc, #44]	; (4011d8 <main+0xa8>)
  4011ac:	4798      	blx	r3
		for(int i = 0; i < 12; i++){
  4011ae:	2400      	movs	r4, #0
  4011b0:	e7f2      	b.n	401198 <main+0x68>
  4011b2:	bf00      	nop
  4011b4:	004001d5 	.word	0x004001d5
  4011b8:	20400090 	.word	0x20400090
  4011bc:	004005d9 	.word	0x004005d9
  4011c0:	00400659 	.word	0x00400659
  4011c4:	0040062d 	.word	0x0040062d
  4011c8:	000186a0 	.word	0x000186a0
  4011cc:	00400601 	.word	0x00400601
  4011d0:	004010f9 	.word	0x004010f9
  4011d4:	004002dd 	.word	0x004002dd
  4011d8:	004001e1 	.word	0x004001e1

004011dc <__libc_init_array>:
  4011dc:	b570      	push	{r4, r5, r6, lr}
  4011de:	4e0d      	ldr	r6, [pc, #52]	; (401214 <__libc_init_array+0x38>)
  4011e0:	4c0d      	ldr	r4, [pc, #52]	; (401218 <__libc_init_array+0x3c>)
  4011e2:	1ba4      	subs	r4, r4, r6
  4011e4:	10a4      	asrs	r4, r4, #2
  4011e6:	2500      	movs	r5, #0
  4011e8:	42a5      	cmp	r5, r4
  4011ea:	d109      	bne.n	401200 <__libc_init_array+0x24>
  4011ec:	4e0b      	ldr	r6, [pc, #44]	; (40121c <__libc_init_array+0x40>)
  4011ee:	4c0c      	ldr	r4, [pc, #48]	; (401220 <__libc_init_array+0x44>)
  4011f0:	f000 fb78 	bl	4018e4 <_init>
  4011f4:	1ba4      	subs	r4, r4, r6
  4011f6:	10a4      	asrs	r4, r4, #2
  4011f8:	2500      	movs	r5, #0
  4011fa:	42a5      	cmp	r5, r4
  4011fc:	d105      	bne.n	40120a <__libc_init_array+0x2e>
  4011fe:	bd70      	pop	{r4, r5, r6, pc}
  401200:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401204:	4798      	blx	r3
  401206:	3501      	adds	r5, #1
  401208:	e7ee      	b.n	4011e8 <__libc_init_array+0xc>
  40120a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40120e:	4798      	blx	r3
  401210:	3501      	adds	r5, #1
  401212:	e7f2      	b.n	4011fa <__libc_init_array+0x1e>
  401214:	004018f0 	.word	0x004018f0
  401218:	004018f0 	.word	0x004018f0
  40121c:	004018f0 	.word	0x004018f0
  401220:	004018f4 	.word	0x004018f4

00401224 <malloc>:
  401224:	4b02      	ldr	r3, [pc, #8]	; (401230 <malloc+0xc>)
  401226:	4601      	mov	r1, r0
  401228:	6818      	ldr	r0, [r3, #0]
  40122a:	f000 b86d 	b.w	401308 <_malloc_r>
  40122e:	bf00      	nop
  401230:	20400000 	.word	0x20400000

00401234 <free>:
  401234:	4b02      	ldr	r3, [pc, #8]	; (401240 <free+0xc>)
  401236:	4601      	mov	r1, r0
  401238:	6818      	ldr	r0, [r3, #0]
  40123a:	f000 b817 	b.w	40126c <_free_r>
  40123e:	bf00      	nop
  401240:	20400000 	.word	0x20400000

00401244 <memcpy>:
  401244:	b510      	push	{r4, lr}
  401246:	1e43      	subs	r3, r0, #1
  401248:	440a      	add	r2, r1
  40124a:	4291      	cmp	r1, r2
  40124c:	d100      	bne.n	401250 <memcpy+0xc>
  40124e:	bd10      	pop	{r4, pc}
  401250:	f811 4b01 	ldrb.w	r4, [r1], #1
  401254:	f803 4f01 	strb.w	r4, [r3, #1]!
  401258:	e7f7      	b.n	40124a <memcpy+0x6>

0040125a <memset>:
  40125a:	4402      	add	r2, r0
  40125c:	4603      	mov	r3, r0
  40125e:	4293      	cmp	r3, r2
  401260:	d100      	bne.n	401264 <memset+0xa>
  401262:	4770      	bx	lr
  401264:	f803 1b01 	strb.w	r1, [r3], #1
  401268:	e7f9      	b.n	40125e <memset+0x4>
	...

0040126c <_free_r>:
  40126c:	b538      	push	{r3, r4, r5, lr}
  40126e:	4605      	mov	r5, r0
  401270:	2900      	cmp	r1, #0
  401272:	d045      	beq.n	401300 <_free_r+0x94>
  401274:	f851 3c04 	ldr.w	r3, [r1, #-4]
  401278:	1f0c      	subs	r4, r1, #4
  40127a:	2b00      	cmp	r3, #0
  40127c:	bfb8      	it	lt
  40127e:	18e4      	addlt	r4, r4, r3
  401280:	f000 f8b0 	bl	4013e4 <__malloc_lock>
  401284:	4a1f      	ldr	r2, [pc, #124]	; (401304 <_free_r+0x98>)
  401286:	6813      	ldr	r3, [r2, #0]
  401288:	4610      	mov	r0, r2
  40128a:	b933      	cbnz	r3, 40129a <_free_r+0x2e>
  40128c:	6063      	str	r3, [r4, #4]
  40128e:	6014      	str	r4, [r2, #0]
  401290:	4628      	mov	r0, r5
  401292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401296:	f000 b8a6 	b.w	4013e6 <__malloc_unlock>
  40129a:	42a3      	cmp	r3, r4
  40129c:	d90c      	bls.n	4012b8 <_free_r+0x4c>
  40129e:	6821      	ldr	r1, [r4, #0]
  4012a0:	1862      	adds	r2, r4, r1
  4012a2:	4293      	cmp	r3, r2
  4012a4:	bf04      	itt	eq
  4012a6:	681a      	ldreq	r2, [r3, #0]
  4012a8:	685b      	ldreq	r3, [r3, #4]
  4012aa:	6063      	str	r3, [r4, #4]
  4012ac:	bf04      	itt	eq
  4012ae:	1852      	addeq	r2, r2, r1
  4012b0:	6022      	streq	r2, [r4, #0]
  4012b2:	6004      	str	r4, [r0, #0]
  4012b4:	e7ec      	b.n	401290 <_free_r+0x24>
  4012b6:	4613      	mov	r3, r2
  4012b8:	685a      	ldr	r2, [r3, #4]
  4012ba:	b10a      	cbz	r2, 4012c0 <_free_r+0x54>
  4012bc:	42a2      	cmp	r2, r4
  4012be:	d9fa      	bls.n	4012b6 <_free_r+0x4a>
  4012c0:	6819      	ldr	r1, [r3, #0]
  4012c2:	1858      	adds	r0, r3, r1
  4012c4:	42a0      	cmp	r0, r4
  4012c6:	d10b      	bne.n	4012e0 <_free_r+0x74>
  4012c8:	6820      	ldr	r0, [r4, #0]
  4012ca:	4401      	add	r1, r0
  4012cc:	1858      	adds	r0, r3, r1
  4012ce:	4282      	cmp	r2, r0
  4012d0:	6019      	str	r1, [r3, #0]
  4012d2:	d1dd      	bne.n	401290 <_free_r+0x24>
  4012d4:	6810      	ldr	r0, [r2, #0]
  4012d6:	6852      	ldr	r2, [r2, #4]
  4012d8:	605a      	str	r2, [r3, #4]
  4012da:	4401      	add	r1, r0
  4012dc:	6019      	str	r1, [r3, #0]
  4012de:	e7d7      	b.n	401290 <_free_r+0x24>
  4012e0:	d902      	bls.n	4012e8 <_free_r+0x7c>
  4012e2:	230c      	movs	r3, #12
  4012e4:	602b      	str	r3, [r5, #0]
  4012e6:	e7d3      	b.n	401290 <_free_r+0x24>
  4012e8:	6820      	ldr	r0, [r4, #0]
  4012ea:	1821      	adds	r1, r4, r0
  4012ec:	428a      	cmp	r2, r1
  4012ee:	bf04      	itt	eq
  4012f0:	6811      	ldreq	r1, [r2, #0]
  4012f2:	6852      	ldreq	r2, [r2, #4]
  4012f4:	6062      	str	r2, [r4, #4]
  4012f6:	bf04      	itt	eq
  4012f8:	1809      	addeq	r1, r1, r0
  4012fa:	6021      	streq	r1, [r4, #0]
  4012fc:	605c      	str	r4, [r3, #4]
  4012fe:	e7c7      	b.n	401290 <_free_r+0x24>
  401300:	bd38      	pop	{r3, r4, r5, pc}
  401302:	bf00      	nop
  401304:	20400088 	.word	0x20400088

00401308 <_malloc_r>:
  401308:	b570      	push	{r4, r5, r6, lr}
  40130a:	1ccd      	adds	r5, r1, #3
  40130c:	f025 0503 	bic.w	r5, r5, #3
  401310:	3508      	adds	r5, #8
  401312:	2d0c      	cmp	r5, #12
  401314:	bf38      	it	cc
  401316:	250c      	movcc	r5, #12
  401318:	2d00      	cmp	r5, #0
  40131a:	4606      	mov	r6, r0
  40131c:	db01      	blt.n	401322 <_malloc_r+0x1a>
  40131e:	42a9      	cmp	r1, r5
  401320:	d903      	bls.n	40132a <_malloc_r+0x22>
  401322:	230c      	movs	r3, #12
  401324:	6033      	str	r3, [r6, #0]
  401326:	2000      	movs	r0, #0
  401328:	bd70      	pop	{r4, r5, r6, pc}
  40132a:	f000 f85b 	bl	4013e4 <__malloc_lock>
  40132e:	4a23      	ldr	r2, [pc, #140]	; (4013bc <_malloc_r+0xb4>)
  401330:	6814      	ldr	r4, [r2, #0]
  401332:	4621      	mov	r1, r4
  401334:	b991      	cbnz	r1, 40135c <_malloc_r+0x54>
  401336:	4c22      	ldr	r4, [pc, #136]	; (4013c0 <_malloc_r+0xb8>)
  401338:	6823      	ldr	r3, [r4, #0]
  40133a:	b91b      	cbnz	r3, 401344 <_malloc_r+0x3c>
  40133c:	4630      	mov	r0, r6
  40133e:	f000 f841 	bl	4013c4 <_sbrk_r>
  401342:	6020      	str	r0, [r4, #0]
  401344:	4629      	mov	r1, r5
  401346:	4630      	mov	r0, r6
  401348:	f000 f83c 	bl	4013c4 <_sbrk_r>
  40134c:	1c43      	adds	r3, r0, #1
  40134e:	d126      	bne.n	40139e <_malloc_r+0x96>
  401350:	230c      	movs	r3, #12
  401352:	6033      	str	r3, [r6, #0]
  401354:	4630      	mov	r0, r6
  401356:	f000 f846 	bl	4013e6 <__malloc_unlock>
  40135a:	e7e4      	b.n	401326 <_malloc_r+0x1e>
  40135c:	680b      	ldr	r3, [r1, #0]
  40135e:	1b5b      	subs	r3, r3, r5
  401360:	d41a      	bmi.n	401398 <_malloc_r+0x90>
  401362:	2b0b      	cmp	r3, #11
  401364:	d90f      	bls.n	401386 <_malloc_r+0x7e>
  401366:	600b      	str	r3, [r1, #0]
  401368:	50cd      	str	r5, [r1, r3]
  40136a:	18cc      	adds	r4, r1, r3
  40136c:	4630      	mov	r0, r6
  40136e:	f000 f83a 	bl	4013e6 <__malloc_unlock>
  401372:	f104 000b 	add.w	r0, r4, #11
  401376:	1d23      	adds	r3, r4, #4
  401378:	f020 0007 	bic.w	r0, r0, #7
  40137c:	1ac3      	subs	r3, r0, r3
  40137e:	d01b      	beq.n	4013b8 <_malloc_r+0xb0>
  401380:	425a      	negs	r2, r3
  401382:	50e2      	str	r2, [r4, r3]
  401384:	bd70      	pop	{r4, r5, r6, pc}
  401386:	428c      	cmp	r4, r1
  401388:	bf0d      	iteet	eq
  40138a:	6863      	ldreq	r3, [r4, #4]
  40138c:	684b      	ldrne	r3, [r1, #4]
  40138e:	6063      	strne	r3, [r4, #4]
  401390:	6013      	streq	r3, [r2, #0]
  401392:	bf18      	it	ne
  401394:	460c      	movne	r4, r1
  401396:	e7e9      	b.n	40136c <_malloc_r+0x64>
  401398:	460c      	mov	r4, r1
  40139a:	6849      	ldr	r1, [r1, #4]
  40139c:	e7ca      	b.n	401334 <_malloc_r+0x2c>
  40139e:	1cc4      	adds	r4, r0, #3
  4013a0:	f024 0403 	bic.w	r4, r4, #3
  4013a4:	42a0      	cmp	r0, r4
  4013a6:	d005      	beq.n	4013b4 <_malloc_r+0xac>
  4013a8:	1a21      	subs	r1, r4, r0
  4013aa:	4630      	mov	r0, r6
  4013ac:	f000 f80a 	bl	4013c4 <_sbrk_r>
  4013b0:	3001      	adds	r0, #1
  4013b2:	d0cd      	beq.n	401350 <_malloc_r+0x48>
  4013b4:	6025      	str	r5, [r4, #0]
  4013b6:	e7d9      	b.n	40136c <_malloc_r+0x64>
  4013b8:	bd70      	pop	{r4, r5, r6, pc}
  4013ba:	bf00      	nop
  4013bc:	20400088 	.word	0x20400088
  4013c0:	2040008c 	.word	0x2040008c

004013c4 <_sbrk_r>:
  4013c4:	b538      	push	{r3, r4, r5, lr}
  4013c6:	4c06      	ldr	r4, [pc, #24]	; (4013e0 <_sbrk_r+0x1c>)
  4013c8:	2300      	movs	r3, #0
  4013ca:	4605      	mov	r5, r0
  4013cc:	4608      	mov	r0, r1
  4013ce:	6023      	str	r3, [r4, #0]
  4013d0:	f7ff fa84 	bl	4008dc <_sbrk>
  4013d4:	1c43      	adds	r3, r0, #1
  4013d6:	d102      	bne.n	4013de <_sbrk_r+0x1a>
  4013d8:	6823      	ldr	r3, [r4, #0]
  4013da:	b103      	cbz	r3, 4013de <_sbrk_r+0x1a>
  4013dc:	602b      	str	r3, [r5, #0]
  4013de:	bd38      	pop	{r3, r4, r5, pc}
  4013e0:	204000b4 	.word	0x204000b4

004013e4 <__malloc_lock>:
  4013e4:	4770      	bx	lr

004013e6 <__malloc_unlock>:
  4013e6:	4770      	bx	lr
  4013e8:	682f2e2e 	.word	0x682f2e2e
  4013ec:	732f6c61 	.word	0x732f6c61
  4013f0:	682f6372 	.word	0x682f6372
  4013f4:	695f6c61 	.word	0x695f6c61
  4013f8:	00632e6f 	.word	0x00632e6f
  4013fc:	682f2e2e 	.word	0x682f2e2e
  401400:	732f6c61 	.word	0x732f6c61
  401404:	682f6372 	.word	0x682f6372
  401408:	735f6c61 	.word	0x735f6c61
  40140c:	6d5f6970 	.word	0x6d5f6970
  401410:	6e79735f 	.word	0x6e79735f
  401414:	00632e63 	.word	0x00632e63
  401418:	682f2e2e 	.word	0x682f2e2e
  40141c:	732f6c61 	.word	0x732f6c61
  401420:	682f6372 	.word	0x682f6372
  401424:	755f6c61 	.word	0x755f6c61
  401428:	74726173 	.word	0x74726173
  40142c:	6e79735f 	.word	0x6e79735f
  401430:	00632e63 	.word	0x00632e63

00401434 <spi_regs>:
  401434:	00000001 80000000 00000001 0496dc02     ................
  401444:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  401454:	735f6c70 632e6970 00000000              pl_spi.c....

00401460 <_uarts>:
  401460:	00000001 00000800 000000f4 682f2e2e     ............../h
  401470:	752f6c70 2f747261 5f6c7068 74726175     pl/uart/hpl_uart
  401480:	0000632e                                .c..

00401484 <crc15Table>:
  401484:	00000000 0000c599 0000ceab 00000b32     ............2...
  401494:	0000d8cf 00001d56 00001664 0000d3fd     ....V...d.......
  4014a4:	0000f407 0000319e 00003aac 0000ff35     .....1...:..5...
  4014b4:	00002cc8 0000e951 0000e263 000027fa     .,..Q...c....'..
  4014c4:	0000ad97 0000680e 0000633c 0000a6a5     .....h..<c......
  4014d4:	00007558 0000b0c1 0000bbf3 00007e6a     Xu..........j~..
  4014e4:	00005990 00009c09 0000973b 000052a2     .Y......;....R..
  4014f4:	0000815f 000044c6 00004ff4 00008a6d     _....D...O..m...
  401504:	00005b2e 00009eb7 00009585 0000501c     .[...........P..
  401514:	000083e1 00004678 00004d4a 000088d3     ....xF..JM......
  401524:	0000af29 00006ab0 00006182 0000a41b     )....j...a......
  401534:	000077e6 0000b27f 0000b94d 00007cd4     .w......M....|..
  401544:	0000f6b9 00003320 00003812 0000fd8b     .... 3...8......
  401554:	00002e76 0000ebef 0000e0dd 00002544     v...........D%..
  401564:	000002be 0000c727 0000cc15 0000098c     ....'...........
  401574:	0000da71 00001fe8 000014da 0000d143     q...........C...
  401584:	0000f3c5 0000365c 00003d6e 0000f8f7     ....\6..n=......
  401594:	00002b0a 0000ee93 0000e5a1 00002038     .+..........8 ..
  4015a4:	000007c2 0000c25b 0000c969 00000cf0     ....[...i.......
  4015b4:	0000df0d 00001a94 000011a6 0000d43f     ............?...
  4015c4:	00005e52 00009bcb 000090f9 00005560     R^..........`U..
  4015d4:	0000869d 00004304 00004836 00008daf     .....C..6H......
  4015e4:	0000aa55 00006fcc 000064fe 0000a167     U....o...d..g...
  4015f4:	0000729a 0000b703 0000bc31 000079a8     .r......1....y..
  401604:	0000a8eb 00006d72 00006640 0000a3d9     ....rm..@f......
  401614:	00007024 0000b5bd 0000be8f 00007b16     $p...........{..
  401624:	00005cec 00009975 00009247 000057de     .\..u...G....W..
  401634:	00008423 000041ba 00004a88 00008f11     #....A...J......
  401644:	0000057c 0000c0e5 0000cbd7 00000e4e     |...........N...
  401654:	0000ddb3 0000182a 00001318 0000d681     ....*...........
  401664:	0000f17b 000034e2 00003fd0 0000fa49     {....4...?..I...
  401674:	000029b4 0000ec2d 0000e71f 00002286     .)..-........"..
  401684:	0000a213 0000678a 00006cb8 0000a921     .....g...l..!...
  401694:	00007adc 0000bf45 0000b477 000071ee     .z..E...w....q..
  4016a4:	00005614 0000938d 000098bf 00005d26     .V..........&]..
  4016b4:	00008edb 00004b42 00004070 000085e9     ....BK..p@......
  4016c4:	00000f84 0000ca1d 0000c12f 000004b6     ......../.......
  4016d4:	0000d74b 000012d2 000019e0 0000dc79     K...........y...
  4016e4:	0000fb83 00003e1a 00003528 0000f0b1     .....>..(5......
  4016f4:	0000234c 0000e6d5 0000ede7 0000287e     L#..........~(..
  401704:	0000f93d 00003ca4 00003796 0000f20f     =....<...7......
  401714:	000021f2 0000e46b 0000ef59 00002ac0     .!..k...Y....*..
  401724:	00000d3a 0000c8a3 0000c391 00000608     :...............
  401734:	0000d5f5 0000106c 00001b5e 0000dec7     ....l...^.......
  401744:	000054aa 00009133 00009a01 00005f98     .T..3........_..
  401754:	00008c65 000049fc 000042ce 00008757     e....I...B..W...
  401764:	0000a0ad 00006534 00006e06 0000ab9f     ....4e...n......
  401774:	00007862 0000bdfb 0000b6c9 00007350     bx..........Ps..
  401784:	000051d6 0000944f 00009f7d 00005ae4     .Q..O...}....Z..
  401794:	00008919 00004c80 000047b2 0000822b     .....L...G..+...
  4017a4:	0000a5d1 00006048 00006b7a 0000aee3     ....H`..zk......
  4017b4:	00007d1e 0000b887 0000b3b5 0000762c     .}..........,v..
  4017c4:	0000fc41 000039d8 000032ea 0000f773     A....9...2..s...
  4017d4:	0000248e 0000e117 0000ea25 00002fbc     .$......%..../..
  4017e4:	00000846 0000cddf 0000c6ed 00000374     F...........t...
  4017f4:	0000d089 00001510 00001e22 0000dbbb     ........".......
  401804:	00000af8 0000cf61 0000c453 000001ca     ....a...S.......
  401814:	0000d237 000017ae 00001c9c 0000d905     7...............
  401824:	0000feff 00003b66 00003054 0000f5cd     ....f;..T0......
  401834:	00002630 0000e3a9 0000e89b 00002d02     0&...........-..
  401844:	0000a76f 000062f6 000069c4 0000ac5d     o....b...i..]...
  401854:	00007fa0 0000ba39 0000b10b 00007492     ....9........t..
  401864:	00005368 000096f1 00009dc3 0000585a     hS..........ZX..
  401874:	00008ba7 00004e3e 0000450c 00008095     ....>N...E......

00401884 <__sf_fake_stderr>:
	...

004018a4 <__sf_fake_stdin>:
	...

004018c4 <__sf_fake_stdout>:
	...

004018e4 <_init>:
  4018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4018e6:	bf00      	nop
  4018e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4018ea:	bc08      	pop	{r3}
  4018ec:	469e      	mov	lr, r3
  4018ee:	4770      	bx	lr

004018f0 <__init_array_start>:
  4018f0:	0040018d 	.word	0x0040018d

004018f4 <_fini>:
  4018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4018f6:	bf00      	nop
  4018f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4018fa:	bc08      	pop	{r3}
  4018fc:	469e      	mov	lr, r3
  4018fe:	4770      	bx	lr

00401900 <__fini_array_start>:
  401900:	00400169 	.word	0x00400169
