
SPI_UART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001570  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20400000  20400000  00011570  2**0
                  CONTENTS
  2 .bss          00000044  20400000  20400000  00020000  2**2
                  ALLOC
  3 .heap         00000204  20400044  20400044  00020000  2**0
                  ALLOC
  4 .stack        00000400  20400248  20400248  00020000  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00011570  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0001159e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000ef44  00000000  00000000  000115f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000237c  00000000  00000000  0002053b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000616b  00000000  00000000  000228b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000820  00000000  00000000  00028a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007a0  00000000  00000000  00029242  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003d872  00000000  00000000  000299e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f2c8  00000000  00000000  00067254  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001459bc  00000000  00000000  0007651c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001508  00000000  00000000  001bbed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 06 40 20 91 04 40 00 8d 04 40 00 8d 04 40 00     H.@ ..@...@...@.
  400010:	8d 04 40 00 8d 04 40 00 8d 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	8d 04 40 00 8d 04 40 00 00 00 00 00 8d 04 40 00     ..@...@.......@.
  40003c:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  40004c:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  40005c:	8d 04 40 00 8d 04 40 00 00 00 00 00 8d 04 40 00     ..@...@.......@.
  40006c:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  40007c:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  40008c:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  40009c:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  4000ac:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  4000bc:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  4000cc:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  4000dc:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  4000ec:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  4000fc:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  40010c:	8d 04 40 00 8d 04 40 00 8d 04 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ......@...@...@.
  40012c:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  40013c:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  40014c:	8d 04 40 00 8d 04 40 00 8d 04 40 00 8d 04 40 00     ..@...@...@...@.
  40015c:	8d 04 40 00 8d 04 40 00 8d 04 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400000 	.word	0x20400000
  400184:	00000000 	.word	0x00000000
  400188:	00401570 	.word	0x00401570

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00401570 	.word	0x00401570
  4001c8:	20400004 	.word	0x20400004
  4001cc:	00401570 	.word	0x00401570
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	00400645 	.word	0x00400645

004001e0 <PEC_calculate>:
}




unsigned int PEC_calculate(unsigned char *data , int len){
  4001e0:	b430      	push	{r4, r5}
    unsigned int remainder,address;
    remainder = 16;/*PEC seed*/
    int i;
    for (i = 0; i < len; i++){
  4001e2:	2200      	movs	r2, #0
    remainder = 16;/*PEC seed*/
  4001e4:	2410      	movs	r4, #16
    for (i = 0; i < len; i++){
  4001e6:	e009      	b.n	4001fc <PEC_calculate+0x1c>
        address = ((remainder >> 7) ^ data[i]) & 0xff;/*calculate PEC table address*/
  4001e8:	5c83      	ldrb	r3, [r0, r2]
  4001ea:	ea83 13d4 	eor.w	r3, r3, r4, lsr #7
  4001ee:	b2db      	uxtb	r3, r3
        remainder= (remainder << 8 ) ^ crc15Table[address];
  4001f0:	4d05      	ldr	r5, [pc, #20]	; (400208 <PEC_calculate+0x28>)
  4001f2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
  4001f6:	ea83 2404 	eor.w	r4, r3, r4, lsl #8
    for (i = 0; i < len; i++){
  4001fa:	3201      	adds	r2, #1
  4001fc:	428a      	cmp	r2, r1
  4001fe:	dbf3      	blt.n	4001e8 <PEC_calculate+0x8>
    }
    return((remainder*2)&0xffff);/*The CRC15 has a 0 in the LSB so the final value must be multiplied by 2*/
  400200:	0060      	lsls	r0, r4, #1
  400202:	b280      	uxth	r0, r0
}
  400204:	bc30      	pop	{r4, r5}
  400206:	4770      	bx	lr
  400208:	004010a8 	.word	0x004010a8

0040020c <PEC_verify>:

int PEC_verify(unsigned char *data, unsigned int n, unsigned int PEC){
  40020c:	b510      	push	{r4, lr}
  40020e:	4614      	mov	r4, r2

	if(PEC_calculate(data, n) == PEC){
  400210:	4b04      	ldr	r3, [pc, #16]	; (400224 <PEC_verify+0x18>)
  400212:	4798      	blx	r3
  400214:	42a0      	cmp	r0, r4
  400216:	d101      	bne.n	40021c <PEC_verify+0x10>
		return 0;
  400218:	2000      	movs	r0, #0
  40021a:	bd10      	pop	{r4, pc}
	}
	return -1;
  40021c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400220:	bd10      	pop	{r4, pc}
  400222:	bf00      	nop
  400224:	004001e1 	.word	0x004001e1

00400228 <isoSpi_send>:
	delay_us(1); 
	gpio_set_pin_level(PC25, true);
	delay_us(MAX_T_WAKE); 
}

void isoSpi_send(uint8_t *transfer_data, int size, uint8_t *receive_data){
  400228:	b5f0      	push	{r4, r5, r6, r7, lr}
  40022a:	b085      	sub	sp, #20
  40022c:	4606      	mov	r6, r0
  40022e:	460d      	mov	r5, r1
  400230:	4617      	mov	r7, r2
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  400232:	4c0c      	ldr	r4, [pc, #48]	; (400264 <isoSpi_send+0x3c>)
  400234:	a903      	add	r1, sp, #12
  400236:	4620      	mov	r0, r4
  400238:	4b0b      	ldr	r3, [pc, #44]	; (400268 <isoSpi_send+0x40>)
  40023a:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
  40023c:	4620      	mov	r0, r4
  40023e:	4b0b      	ldr	r3, [pc, #44]	; (40026c <isoSpi_send+0x44>)
  400240:	4798      	blx	r3
	//uint16_t delay_100_us = 100; 
	
	struct spi_xfer spi_transmit_buffer;
	spi_transmit_buffer.size = size;
  400242:	9502      	str	r5, [sp, #8]
	spi_transmit_buffer.rxbuf  = receive_data;
  400244:	9701      	str	r7, [sp, #4]

	//enable_cs(); //do that shit manually before
	
	
	for(int i = 0; i < size; i++){
  400246:	2400      	movs	r4, #0
  400248:	e007      	b.n	40025a <isoSpi_send+0x32>
		spi_transmit_buffer.txbuf = &transfer_data[i];
  40024a:	1933      	adds	r3, r6, r4
  40024c:	a904      	add	r1, sp, #16
  40024e:	f841 3d10 	str.w	r3, [r1, #-16]!
		spi_m_sync_transfer(&SPI_0, &spi_transmit_buffer);
  400252:	4804      	ldr	r0, [pc, #16]	; (400264 <isoSpi_send+0x3c>)
  400254:	4b06      	ldr	r3, [pc, #24]	; (400270 <isoSpi_send+0x48>)
  400256:	4798      	blx	r3
	for(int i = 0; i < size; i++){
  400258:	3401      	adds	r4, #1
  40025a:	42ac      	cmp	r4, r5
  40025c:	dbf5      	blt.n	40024a <isoSpi_send+0x22>
		//delay_us(delay_100_us);
	}
	
	//disable_cs();
}
  40025e:	b005      	add	sp, #20
  400260:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400262:	bf00      	nop
  400264:	20400020 	.word	0x20400020
  400268:	00400869 	.word	0x00400869
  40026c:	00400789 	.word	0x00400789
  400270:	004007b1 	.word	0x004007b1

00400274 <enable_cs>:
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
	((Pio *)hw)->PIO_CODR = mask;
  400274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400278:	4b01      	ldr	r3, [pc, #4]	; (400280 <enable_cs+0xc>)
  40027a:	635a      	str	r2, [r3, #52]	; 0x34
  40027c:	4770      	bx	lr
  40027e:	bf00      	nop
  400280:	400e1200 	.word	0x400e1200

00400284 <disable_cs>:
	((Pio *)hw)->PIO_SODR = mask;
  400284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400288:	4b01      	ldr	r3, [pc, #4]	; (400290 <disable_cs+0xc>)
  40028a:	631a      	str	r2, [r3, #48]	; 0x30
  40028c:	4770      	bx	lr
  40028e:	bf00      	nop
  400290:	400e1200 	.word	0x400e1200

00400294 <wakeup_sleep>:
void disable_cs(){
	gpio_set_pin_level(PC25, true);
}

void wakeup_sleep()
{
  400294:	b508      	push	{r3, lr}
	enable_cs();
  400296:	4b04      	ldr	r3, [pc, #16]	; (4002a8 <wakeup_sleep+0x14>)
  400298:	4798      	blx	r3
	disable_cs();
  40029a:	4b04      	ldr	r3, [pc, #16]	; (4002ac <wakeup_sleep+0x18>)
  40029c:	4798      	blx	r3
	delay_us(MAX_T_WAKE); // Guarantees the LTC6804 will be in standby
  40029e:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4002a2:	4b03      	ldr	r3, [pc, #12]	; (4002b0 <wakeup_sleep+0x1c>)
  4002a4:	4798      	blx	r3
  4002a6:	bd08      	pop	{r3, pc}
  4002a8:	00400275 	.word	0x00400275
  4002ac:	00400285 	.word	0x00400285
  4002b0:	004006a9 	.word	0x004006a9

004002b4 <broadcast_poll>:
int broadcast_poll(unsigned int command){ //send command to LTC6811
  4002b4:	b500      	push	{lr}
  4002b6:	b083      	sub	sp, #12
    message[0] = command >> 8;
  4002b8:	0a03      	lsrs	r3, r0, #8
  4002ba:	f88d 3004 	strb.w	r3, [sp, #4]
	message[1] = command;
  4002be:	f88d 0005 	strb.w	r0, [sp, #5]
    PEC = PEC_calculate(message,2);
  4002c2:	2102      	movs	r1, #2
  4002c4:	a801      	add	r0, sp, #4
  4002c6:	4b0b      	ldr	r3, [pc, #44]	; (4002f4 <broadcast_poll+0x40>)
  4002c8:	4798      	blx	r3
    message[2] = PEC >>8;
  4002ca:	0a03      	lsrs	r3, r0, #8
  4002cc:	f88d 3006 	strb.w	r3, [sp, #6]
    message[3] = PEC;
  4002d0:	f88d 0007 	strb.w	r0, [sp, #7]
	wakeup_sleep();
  4002d4:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <broadcast_poll+0x44>)
  4002d6:	4798      	blx	r3
	enable_cs();
  4002d8:	4b08      	ldr	r3, [pc, #32]	; (4002fc <broadcast_poll+0x48>)
  4002da:	4798      	blx	r3
    isoSpi_send(&message[0], 4, NULL);
  4002dc:	2200      	movs	r2, #0
  4002de:	2104      	movs	r1, #4
  4002e0:	eb0d 0001 	add.w	r0, sp, r1
  4002e4:	4b06      	ldr	r3, [pc, #24]	; (400300 <broadcast_poll+0x4c>)
  4002e6:	4798      	blx	r3
    disable_cs();
  4002e8:	4b06      	ldr	r3, [pc, #24]	; (400304 <broadcast_poll+0x50>)
  4002ea:	4798      	blx	r3
}
  4002ec:	2000      	movs	r0, #0
  4002ee:	b003      	add	sp, #12
  4002f0:	f85d fb04 	ldr.w	pc, [sp], #4
  4002f4:	004001e1 	.word	0x004001e1
  4002f8:	00400295 	.word	0x00400295
  4002fc:	00400275 	.word	0x00400275
  400300:	00400229 	.word	0x00400229
  400304:	00400285 	.word	0x00400285

00400308 <start_cell_voltages_conversion>:
void start_cell_voltages_conversion(){
  400308:	b508      	push	{r3, lr}
    broadcast_poll(ADCV(MD_NORMAL, DCP_DISCHARGE_NOT_PERMITTED, CH_ALL_CELLS));
  40030a:	f44f 7058 	mov.w	r0, #864	; 0x360
  40030e:	4b01      	ldr	r3, [pc, #4]	; (400314 <start_cell_voltages_conversion+0xc>)
  400310:	4798      	blx	r3
  400312:	bd08      	pop	{r3, pc}
  400314:	004002b5 	.word	0x004002b5

00400318 <broadcast_read>:
{
  400318:	b570      	push	{r4, r5, r6, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	460e      	mov	r6, r1
  40031e:	4615      	mov	r5, r2
	command_message[0] = command >> 8;
  400320:	0a03      	lsrs	r3, r0, #8
  400322:	f88d 3004 	strb.w	r3, [sp, #4]
	command_message[1] = command;
  400326:	f88d 0005 	strb.w	r0, [sp, #5]
    command_PEC = PEC_calculate(command_message, 2);
  40032a:	2102      	movs	r1, #2
  40032c:	a801      	add	r0, sp, #4
  40032e:	4b1a      	ldr	r3, [pc, #104]	; (400398 <broadcast_read+0x80>)
  400330:	4798      	blx	r3
    command_message[2] = command_PEC >> 8;
  400332:	0a03      	lsrs	r3, r0, #8
  400334:	f88d 3006 	strb.w	r3, [sp, #6]
	command_message[3] = command_PEC;
  400338:	f88d 0007 	strb.w	r0, [sp, #7]
	wakeup_sleep();
  40033c:	4b17      	ldr	r3, [pc, #92]	; (40039c <broadcast_read+0x84>)
  40033e:	4798      	blx	r3
    enable_cs();
  400340:	4b17      	ldr	r3, [pc, #92]	; (4003a0 <broadcast_read+0x88>)
  400342:	4798      	blx	r3
    isoSpi_send(&command_message[0], 4, NULL);
  400344:	2200      	movs	r2, #0
  400346:	2104      	movs	r1, #4
  400348:	eb0d 0001 	add.w	r0, sp, r1
  40034c:	4c15      	ldr	r4, [pc, #84]	; (4003a4 <broadcast_read+0x8c>)
  40034e:	47a0      	blx	r4
    isoSpi_send(NULL, size, data);
  400350:	462a      	mov	r2, r5
  400352:	4631      	mov	r1, r6
  400354:	2000      	movs	r0, #0
  400356:	47a0      	blx	r4
    isoSpi_send(NULL, 2, data_PEC);
  400358:	466a      	mov	r2, sp
  40035a:	2102      	movs	r1, #2
  40035c:	2000      	movs	r0, #0
  40035e:	47a0      	blx	r4
    PEC = data_PEC[0]<<8 | data_PEC[1];
  400360:	f89d 2000 	ldrb.w	r2, [sp]
  400364:	f89d 3001 	ldrb.w	r3, [sp, #1]
    if(PEC_verify(&data[slave*size], size, PEC) < 0) everything_is_valid = false;
  400368:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  40036c:	4631      	mov	r1, r6
  40036e:	4628      	mov	r0, r5
  400370:	4b0d      	ldr	r3, [pc, #52]	; (4003a8 <broadcast_read+0x90>)
  400372:	4798      	blx	r3
  400374:	2800      	cmp	r0, #0
  400376:	db06      	blt.n	400386 <broadcast_read+0x6e>
    unsigned int everything_is_valid = true;
  400378:	2401      	movs	r4, #1
    disable_cs();
  40037a:	4b0c      	ldr	r3, [pc, #48]	; (4003ac <broadcast_read+0x94>)
  40037c:	4798      	blx	r3
    if(everything_is_valid == false){
  40037e:	b124      	cbz	r4, 40038a <broadcast_read+0x72>
    return 0;
  400380:	2000      	movs	r0, #0
}
  400382:	b002      	add	sp, #8
  400384:	bd70      	pop	{r4, r5, r6, pc}
    if(PEC_verify(&data[slave*size], size, PEC) < 0) everything_is_valid = false;
  400386:	2400      	movs	r4, #0
  400388:	e7f7      	b.n	40037a <broadcast_read+0x62>
		print_uart((uint8_t*)"Nope1\n");
  40038a:	2104      	movs	r1, #4
  40038c:	4808      	ldr	r0, [pc, #32]	; (4003b0 <broadcast_read+0x98>)
  40038e:	4b09      	ldr	r3, [pc, #36]	; (4003b4 <broadcast_read+0x9c>)
  400390:	4798      	blx	r3
        return -1;
  400392:	f04f 30ff 	mov.w	r0, #4294967295
  400396:	e7f4      	b.n	400382 <broadcast_read+0x6a>
  400398:	004001e1 	.word	0x004001e1
  40039c:	00400295 	.word	0x00400295
  4003a0:	00400275 	.word	0x00400275
  4003a4:	00400229 	.word	0x00400229
  4003a8:	0040020d 	.word	0x0040020d
  4003ac:	00400285 	.word	0x00400285
  4003b0:	004014a8 	.word	0x004014a8
  4003b4:	00400fc1 	.word	0x00400fc1

004003b8 <get_cell_voltages>:
void get_cell_voltages(uint16_t* measured_voltages){
  4003b8:	b510      	push	{r4, lr}
  4003ba:	b082      	sub	sp, #8
  4003bc:	4604      	mov	r4, r0
    broadcast_read(RDCVA, LTC6811_REG_SIZE, (uint8_t*)voltages);
  4003be:	466a      	mov	r2, sp
  4003c0:	2106      	movs	r1, #6
  4003c2:	2004      	movs	r0, #4
  4003c4:	4b30      	ldr	r3, [pc, #192]	; (400488 <get_cell_voltages+0xd0>)
  4003c6:	4798      	blx	r3
    for(stack = 0; stack < BATTERY_SERIES_STACKS; ++stack){
  4003c8:	2200      	movs	r2, #0
  4003ca:	b33a      	cbz	r2, 40041c <get_cell_voltages+0x64>
    broadcast_read(RDCVB, LTC6811_REG_SIZE, (uint8_t*)voltages);
  4003cc:	466a      	mov	r2, sp
  4003ce:	2106      	movs	r1, #6
  4003d0:	4608      	mov	r0, r1
  4003d2:	4b2d      	ldr	r3, [pc, #180]	; (400488 <get_cell_voltages+0xd0>)
  4003d4:	4798      	blx	r3
    for(stack = 0; stack < BATTERY_SERIES_STACKS; ++stack){
  4003d6:	2200      	movs	r2, #0
  4003d8:	2a00      	cmp	r2, #0
  4003da:	d030      	beq.n	40043e <get_cell_voltages+0x86>
    broadcast_read(RDCVC, LTC6811_REG_SIZE, (uint8_t*)voltages);
  4003dc:	466a      	mov	r2, sp
  4003de:	2106      	movs	r1, #6
  4003e0:	2008      	movs	r0, #8
  4003e2:	4b29      	ldr	r3, [pc, #164]	; (400488 <get_cell_voltages+0xd0>)
  4003e4:	4798      	blx	r3
    for(stack = 0; stack < BATTERY_SERIES_STACKS; ++stack){
  4003e6:	2200      	movs	r2, #0
  4003e8:	2a00      	cmp	r2, #0
  4003ea:	d039      	beq.n	400460 <get_cell_voltages+0xa8>
    broadcast_read(RDCVB, LTC6811_REG_SIZE, (uint8_t*)voltages);
  4003ec:	466a      	mov	r2, sp
  4003ee:	2106      	movs	r1, #6
  4003f0:	4608      	mov	r0, r1
  4003f2:	4b25      	ldr	r3, [pc, #148]	; (400488 <get_cell_voltages+0xd0>)
  4003f4:	4798      	blx	r3
    for(stack = 0; stack < BATTERY_SERIES_STACKS; ++stack){
  4003f6:	2200      	movs	r2, #0
  4003f8:	2a00      	cmp	r2, #0
  4003fa:	d043      	beq.n	400484 <get_cell_voltages+0xcc>
}
  4003fc:	b002      	add	sp, #8
  4003fe:	bd10      	pop	{r4, pc}
			measured_voltages[cell] = voltages[cell];
  400400:	a902      	add	r1, sp, #8
  400402:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  400406:	f831 1c08 	ldrh.w	r1, [r1, #-8]
  40040a:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
        for(cell = 0; cell < 3; ++cell){
  40040e:	3301      	adds	r3, #1
  400410:	b29b      	uxth	r3, r3
  400412:	2b02      	cmp	r3, #2
  400414:	d9f4      	bls.n	400400 <get_cell_voltages+0x48>
    for(stack = 0; stack < BATTERY_SERIES_STACKS; ++stack){
  400416:	3201      	adds	r2, #1
  400418:	b292      	uxth	r2, r2
  40041a:	e7d6      	b.n	4003ca <get_cell_voltages+0x12>
  40041c:	4613      	mov	r3, r2
  40041e:	e7f8      	b.n	400412 <get_cell_voltages+0x5a>
				measured_voltages[cell+3] = voltages[cell];
  400420:	1cd9      	adds	r1, r3, #3
  400422:	a802      	add	r0, sp, #8
  400424:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  400428:	f830 0c08 	ldrh.w	r0, [r0, #-8]
  40042c:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        for(cell = 0; cell < 3; ++cell){
  400430:	3301      	adds	r3, #1
  400432:	b29b      	uxth	r3, r3
  400434:	2b02      	cmp	r3, #2
  400436:	d9f3      	bls.n	400420 <get_cell_voltages+0x68>
    for(stack = 0; stack < BATTERY_SERIES_STACKS; ++stack){
  400438:	3201      	adds	r2, #1
  40043a:	b292      	uxth	r2, r2
  40043c:	e7cc      	b.n	4003d8 <get_cell_voltages+0x20>
  40043e:	4613      	mov	r3, r2
  400440:	e7f8      	b.n	400434 <get_cell_voltages+0x7c>
           	measured_voltages[cell+6] = voltages[cell];
  400442:	1d99      	adds	r1, r3, #6
  400444:	a802      	add	r0, sp, #8
  400446:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  40044a:	f830 0c08 	ldrh.w	r0, [r0, #-8]
  40044e:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        for(cell = 0; cell < 3; ++cell){
  400452:	3301      	adds	r3, #1
  400454:	b29b      	uxth	r3, r3
  400456:	2b02      	cmp	r3, #2
  400458:	d9f3      	bls.n	400442 <get_cell_voltages+0x8a>
    for(stack = 0; stack < BATTERY_SERIES_STACKS; ++stack){
  40045a:	3201      	adds	r2, #1
  40045c:	b292      	uxth	r2, r2
  40045e:	e7c3      	b.n	4003e8 <get_cell_voltages+0x30>
  400460:	4613      	mov	r3, r2
  400462:	e7f8      	b.n	400456 <get_cell_voltages+0x9e>
            measured_voltages[cell+9] = voltages[cell];
  400464:	f103 0109 	add.w	r1, r3, #9
  400468:	a802      	add	r0, sp, #8
  40046a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  40046e:	f830 0c08 	ldrh.w	r0, [r0, #-8]
  400472:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        for(cell = 0; cell < 3; ++cell){
  400476:	3301      	adds	r3, #1
  400478:	b29b      	uxth	r3, r3
  40047a:	2b02      	cmp	r3, #2
  40047c:	d9f2      	bls.n	400464 <get_cell_voltages+0xac>
    for(stack = 0; stack < BATTERY_SERIES_STACKS; ++stack){
  40047e:	3201      	adds	r2, #1
  400480:	b292      	uxth	r2, r2
  400482:	e7b9      	b.n	4003f8 <get_cell_voltages+0x40>
  400484:	4613      	mov	r3, r2
  400486:	e7f8      	b.n	40047a <get_cell_voltages+0xc2>
  400488:	00400319 	.word	0x00400319

0040048c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40048c:	e7fe      	b.n	40048c <Dummy_Handler>
	...

00400490 <Reset_Handler>:
{
  400490:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400492:	4b10      	ldr	r3, [pc, #64]	; (4004d4 <Reset_Handler+0x44>)
  400494:	4a10      	ldr	r2, [pc, #64]	; (4004d8 <Reset_Handler+0x48>)
  400496:	429a      	cmp	r2, r3
  400498:	d009      	beq.n	4004ae <Reset_Handler+0x1e>
  40049a:	4b0e      	ldr	r3, [pc, #56]	; (4004d4 <Reset_Handler+0x44>)
  40049c:	4a0e      	ldr	r2, [pc, #56]	; (4004d8 <Reset_Handler+0x48>)
  40049e:	e003      	b.n	4004a8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4004a0:	6811      	ldr	r1, [r2, #0]
  4004a2:	6019      	str	r1, [r3, #0]
  4004a4:	3304      	adds	r3, #4
  4004a6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4004a8:	490c      	ldr	r1, [pc, #48]	; (4004dc <Reset_Handler+0x4c>)
  4004aa:	428b      	cmp	r3, r1
  4004ac:	d3f8      	bcc.n	4004a0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4004ae:	4b0c      	ldr	r3, [pc, #48]	; (4004e0 <Reset_Handler+0x50>)
  4004b0:	e002      	b.n	4004b8 <Reset_Handler+0x28>
                *pDest++ = 0;
  4004b2:	2200      	movs	r2, #0
  4004b4:	601a      	str	r2, [r3, #0]
  4004b6:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4004b8:	4a0a      	ldr	r2, [pc, #40]	; (4004e4 <Reset_Handler+0x54>)
  4004ba:	4293      	cmp	r3, r2
  4004bc:	d3f9      	bcc.n	4004b2 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4004be:	4a0a      	ldr	r2, [pc, #40]	; (4004e8 <Reset_Handler+0x58>)
  4004c0:	4b0a      	ldr	r3, [pc, #40]	; (4004ec <Reset_Handler+0x5c>)
  4004c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4004c6:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4004c8:	4b09      	ldr	r3, [pc, #36]	; (4004f0 <Reset_Handler+0x60>)
  4004ca:	4798      	blx	r3
        main();
  4004cc:	4b09      	ldr	r3, [pc, #36]	; (4004f4 <Reset_Handler+0x64>)
  4004ce:	4798      	blx	r3
  4004d0:	e7fe      	b.n	4004d0 <Reset_Handler+0x40>
  4004d2:	bf00      	nop
  4004d4:	20400000 	.word	0x20400000
  4004d8:	00401570 	.word	0x00401570
  4004dc:	20400000 	.word	0x20400000
  4004e0:	20400000 	.word	0x20400000
  4004e4:	20400044 	.word	0x20400044
  4004e8:	e000ed00 	.word	0xe000ed00
  4004ec:	00400000 	.word	0x00400000
  4004f0:	00401061 	.word	0x00401061
  4004f4:	00400ff9 	.word	0x00400ff9

004004f8 <SPI_0_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004f8:	4b16      	ldr	r3, [pc, #88]	; (400554 <SPI_0_PORT_init+0x5c>)
  4004fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004fc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  400500:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400502:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400504:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
  400508:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40050a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40050e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400512:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  400516:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400518:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40051a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
  40051e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400520:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400524:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400528:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  40052c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40052e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400530:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400534:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400536:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40053a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_PER = mask;
  40053c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400540:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_OER = mask;
  400542:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  400544:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400548:	631a      	str	r2, [r3, #48]	; 0x30
  40054a:	6319      	str	r1, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  40054c:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40054e:	601a      	str	r2, [r3, #0]
  400550:	4770      	bx	lr
  400552:	bf00      	nop
  400554:	400e1200 	.word	0x400e1200

00400558 <SPI_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400558:	4b05      	ldr	r3, [pc, #20]	; (400570 <SPI_0_CLOCK_init+0x18>)
  40055a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40055e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400562:	d104      	bne.n	40056e <SPI_0_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400564:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400568:	4b01      	ldr	r3, [pc, #4]	; (400570 <SPI_0_CLOCK_init+0x18>)
  40056a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40056e:	4770      	bx	lr
  400570:	400e0600 	.word	0x400e0600

00400574 <SPI_0_init>:
{
	_pmc_enable_periph_clock(ID_SPI1);
}

void SPI_0_init(void)
{
  400574:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  400576:	4b08      	ldr	r3, [pc, #32]	; (400598 <SPI_0_init+0x24>)
  400578:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  40057a:	4b08      	ldr	r3, [pc, #32]	; (40059c <SPI_0_init+0x28>)
  40057c:	4798      	blx	r3
  40057e:	4c08      	ldr	r4, [pc, #32]	; (4005a0 <SPI_0_init+0x2c>)
  400580:	4601      	mov	r1, r0
  400582:	4620      	mov	r0, r4
  400584:	4b07      	ldr	r3, [pc, #28]	; (4005a4 <SPI_0_init+0x30>)
  400586:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI1);
  400588:	4907      	ldr	r1, [pc, #28]	; (4005a8 <SPI_0_init+0x34>)
  40058a:	4620      	mov	r0, r4
  40058c:	4b07      	ldr	r3, [pc, #28]	; (4005ac <SPI_0_init+0x38>)
  40058e:	4798      	blx	r3
	SPI_0_PORT_init();
  400590:	4b07      	ldr	r3, [pc, #28]	; (4005b0 <SPI_0_init+0x3c>)
  400592:	4798      	blx	r3
  400594:	bd10      	pop	{r4, pc}
  400596:	bf00      	nop
  400598:	00400559 	.word	0x00400559
  40059c:	00400d25 	.word	0x00400d25
  4005a0:	20400020 	.word	0x20400020
  4005a4:	00400719 	.word	0x00400719
  4005a8:	40058000 	.word	0x40058000
  4005ac:	00400739 	.word	0x00400739
  4005b0:	004004f9 	.word	0x004004f9

004005b4 <delay_driver_init>:
}

void delay_driver_init(void)
{
  4005b4:	b508      	push	{r3, lr}
	delay_init(SysTick);
  4005b6:	4802      	ldr	r0, [pc, #8]	; (4005c0 <delay_driver_init+0xc>)
  4005b8:	4b02      	ldr	r3, [pc, #8]	; (4005c4 <delay_driver_init+0x10>)
  4005ba:	4798      	blx	r3
  4005bc:	bd08      	pop	{r3, pc}
  4005be:	bf00      	nop
  4005c0:	e000e010 	.word	0xe000e010
  4005c4:	00400695 	.word	0x00400695

004005c8 <USART_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005c8:	4b0a      	ldr	r3, [pc, #40]	; (4005f4 <USART_1_PORT_init+0x2c>)
  4005ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005cc:	f022 0220 	bic.w	r2, r2, #32
  4005d0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4005d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005d4:	f042 0220 	orr.w	r2, r2, #32
  4005d8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005da:	2220      	movs	r2, #32
  4005dc:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  4005e4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4005e6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4005ec:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005ee:	2240      	movs	r2, #64	; 0x40
  4005f0:	605a      	str	r2, [r3, #4]
  4005f2:	4770      	bx	lr
  4005f4:	400e0e00 	.word	0x400e0e00

004005f8 <USART_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005f8:	4b04      	ldr	r3, [pc, #16]	; (40060c <USART_1_CLOCK_init+0x14>)
  4005fa:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4005fc:	f413 7f80 	tst.w	r3, #256	; 0x100
  400600:	d103      	bne.n	40060a <USART_1_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400602:	f44f 7280 	mov.w	r2, #256	; 0x100
  400606:	4b01      	ldr	r3, [pc, #4]	; (40060c <USART_1_CLOCK_init+0x14>)
  400608:	611a      	str	r2, [r3, #16]
  40060a:	4770      	bx	lr
  40060c:	400e0600 	.word	0x400e0600

00400610 <USART_1_init>:
{
	_pmc_enable_periph_clock(ID_UART1);
}

void USART_1_init(void)
{
  400610:	b508      	push	{r3, lr}
	USART_1_CLOCK_init();
  400612:	4b06      	ldr	r3, [pc, #24]	; (40062c <USART_1_init+0x1c>)
  400614:	4798      	blx	r3
	usart_sync_init(&USART_1, UART1, _uart_get_usart_sync());
  400616:	4b06      	ldr	r3, [pc, #24]	; (400630 <USART_1_init+0x20>)
  400618:	4798      	blx	r3
  40061a:	4602      	mov	r2, r0
  40061c:	4905      	ldr	r1, [pc, #20]	; (400634 <USART_1_init+0x24>)
  40061e:	4806      	ldr	r0, [pc, #24]	; (400638 <USART_1_init+0x28>)
  400620:	4b06      	ldr	r3, [pc, #24]	; (40063c <USART_1_init+0x2c>)
  400622:	4798      	blx	r3
	USART_1_PORT_init();
  400624:	4b06      	ldr	r3, [pc, #24]	; (400640 <USART_1_init+0x30>)
  400626:	4798      	blx	r3
  400628:	bd08      	pop	{r3, pc}
  40062a:	bf00      	nop
  40062c:	004005f9 	.word	0x004005f9
  400630:	00400fbd 	.word	0x00400fbd
  400634:	400e0a00 	.word	0x400e0a00
  400638:	20400038 	.word	0x20400038
  40063c:	00400965 	.word	0x00400965
  400640:	004005c9 	.word	0x004005c9

00400644 <system_init>:
}

void system_init(void)
{
  400644:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400646:	4b07      	ldr	r3, [pc, #28]	; (400664 <system_init+0x20>)
  400648:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40064a:	4a07      	ldr	r2, [pc, #28]	; (400668 <system_init+0x24>)
  40064c:	6853      	ldr	r3, [r2, #4]
  40064e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400652:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	SPI_0_init();
  400654:	4b05      	ldr	r3, [pc, #20]	; (40066c <system_init+0x28>)
  400656:	4798      	blx	r3

	delay_driver_init();
  400658:	4b05      	ldr	r3, [pc, #20]	; (400670 <system_init+0x2c>)
  40065a:	4798      	blx	r3

	USART_1_init();
  40065c:	4b05      	ldr	r3, [pc, #20]	; (400674 <system_init+0x30>)
  40065e:	4798      	blx	r3
  400660:	bd08      	pop	{r3, pc}
  400662:	bf00      	nop
  400664:	00400a25 	.word	0x00400a25
  400668:	400e1850 	.word	0x400e1850
  40066c:	00400575 	.word	0x00400575
  400670:	004005b5 	.word	0x004005b5
  400674:	00400611 	.word	0x00400611

00400678 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400678:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  40067c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40067e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400680:	f3bf 8f5f 	dmb	sy
  400684:	4770      	bx	lr

00400686 <atomic_leave_critical>:
  400686:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40068a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  40068c:	f383 8810 	msr	PRIMASK, r3
  400690:	4770      	bx	lr
	...

00400694 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400694:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400696:	4b02      	ldr	r3, [pc, #8]	; (4006a0 <delay_init+0xc>)
  400698:	6018      	str	r0, [r3, #0]
  40069a:	4b02      	ldr	r3, [pc, #8]	; (4006a4 <delay_init+0x10>)
  40069c:	4798      	blx	r3
  40069e:	bd08      	pop	{r3, pc}
  4006a0:	2040001c 	.word	0x2040001c
  4006a4:	00400d3d 	.word	0x00400d3d

004006a8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  4006a8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  4006aa:	4b04      	ldr	r3, [pc, #16]	; (4006bc <delay_us+0x14>)
  4006ac:	681c      	ldr	r4, [r3, #0]
  4006ae:	4b04      	ldr	r3, [pc, #16]	; (4006c0 <delay_us+0x18>)
  4006b0:	4798      	blx	r3
  4006b2:	4601      	mov	r1, r0
  4006b4:	4620      	mov	r0, r4
  4006b6:	4b03      	ldr	r3, [pc, #12]	; (4006c4 <delay_us+0x1c>)
  4006b8:	4798      	blx	r3
  4006ba:	bd10      	pop	{r4, pc}
  4006bc:	2040001c 	.word	0x2040001c
  4006c0:	00400a07 	.word	0x00400a07
  4006c4:	00400d49 	.word	0x00400d49

004006c8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4006c8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4006ca:	4b04      	ldr	r3, [pc, #16]	; (4006dc <delay_ms+0x14>)
  4006cc:	681c      	ldr	r4, [r3, #0]
  4006ce:	4b04      	ldr	r3, [pc, #16]	; (4006e0 <delay_ms+0x18>)
  4006d0:	4798      	blx	r3
  4006d2:	4601      	mov	r1, r0
  4006d4:	4620      	mov	r0, r4
  4006d6:	4b03      	ldr	r3, [pc, #12]	; (4006e4 <delay_ms+0x1c>)
  4006d8:	4798      	blx	r3
  4006da:	bd10      	pop	{r4, pc}
  4006dc:	2040001c 	.word	0x2040001c
  4006e0:	00400a11 	.word	0x00400a11
  4006e4:	00400d49 	.word	0x00400d49

004006e8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4006e8:	b570      	push	{r4, r5, r6, lr}
  4006ea:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4006ec:	4604      	mov	r4, r0
  4006ee:	460d      	mov	r5, r1
  4006f0:	2800      	cmp	r0, #0
  4006f2:	bf18      	it	ne
  4006f4:	2900      	cmpne	r1, #0
  4006f6:	bf14      	ite	ne
  4006f8:	2001      	movne	r0, #1
  4006fa:	2000      	moveq	r0, #0
  4006fc:	2234      	movs	r2, #52	; 0x34
  4006fe:	4904      	ldr	r1, [pc, #16]	; (400710 <io_write+0x28>)
  400700:	4b04      	ldr	r3, [pc, #16]	; (400714 <io_write+0x2c>)
  400702:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400704:	6823      	ldr	r3, [r4, #0]
  400706:	4632      	mov	r2, r6
  400708:	4629      	mov	r1, r5
  40070a:	4620      	mov	r0, r4
  40070c:	4798      	blx	r3
}
  40070e:	bd70      	pop	{r4, r5, r6, pc}
  400710:	004014b0 	.word	0x004014b0
  400714:	00400a01 	.word	0x00400a01

00400718 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400718:	b538      	push	{r3, r4, r5, lr}
  40071a:	460d      	mov	r5, r1
	ASSERT(spi);
  40071c:	4604      	mov	r4, r0
  40071e:	2239      	movs	r2, #57	; 0x39
  400720:	4903      	ldr	r1, [pc, #12]	; (400730 <spi_m_sync_set_func_ptr+0x18>)
  400722:	3000      	adds	r0, #0
  400724:	bf18      	it	ne
  400726:	2001      	movne	r0, #1
  400728:	4b02      	ldr	r3, [pc, #8]	; (400734 <spi_m_sync_set_func_ptr+0x1c>)
  40072a:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  40072c:	6025      	str	r5, [r4, #0]
  40072e:	bd38      	pop	{r3, r4, r5, pc}
  400730:	004014c4 	.word	0x004014c4
  400734:	00400a01 	.word	0x00400a01

00400738 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  400738:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  40073a:	4604      	mov	r4, r0
  40073c:	460d      	mov	r5, r1
  40073e:	2800      	cmp	r0, #0
  400740:	bf18      	it	ne
  400742:	2900      	cmpne	r1, #0
  400744:	bf14      	ite	ne
  400746:	2001      	movne	r0, #1
  400748:	2000      	moveq	r0, #0
  40074a:	2240      	movs	r2, #64	; 0x40
  40074c:	4909      	ldr	r1, [pc, #36]	; (400774 <spi_m_sync_init+0x3c>)
  40074e:	4b0a      	ldr	r3, [pc, #40]	; (400778 <spi_m_sync_init+0x40>)
  400750:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400752:	4620      	mov	r0, r4
  400754:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  400758:	4629      	mov	r1, r5
  40075a:	4b08      	ldr	r3, [pc, #32]	; (40077c <spi_m_sync_init+0x44>)
  40075c:	4798      	blx	r3

	if (rc < 0) {
  40075e:	2800      	cmp	r0, #0
  400760:	db07      	blt.n	400772 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400766:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  400768:	4b05      	ldr	r3, [pc, #20]	; (400780 <spi_m_sync_init+0x48>)
  40076a:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  40076c:	4b05      	ldr	r3, [pc, #20]	; (400784 <spi_m_sync_init+0x4c>)
  40076e:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  400770:	2000      	movs	r0, #0
}
  400772:	bd38      	pop	{r3, r4, r5, pc}
  400774:	004014c4 	.word	0x004014c4
  400778:	00400a01 	.word	0x00400a01
  40077c:	00400b49 	.word	0x00400b49
  400780:	0040082d 	.word	0x0040082d
  400784:	004007f1 	.word	0x004007f1

00400788 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  400788:	b510      	push	{r4, lr}
	ASSERT(spi);
  40078a:	4604      	mov	r4, r0
  40078c:	2257      	movs	r2, #87	; 0x57
  40078e:	4905      	ldr	r1, [pc, #20]	; (4007a4 <spi_m_sync_enable+0x1c>)
  400790:	3000      	adds	r0, #0
  400792:	bf18      	it	ne
  400794:	2001      	movne	r0, #1
  400796:	4b04      	ldr	r3, [pc, #16]	; (4007a8 <spi_m_sync_enable+0x20>)
  400798:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  40079a:	1d20      	adds	r0, r4, #4
  40079c:	4b03      	ldr	r3, [pc, #12]	; (4007ac <spi_m_sync_enable+0x24>)
  40079e:	4798      	blx	r3
  4007a0:	bd10      	pop	{r4, pc}
  4007a2:	bf00      	nop
  4007a4:	004014c4 	.word	0x004014c4
  4007a8:	00400a01 	.word	0x00400a01
  4007ac:	00400bf1 	.word	0x00400bf1

004007b0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  4007b0:	b530      	push	{r4, r5, lr}
  4007b2:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  4007b4:	4605      	mov	r5, r0
  4007b6:	460c      	mov	r4, r1
  4007b8:	2800      	cmp	r0, #0
  4007ba:	bf18      	it	ne
  4007bc:	2900      	cmpne	r1, #0
  4007be:	bf14      	ite	ne
  4007c0:	2001      	movne	r0, #1
  4007c2:	2000      	moveq	r0, #0
  4007c4:	22b3      	movs	r2, #179	; 0xb3
  4007c6:	4907      	ldr	r1, [pc, #28]	; (4007e4 <spi_m_sync_transfer+0x34>)
  4007c8:	4b07      	ldr	r3, [pc, #28]	; (4007e8 <spi_m_sync_transfer+0x38>)
  4007ca:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  4007cc:	6823      	ldr	r3, [r4, #0]
  4007ce:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  4007d0:	6863      	ldr	r3, [r4, #4]
  4007d2:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  4007d4:	68a3      	ldr	r3, [r4, #8]
  4007d6:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  4007d8:	a901      	add	r1, sp, #4
  4007da:	1d28      	adds	r0, r5, #4
  4007dc:	4b03      	ldr	r3, [pc, #12]	; (4007ec <spi_m_sync_transfer+0x3c>)
  4007de:	4798      	blx	r3
}
  4007e0:	b005      	add	sp, #20
  4007e2:	bd30      	pop	{r4, r5, pc}
  4007e4:	004014c4 	.word	0x004014c4
  4007e8:	00400a01 	.word	0x00400a01
  4007ec:	00400c25 	.word	0x00400c25

004007f0 <_spi_m_sync_io_write>:
{
  4007f0:	b570      	push	{r4, r5, r6, lr}
  4007f2:	b084      	sub	sp, #16
  4007f4:	460e      	mov	r6, r1
  4007f6:	4615      	mov	r5, r2
	ASSERT(io);
  4007f8:	4604      	mov	r4, r0
  4007fa:	22a3      	movs	r2, #163	; 0xa3
  4007fc:	4908      	ldr	r1, [pc, #32]	; (400820 <_spi_m_sync_io_write+0x30>)
  4007fe:	3000      	adds	r0, #0
  400800:	bf18      	it	ne
  400802:	2001      	movne	r0, #1
  400804:	4b07      	ldr	r3, [pc, #28]	; (400824 <_spi_m_sync_io_write+0x34>)
  400806:	4798      	blx	r3
	xfer.rxbuf = 0;
  400808:	2300      	movs	r3, #0
  40080a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  40080c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  40080e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400810:	a901      	add	r1, sp, #4
  400812:	f1a4 000c 	sub.w	r0, r4, #12
  400816:	4b04      	ldr	r3, [pc, #16]	; (400828 <_spi_m_sync_io_write+0x38>)
  400818:	4798      	blx	r3
}
  40081a:	b004      	add	sp, #16
  40081c:	bd70      	pop	{r4, r5, r6, pc}
  40081e:	bf00      	nop
  400820:	004014c4 	.word	0x004014c4
  400824:	00400a01 	.word	0x00400a01
  400828:	004007b1 	.word	0x004007b1

0040082c <_spi_m_sync_io_read>:
{
  40082c:	b570      	push	{r4, r5, r6, lr}
  40082e:	b084      	sub	sp, #16
  400830:	460e      	mov	r6, r1
  400832:	4615      	mov	r5, r2
	ASSERT(io);
  400834:	4604      	mov	r4, r0
  400836:	2287      	movs	r2, #135	; 0x87
  400838:	4908      	ldr	r1, [pc, #32]	; (40085c <_spi_m_sync_io_read+0x30>)
  40083a:	3000      	adds	r0, #0
  40083c:	bf18      	it	ne
  40083e:	2001      	movne	r0, #1
  400840:	4b07      	ldr	r3, [pc, #28]	; (400860 <_spi_m_sync_io_read+0x34>)
  400842:	4798      	blx	r3
	xfer.rxbuf = buf;
  400844:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400846:	2300      	movs	r3, #0
  400848:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  40084a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  40084c:	a901      	add	r1, sp, #4
  40084e:	f1a4 000c 	sub.w	r0, r4, #12
  400852:	4b04      	ldr	r3, [pc, #16]	; (400864 <_spi_m_sync_io_read+0x38>)
  400854:	4798      	blx	r3
}
  400856:	b004      	add	sp, #16
  400858:	bd70      	pop	{r4, r5, r6, pc}
  40085a:	bf00      	nop
  40085c:	004014c4 	.word	0x004014c4
  400860:	00400a01 	.word	0x00400a01
  400864:	004007b1 	.word	0x004007b1

00400868 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  400868:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  40086a:	4604      	mov	r4, r0
  40086c:	460d      	mov	r5, r1
  40086e:	2800      	cmp	r0, #0
  400870:	bf18      	it	ne
  400872:	2900      	cmpne	r1, #0
  400874:	bf14      	ite	ne
  400876:	2001      	movne	r0, #1
  400878:	2000      	moveq	r0, #0
  40087a:	22bd      	movs	r2, #189	; 0xbd
  40087c:	4903      	ldr	r1, [pc, #12]	; (40088c <spi_m_sync_get_io_descriptor+0x24>)
  40087e:	4b04      	ldr	r3, [pc, #16]	; (400890 <spi_m_sync_get_io_descriptor+0x28>)
  400880:	4798      	blx	r3
	*io = &spi->io;
  400882:	340c      	adds	r4, #12
  400884:	602c      	str	r4, [r5, #0]
	return 0;
}
  400886:	2000      	movs	r0, #0
  400888:	bd38      	pop	{r3, r4, r5, pc}
  40088a:	bf00      	nop
  40088c:	004014c4 	.word	0x004014c4
  400890:	00400a01 	.word	0x00400a01

00400894 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400896:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400898:	4605      	mov	r5, r0
  40089a:	460f      	mov	r7, r1
  40089c:	2800      	cmp	r0, #0
  40089e:	bf18      	it	ne
  4008a0:	2900      	cmpne	r1, #0
  4008a2:	d002      	beq.n	4008aa <usart_sync_write+0x16>
  4008a4:	bb0a      	cbnz	r2, 4008ea <usart_sync_write+0x56>
  4008a6:	2000      	movs	r0, #0
  4008a8:	e000      	b.n	4008ac <usart_sync_write+0x18>
  4008aa:	2000      	movs	r0, #0
  4008ac:	22f1      	movs	r2, #241	; 0xf1
  4008ae:	4910      	ldr	r1, [pc, #64]	; (4008f0 <usart_sync_write+0x5c>)
  4008b0:	4b10      	ldr	r3, [pc, #64]	; (4008f4 <usart_sync_write+0x60>)
  4008b2:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  4008b4:	f105 0408 	add.w	r4, r5, #8
  4008b8:	4620      	mov	r0, r4
  4008ba:	4b0f      	ldr	r3, [pc, #60]	; (4008f8 <usart_sync_write+0x64>)
  4008bc:	4798      	blx	r3
  4008be:	2800      	cmp	r0, #0
  4008c0:	d0f8      	beq.n	4008b4 <usart_sync_write+0x20>
  4008c2:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4008c4:	5d79      	ldrb	r1, [r7, r5]
  4008c6:	4620      	mov	r0, r4
  4008c8:	4b0c      	ldr	r3, [pc, #48]	; (4008fc <usart_sync_write+0x68>)
  4008ca:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4008cc:	4620      	mov	r0, r4
  4008ce:	4b0a      	ldr	r3, [pc, #40]	; (4008f8 <usart_sync_write+0x64>)
  4008d0:	4798      	blx	r3
  4008d2:	2800      	cmp	r0, #0
  4008d4:	d0fa      	beq.n	4008cc <usart_sync_write+0x38>
			;
	} while (++offset < length);
  4008d6:	3501      	adds	r5, #1
  4008d8:	42b5      	cmp	r5, r6
  4008da:	d3f3      	bcc.n	4008c4 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  4008dc:	4620      	mov	r0, r4
  4008de:	4b08      	ldr	r3, [pc, #32]	; (400900 <usart_sync_write+0x6c>)
  4008e0:	4798      	blx	r3
  4008e2:	2800      	cmp	r0, #0
  4008e4:	d0fa      	beq.n	4008dc <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  4008e6:	4628      	mov	r0, r5
  4008e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  4008ea:	2001      	movs	r0, #1
  4008ec:	e7de      	b.n	4008ac <usart_sync_write+0x18>
  4008ee:	bf00      	nop
  4008f0:	004014e0 	.word	0x004014e0
  4008f4:	00400a01 	.word	0x00400a01
  4008f8:	00400f45 	.word	0x00400f45
  4008fc:	00400efd 	.word	0x00400efd
  400900:	00400f6d 	.word	0x00400f6d

00400904 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400908:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40090a:	4605      	mov	r5, r0
  40090c:	4688      	mov	r8, r1
  40090e:	2800      	cmp	r0, #0
  400910:	bf18      	it	ne
  400912:	2900      	cmpne	r1, #0
  400914:	d002      	beq.n	40091c <usart_sync_read+0x18>
  400916:	b9d2      	cbnz	r2, 40094e <usart_sync_read+0x4a>
  400918:	2000      	movs	r0, #0
  40091a:	e000      	b.n	40091e <usart_sync_read+0x1a>
  40091c:	2000      	movs	r0, #0
  40091e:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400922:	490c      	ldr	r1, [pc, #48]	; (400954 <usart_sync_read+0x50>)
  400924:	4b0c      	ldr	r3, [pc, #48]	; (400958 <usart_sync_read+0x54>)
  400926:	4798      	blx	r3
	uint32_t                      offset = 0;
  400928:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  40092a:	f105 0408 	add.w	r4, r5, #8
  40092e:	4620      	mov	r0, r4
  400930:	4b0a      	ldr	r3, [pc, #40]	; (40095c <usart_sync_read+0x58>)
  400932:	4798      	blx	r3
  400934:	2800      	cmp	r0, #0
  400936:	d0f8      	beq.n	40092a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400938:	4620      	mov	r0, r4
  40093a:	4b09      	ldr	r3, [pc, #36]	; (400960 <usart_sync_read+0x5c>)
  40093c:	4798      	blx	r3
  40093e:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400942:	3601      	adds	r6, #1
  400944:	42be      	cmp	r6, r7
  400946:	d3f0      	bcc.n	40092a <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400948:	4630      	mov	r0, r6
  40094a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  40094e:	2001      	movs	r0, #1
  400950:	e7e5      	b.n	40091e <usart_sync_read+0x1a>
  400952:	bf00      	nop
  400954:	004014e0 	.word	0x004014e0
  400958:	00400a01 	.word	0x00400a01
  40095c:	00400f95 	.word	0x00400f95
  400960:	00400f21 	.word	0x00400f21

00400964 <usart_sync_init>:
{
  400964:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400966:	4604      	mov	r4, r0
  400968:	460d      	mov	r5, r1
  40096a:	2800      	cmp	r0, #0
  40096c:	bf18      	it	ne
  40096e:	2900      	cmpne	r1, #0
  400970:	bf14      	ite	ne
  400972:	2001      	movne	r0, #1
  400974:	2000      	moveq	r0, #0
  400976:	2234      	movs	r2, #52	; 0x34
  400978:	4907      	ldr	r1, [pc, #28]	; (400998 <usart_sync_init+0x34>)
  40097a:	4b08      	ldr	r3, [pc, #32]	; (40099c <usart_sync_init+0x38>)
  40097c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  40097e:	4629      	mov	r1, r5
  400980:	f104 0008 	add.w	r0, r4, #8
  400984:	4b06      	ldr	r3, [pc, #24]	; (4009a0 <usart_sync_init+0x3c>)
  400986:	4798      	blx	r3
	if (init_status) {
  400988:	4603      	mov	r3, r0
  40098a:	b918      	cbnz	r0, 400994 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  40098c:	4a05      	ldr	r2, [pc, #20]	; (4009a4 <usart_sync_init+0x40>)
  40098e:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400990:	4a05      	ldr	r2, [pc, #20]	; (4009a8 <usart_sync_init+0x44>)
  400992:	6022      	str	r2, [r4, #0]
}
  400994:	4618      	mov	r0, r3
  400996:	bd38      	pop	{r3, r4, r5, pc}
  400998:	004014e0 	.word	0x004014e0
  40099c:	00400a01 	.word	0x00400a01
  4009a0:	00400e91 	.word	0x00400e91
  4009a4:	00400905 	.word	0x00400905
  4009a8:	00400895 	.word	0x00400895

004009ac <usart_sync_enable>:
{
  4009ac:	b510      	push	{r4, lr}
	ASSERT(descr);
  4009ae:	4604      	mov	r4, r0
  4009b0:	2253      	movs	r2, #83	; 0x53
  4009b2:	4906      	ldr	r1, [pc, #24]	; (4009cc <usart_sync_enable+0x20>)
  4009b4:	3000      	adds	r0, #0
  4009b6:	bf18      	it	ne
  4009b8:	2001      	movne	r0, #1
  4009ba:	4b05      	ldr	r3, [pc, #20]	; (4009d0 <usart_sync_enable+0x24>)
  4009bc:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  4009be:	f104 0008 	add.w	r0, r4, #8
  4009c2:	4b04      	ldr	r3, [pc, #16]	; (4009d4 <usart_sync_enable+0x28>)
  4009c4:	4798      	blx	r3
}
  4009c6:	2000      	movs	r0, #0
  4009c8:	bd10      	pop	{r4, pc}
  4009ca:	bf00      	nop
  4009cc:	004014e0 	.word	0x004014e0
  4009d0:	00400a01 	.word	0x00400a01
  4009d4:	00400ec9 	.word	0x00400ec9

004009d8 <usart_sync_get_io_descriptor>:
{
  4009d8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && io);
  4009da:	4605      	mov	r5, r0
  4009dc:	460c      	mov	r4, r1
  4009de:	2800      	cmp	r0, #0
  4009e0:	bf18      	it	ne
  4009e2:	2900      	cmpne	r1, #0
  4009e4:	bf14      	ite	ne
  4009e6:	2001      	movne	r0, #1
  4009e8:	2000      	moveq	r0, #0
  4009ea:	2269      	movs	r2, #105	; 0x69
  4009ec:	4902      	ldr	r1, [pc, #8]	; (4009f8 <usart_sync_get_io_descriptor+0x20>)
  4009ee:	4b03      	ldr	r3, [pc, #12]	; (4009fc <usart_sync_get_io_descriptor+0x24>)
  4009f0:	4798      	blx	r3
	*io = &descr->io;
  4009f2:	6025      	str	r5, [r4, #0]
}
  4009f4:	2000      	movs	r0, #0
  4009f6:	bd38      	pop	{r3, r4, r5, pc}
  4009f8:	004014e0 	.word	0x004014e0
  4009fc:	00400a01 	.word	0x00400a01

00400a00 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400a00:	b900      	cbnz	r0, 400a04 <assert+0x4>
		__asm("BKPT #0");
  400a02:	be00      	bkpt	0x0000
  400a04:	4770      	bx	lr

00400a06 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400a06:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400a0a:	fb03 f000 	mul.w	r0, r3, r0
  400a0e:	4770      	bx	lr

00400a10 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  400a10:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400a14:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400a1c:	fb03 f000 	mul.w	r0, r3, r0
  400a20:	4770      	bx	lr
	...

00400a24 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400a24:	b500      	push	{lr}
  400a26:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400a28:	a801      	add	r0, sp, #4
  400a2a:	4b0e      	ldr	r3, [pc, #56]	; (400a64 <_init_chip+0x40>)
  400a2c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400a2e:	4a0e      	ldr	r2, [pc, #56]	; (400a68 <_init_chip+0x44>)
  400a30:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400a3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a40:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400a44:	a801      	add	r0, sp, #4
  400a46:	4b09      	ldr	r3, [pc, #36]	; (400a6c <_init_chip+0x48>)
  400a48:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400a4a:	4a09      	ldr	r2, [pc, #36]	; (400a70 <_init_chip+0x4c>)
  400a4c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400a4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400a52:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400a56:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400a58:	4b06      	ldr	r3, [pc, #24]	; (400a74 <_init_chip+0x50>)
  400a5a:	4798      	blx	r3
}
  400a5c:	b003      	add	sp, #12
  400a5e:	f85d fb04 	ldr.w	pc, [sp], #4
  400a62:	bf00      	nop
  400a64:	00400679 	.word	0x00400679
  400a68:	e000ed00 	.word	0xe000ed00
  400a6c:	00400687 	.word	0x00400687
  400a70:	400e0c00 	.word	0x400e0c00
  400a74:	00400b15 	.word	0x00400b15

00400a78 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400a78:	490e      	ldr	r1, [pc, #56]	; (400ab4 <_pmc_init_sources+0x3c>)
  400a7a:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400a7c:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400a80:	4b0d      	ldr	r3, [pc, #52]	; (400ab8 <_pmc_init_sources+0x40>)
  400a82:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400a84:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400a86:	4b0b      	ldr	r3, [pc, #44]	; (400ab4 <_pmc_init_sources+0x3c>)
  400a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400a8a:	f013 0f01 	tst.w	r3, #1
  400a8e:	d0fa      	beq.n	400a86 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400a90:	4b08      	ldr	r3, [pc, #32]	; (400ab4 <_pmc_init_sources+0x3c>)
  400a92:	6a19      	ldr	r1, [r3, #32]
  400a94:	4a09      	ldr	r2, [pc, #36]	; (400abc <_pmc_init_sources+0x44>)
  400a96:	430a      	orrs	r2, r1
  400a98:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400a9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400a9c:	4a08      	ldr	r2, [pc, #32]	; (400ac0 <_pmc_init_sources+0x48>)
  400a9e:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400aa0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400aa2:	4a08      	ldr	r2, [pc, #32]	; (400ac4 <_pmc_init_sources+0x4c>)
  400aa4:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400aa6:	4b03      	ldr	r3, [pc, #12]	; (400ab4 <_pmc_init_sources+0x3c>)
  400aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400aaa:	f013 0f02 	tst.w	r3, #2
  400aae:	d0fa      	beq.n	400aa6 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400ab0:	4770      	bx	lr
  400ab2:	bf00      	nop
  400ab4:	400e0600 	.word	0x400e0600
  400ab8:	00373e01 	.word	0x00373e01
  400abc:	01370000 	.word	0x01370000
  400ac0:	f800ffff 	.word	0xf800ffff
  400ac4:	20183f01 	.word	0x20183f01

00400ac8 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400ac8:	4a11      	ldr	r2, [pc, #68]	; (400b10 <_pmc_init_master_clock+0x48>)
  400aca:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400ad0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400ad2:	4b0f      	ldr	r3, [pc, #60]	; (400b10 <_pmc_init_master_clock+0x48>)
  400ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400ad6:	f013 0f08 	tst.w	r3, #8
  400ada:	d0fa      	beq.n	400ad2 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400adc:	4a0c      	ldr	r2, [pc, #48]	; (400b10 <_pmc_init_master_clock+0x48>)
  400ade:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400ae8:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400aea:	4b09      	ldr	r3, [pc, #36]	; (400b10 <_pmc_init_master_clock+0x48>)
  400aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400aee:	f013 0f08 	tst.w	r3, #8
  400af2:	d0fa      	beq.n	400aea <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400af4:	4a06      	ldr	r2, [pc, #24]	; (400b10 <_pmc_init_master_clock+0x48>)
  400af6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400af8:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400afc:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400b00:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400b02:	4b03      	ldr	r3, [pc, #12]	; (400b10 <_pmc_init_master_clock+0x48>)
  400b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400b06:	f013 0f08 	tst.w	r3, #8
  400b0a:	d0fa      	beq.n	400b02 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400b0c:	4770      	bx	lr
  400b0e:	bf00      	nop
  400b10:	400e0600 	.word	0x400e0600

00400b14 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400b14:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400b16:	4b02      	ldr	r3, [pc, #8]	; (400b20 <_pmc_init+0xc>)
  400b18:	4798      	blx	r3
	_pmc_init_master_clock();
  400b1a:	4b02      	ldr	r3, [pc, #8]	; (400b24 <_pmc_init+0x10>)
  400b1c:	4798      	blx	r3
  400b1e:	bd08      	pop	{r3, pc}
  400b20:	00400a79 	.word	0x00400a79
  400b24:	00400ac9 	.word	0x00400ac9

00400b28 <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  400b28:	2301      	movs	r3, #1
  400b2a:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  400b2c:	2000      	movs	r0, #0
  400b2e:	4770      	bx	lr

00400b30 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  400b30:	4b04      	ldr	r3, [pc, #16]	; (400b44 <_spi_get_hardware_index+0x14>)
  400b32:	4403      	add	r3, r0
  400b34:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  400b38:	2b05      	cmp	r3, #5
  400b3a:	d001      	beq.n	400b40 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  400b3c:	2000      	movs	r0, #0
	}
}
  400b3e:	4770      	bx	lr
		return 1;
  400b40:	2001      	movs	r0, #1
  400b42:	4770      	bx	lr
  400b44:	bfff8000 	.word	0xbfff8000

00400b48 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  400b48:	b570      	push	{r4, r5, r6, lr}
  400b4a:	4606      	mov	r6, r0
  400b4c:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  400b4e:	4608      	mov	r0, r1
  400b50:	4b20      	ldr	r3, [pc, #128]	; (400bd4 <_spi_m_sync_init+0x8c>)
  400b52:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400b54:	2300      	movs	r3, #0
  400b56:	b33b      	cbz	r3, 400ba8 <_spi_m_sync_init+0x60>
	return NULL;
  400b58:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  400b5a:	f44f 729a 	mov.w	r2, #308	; 0x134
  400b5e:	491e      	ldr	r1, [pc, #120]	; (400bd8 <_spi_m_sync_init+0x90>)
  400b60:	2e00      	cmp	r6, #0
  400b62:	bf18      	it	ne
  400b64:	2c00      	cmpne	r4, #0
  400b66:	bf14      	ite	ne
  400b68:	2001      	movne	r0, #1
  400b6a:	2000      	moveq	r0, #0
  400b6c:	4b1b      	ldr	r3, [pc, #108]	; (400bdc <_spi_m_sync_init+0x94>)
  400b6e:	4798      	blx	r3

	if (regs == NULL) {
  400b70:	b355      	cbz	r5, 400bc8 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400b72:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  400b74:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400b78:	d129      	bne.n	400bce <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  400b7a:	2380      	movs	r3, #128	; 0x80
  400b7c:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  400b7e:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  400b80:	686a      	ldr	r2, [r5, #4]
  400b82:	4b17      	ldr	r3, [pc, #92]	; (400be0 <_spi_m_sync_init+0x98>)
  400b84:	4013      	ands	r3, r2
  400b86:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  400b88:	68ab      	ldr	r3, [r5, #8]
  400b8a:	4a16      	ldr	r2, [pc, #88]	; (400be4 <_spi_m_sync_init+0x9c>)
  400b8c:	401a      	ands	r2, r3
  400b8e:	4b16      	ldr	r3, [pc, #88]	; (400be8 <_spi_m_sync_init+0xa0>)
  400b90:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  400b92:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  400b94:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  400b96:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  400b98:	8a2b      	ldrh	r3, [r5, #16]
  400b9a:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  400b9c:	68eb      	ldr	r3, [r5, #12]
  400b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  400ba2:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  400ba4:	2000      	movs	r0, #0
  400ba6:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  400ba8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  400bac:	008a      	lsls	r2, r1, #2
  400bae:	490f      	ldr	r1, [pc, #60]	; (400bec <_spi_m_sync_init+0xa4>)
  400bb0:	5c8a      	ldrb	r2, [r1, r2]
  400bb2:	4290      	cmp	r0, r2
  400bb4:	d002      	beq.n	400bbc <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400bb6:	3301      	adds	r3, #1
  400bb8:	b2db      	uxtb	r3, r3
  400bba:	e7cc      	b.n	400b56 <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  400bbc:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  400bc0:	00ab      	lsls	r3, r5, #2
  400bc2:	460d      	mov	r5, r1
  400bc4:	441d      	add	r5, r3
  400bc6:	e7c8      	b.n	400b5a <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  400bc8:	f06f 000c 	mvn.w	r0, #12
  400bcc:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  400bce:	f06f 0010 	mvn.w	r0, #16
}
  400bd2:	bd70      	pop	{r4, r5, r6, pc}
  400bd4:	00400b31 	.word	0x00400b31
  400bd8:	00401510 	.word	0x00401510
  400bdc:	00400a01 	.word	0x00400a01
  400be0:	feffff7c 	.word	0xfeffff7c
  400be4:	fff1ff6f 	.word	0xfff1ff6f
  400be8:	000e0010 	.word	0x000e0010
  400bec:	004014fc 	.word	0x004014fc

00400bf0 <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  400bf0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  400bf2:	4604      	mov	r4, r0
  400bf4:	b168      	cbz	r0, 400c12 <_spi_m_sync_enable+0x22>
  400bf6:	6803      	ldr	r3, [r0, #0]
  400bf8:	b14b      	cbz	r3, 400c0e <_spi_m_sync_enable+0x1e>
  400bfa:	2001      	movs	r0, #1
  400bfc:	f44f 72b9 	mov.w	r2, #370	; 0x172
  400c00:	4905      	ldr	r1, [pc, #20]	; (400c18 <_spi_m_sync_enable+0x28>)
  400c02:	4b06      	ldr	r3, [pc, #24]	; (400c1c <_spi_m_sync_enable+0x2c>)
  400c04:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  400c06:	6820      	ldr	r0, [r4, #0]
  400c08:	4b05      	ldr	r3, [pc, #20]	; (400c20 <_spi_m_sync_enable+0x30>)
  400c0a:	4798      	blx	r3
}
  400c0c:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  400c0e:	2000      	movs	r0, #0
  400c10:	e7f4      	b.n	400bfc <_spi_m_sync_enable+0xc>
  400c12:	2000      	movs	r0, #0
  400c14:	e7f2      	b.n	400bfc <_spi_m_sync_enable+0xc>
  400c16:	bf00      	nop
  400c18:	00401510 	.word	0x00401510
  400c1c:	00400a01 	.word	0x00400a01
  400c20:	00400b29 	.word	0x00400b29

00400c24 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  400c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c28:	b086      	sub	sp, #24
  400c2a:	4607      	mov	r7, r0
  400c2c:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  400c2e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  400c30:	680b      	ldr	r3, [r1, #0]
  400c32:	9301      	str	r3, [sp, #4]
  400c34:	684b      	ldr	r3, [r1, #4]
  400c36:	9302      	str	r3, [sp, #8]
  400c38:	2300      	movs	r3, #0
  400c3a:	9303      	str	r3, [sp, #12]
  400c3c:	9304      	str	r3, [sp, #16]
  400c3e:	7903      	ldrb	r3, [r0, #4]
  400c40:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  400c44:	1c26      	adds	r6, r4, #0
  400c46:	bf18      	it	ne
  400c48:	2601      	movne	r6, #1
  400c4a:	f240 2231 	movw	r2, #561	; 0x231
  400c4e:	4933      	ldr	r1, [pc, #204]	; (400d1c <_spi_m_sync_trans+0xf8>)
  400c50:	2800      	cmp	r0, #0
  400c52:	bf0c      	ite	eq
  400c54:	2000      	moveq	r0, #0
  400c56:	f006 0001 	andne.w	r0, r6, #1
  400c5a:	4b31      	ldr	r3, [pc, #196]	; (400d20 <_spi_m_sync_trans+0xfc>)
  400c5c:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400c5e:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  400c60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400c64:	d122      	bne.n	400cac <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  400c66:	f06f 0013 	mvn.w	r0, #19
  400c6a:	e053      	b.n	400d14 <_spi_m_sync_trans+0xf0>
		return false;
  400c6c:	2300      	movs	r3, #0
  400c6e:	e035      	b.n	400cdc <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  400c70:	7850      	ldrb	r0, [r2, #1]
  400c72:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  400c76:	3202      	adds	r2, #2
  400c78:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  400c7a:	3301      	adds	r3, #1
  400c7c:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  400c7e:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  400c80:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  400c84:	f240 2222 	movw	r2, #546	; 0x222
  400c88:	4924      	ldr	r1, [pc, #144]	; (400d1c <_spi_m_sync_trans+0xf8>)
  400c8a:	4630      	mov	r0, r6
  400c8c:	4b24      	ldr	r3, [pc, #144]	; (400d20 <_spi_m_sync_trans+0xfc>)
  400c8e:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  400c90:	f018 0f08 	tst.w	r8, #8
  400c94:	d038      	beq.n	400d08 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  400c96:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  400c9a:	2800      	cmp	r0, #0
  400c9c:	db36      	blt.n	400d0c <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  400c9e:	9803      	ldr	r0, [sp, #12]
  400ca0:	68ab      	ldr	r3, [r5, #8]
  400ca2:	4298      	cmp	r0, r3
  400ca4:	d302      	bcc.n	400cac <_spi_m_sync_trans+0x88>
  400ca6:	9a04      	ldr	r2, [sp, #16]
  400ca8:	4293      	cmp	r3, r2
  400caa:	d92f      	bls.n	400d0c <_spi_m_sync_trans+0xe8>
  400cac:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  400cae:	f013 0f01 	tst.w	r3, #1
  400cb2:	d0db      	beq.n	400c6c <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  400cb4:	68a3      	ldr	r3, [r4, #8]
  400cb6:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  400cb8:	9a02      	ldr	r2, [sp, #8]
  400cba:	b15a      	cbz	r2, 400cd4 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  400cbc:	1c51      	adds	r1, r2, #1
  400cbe:	9102      	str	r1, [sp, #8]
  400cc0:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  400cc2:	f89d 2014 	ldrb.w	r2, [sp, #20]
  400cc6:	2a01      	cmp	r2, #1
  400cc8:	d904      	bls.n	400cd4 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  400cca:	460a      	mov	r2, r1
  400ccc:	3101      	adds	r1, #1
  400cce:	9102      	str	r1, [sp, #8]
  400cd0:	0a1b      	lsrs	r3, r3, #8
  400cd2:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  400cd4:	9b04      	ldr	r3, [sp, #16]
  400cd6:	3301      	adds	r3, #1
  400cd8:	9304      	str	r3, [sp, #16]
	return true;
  400cda:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  400cdc:	2b00      	cmp	r3, #0
  400cde:	d1cf      	bne.n	400c80 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  400ce0:	9b03      	ldr	r3, [sp, #12]
  400ce2:	9a04      	ldr	r2, [sp, #16]
  400ce4:	429a      	cmp	r2, r3
  400ce6:	d3cb      	bcc.n	400c80 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  400ce8:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  400cea:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  400cec:	f012 0f02 	tst.w	r2, #2
  400cf0:	d0c6      	beq.n	400c80 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  400cf2:	9a01      	ldr	r2, [sp, #4]
  400cf4:	2a00      	cmp	r2, #0
  400cf6:	d0c0      	beq.n	400c7a <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  400cf8:	1c51      	adds	r1, r2, #1
  400cfa:	9101      	str	r1, [sp, #4]
  400cfc:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  400cfe:	f89d 0014 	ldrb.w	r0, [sp, #20]
  400d02:	2801      	cmp	r0, #1
  400d04:	d8b4      	bhi.n	400c70 <_spi_m_sync_trans+0x4c>
  400d06:	e7b8      	b.n	400c7a <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  400d08:	2000      	movs	r0, #0
  400d0a:	e7c6      	b.n	400c9a <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  400d0c:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  400d0e:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d12:	d0fb      	beq.n	400d0c <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  400d14:	b006      	add	sp, #24
  400d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d1a:	bf00      	nop
  400d1c:	00401510 	.word	0x00401510
  400d20:	00400a01 	.word	0x00400a01

00400d24 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  400d24:	2000      	movs	r0, #0
  400d26:	4770      	bx	lr

00400d28 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  400d28:	4b03      	ldr	r3, [pc, #12]	; (400d38 <_system_time_init+0x10>)
  400d2a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  400d2e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  400d30:	2205      	movs	r2, #5
  400d32:	601a      	str	r2, [r3, #0]
  400d34:	4770      	bx	lr
  400d36:	bf00      	nop
  400d38:	e000e010 	.word	0xe000e010

00400d3c <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  400d3c:	b508      	push	{r3, lr}
	_system_time_init(hw);
  400d3e:	4b01      	ldr	r3, [pc, #4]	; (400d44 <_delay_init+0x8>)
  400d40:	4798      	blx	r3
  400d42:	bd08      	pop	{r3, pc}
  400d44:	00400d29 	.word	0x00400d29

00400d48 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  400d48:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  400d4a:	e00d      	b.n	400d68 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  400d4c:	4b0d      	ldr	r3, [pc, #52]	; (400d84 <_delay_cycles+0x3c>)
  400d4e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  400d52:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  400d54:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  400d56:	4b0b      	ldr	r3, [pc, #44]	; (400d84 <_delay_cycles+0x3c>)
  400d58:	681b      	ldr	r3, [r3, #0]
  400d5a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400d5e:	d0fa      	beq.n	400d56 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  400d60:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  400d64:	3101      	adds	r1, #1
	while (n--) {
  400d66:	4610      	mov	r0, r2
  400d68:	1e43      	subs	r3, r0, #1
  400d6a:	b2da      	uxtb	r2, r3
  400d6c:	2800      	cmp	r0, #0
  400d6e:	d1ed      	bne.n	400d4c <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  400d70:	4b04      	ldr	r3, [pc, #16]	; (400d84 <_delay_cycles+0x3c>)
  400d72:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  400d74:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  400d76:	4b03      	ldr	r3, [pc, #12]	; (400d84 <_delay_cycles+0x3c>)
  400d78:	681b      	ldr	r3, [r3, #0]
  400d7a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400d7e:	d0fa      	beq.n	400d76 <_delay_cycles+0x2e>
		;
}
  400d80:	4770      	bx	lr
  400d82:	bf00      	nop
  400d84:	e000e010 	.word	0xe000e010

00400d88 <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  400d88:	b510      	push	{r4, lr}
	ASSERT(hw);
  400d8a:	4604      	mov	r4, r0
  400d8c:	f240 2219 	movw	r2, #537	; 0x219
  400d90:	4912      	ldr	r1, [pc, #72]	; (400ddc <_uart_get_hardware_index+0x54>)
  400d92:	3000      	adds	r0, #0
  400d94:	bf18      	it	ne
  400d96:	2001      	movne	r0, #1
  400d98:	4b11      	ldr	r3, [pc, #68]	; (400de0 <_uart_get_hardware_index+0x58>)
  400d9a:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  400d9c:	4b11      	ldr	r3, [pc, #68]	; (400de4 <_uart_get_hardware_index+0x5c>)
  400d9e:	429c      	cmp	r4, r3
  400da0:	d013      	beq.n	400dca <_uart_get_hardware_index+0x42>
		return 0;
	} else if (UART1 == hw) {
  400da2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400da6:	429c      	cmp	r4, r3
  400da8:	d011      	beq.n	400dce <_uart_get_hardware_index+0x46>
		return 1;
	} else if (UART2 == hw) {
  400daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  400dae:	429c      	cmp	r4, r3
  400db0:	d00f      	beq.n	400dd2 <_uart_get_hardware_index+0x4a>
		return 2;
	} else if (UART3 == hw) {
  400db2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400db6:	429c      	cmp	r4, r3
  400db8:	d00d      	beq.n	400dd6 <_uart_get_hardware_index+0x4e>
		return 3;
	} else if (UART4 == hw) {
  400dba:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400dbe:	429c      	cmp	r4, r3
  400dc0:	d001      	beq.n	400dc6 <_uart_get_hardware_index+0x3e>
		return 4;
	} else {
		return ERR_INVALID_DATA;
  400dc2:	20ff      	movs	r0, #255	; 0xff
	}
}
  400dc4:	bd10      	pop	{r4, pc}
		return 4;
  400dc6:	2004      	movs	r0, #4
  400dc8:	bd10      	pop	{r4, pc}
		return 0;
  400dca:	2000      	movs	r0, #0
  400dcc:	bd10      	pop	{r4, pc}
		return 1;
  400dce:	2001      	movs	r0, #1
  400dd0:	bd10      	pop	{r4, pc}
		return 2;
  400dd2:	2002      	movs	r0, #2
  400dd4:	bd10      	pop	{r4, pc}
		return 3;
  400dd6:	2003      	movs	r0, #3
  400dd8:	bd10      	pop	{r4, pc}
  400dda:	bf00      	nop
  400ddc:	00401534 	.word	0x00401534
  400de0:	00400a01 	.word	0x00400a01
  400de4:	400e0800 	.word	0x400e0800

00400de8 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  400de8:	b510      	push	{r4, lr}
	ASSERT(hw);
  400dea:	4604      	mov	r4, r0
  400dec:	f44f 7227 	mov.w	r2, #668	; 0x29c
  400df0:	490e      	ldr	r1, [pc, #56]	; (400e2c <_get_uart_index+0x44>)
  400df2:	3000      	adds	r0, #0
  400df4:	bf18      	it	ne
  400df6:	2001      	movne	r0, #1
  400df8:	4b0d      	ldr	r3, [pc, #52]	; (400e30 <_get_uart_index+0x48>)
  400dfa:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  400dfc:	4620      	mov	r0, r4
  400dfe:	4b0d      	ldr	r3, [pc, #52]	; (400e34 <_get_uart_index+0x4c>)
  400e00:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400e02:	2300      	movs	r3, #0
  400e04:	b143      	cbz	r3, 400e18 <_get_uart_index+0x30>
		if (_uarts[i].number == uart_offset) {
			return i;
		}
	}

	ASSERT(false);
  400e06:	f240 22a6 	movw	r2, #678	; 0x2a6
  400e0a:	4908      	ldr	r1, [pc, #32]	; (400e2c <_get_uart_index+0x44>)
  400e0c:	2000      	movs	r0, #0
  400e0e:	4b08      	ldr	r3, [pc, #32]	; (400e30 <_get_uart_index+0x48>)
  400e10:	4798      	blx	r3
	return 0;
  400e12:	2300      	movs	r3, #0
}
  400e14:	4618      	mov	r0, r3
  400e16:	bd10      	pop	{r4, pc}
		if (_uarts[i].number == uart_offset) {
  400e18:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  400e1c:	008a      	lsls	r2, r1, #2
  400e1e:	4906      	ldr	r1, [pc, #24]	; (400e38 <_get_uart_index+0x50>)
  400e20:	5c8a      	ldrb	r2, [r1, r2]
  400e22:	4290      	cmp	r0, r2
  400e24:	d0f6      	beq.n	400e14 <_get_uart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400e26:	3301      	adds	r3, #1
  400e28:	b2db      	uxtb	r3, r3
  400e2a:	e7eb      	b.n	400e04 <_get_uart_index+0x1c>
  400e2c:	00401534 	.word	0x00401534
  400e30:	00400a01 	.word	0x00400a01
  400e34:	00400d89 	.word	0x00400d89
  400e38:	00401528 	.word	0x00401528

00400e3c <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  400e3c:	b510      	push	{r4, lr}
	ASSERT(hw);
  400e3e:	4604      	mov	r4, r0
  400e40:	f240 22b3 	movw	r2, #691	; 0x2b3
  400e44:	490d      	ldr	r1, [pc, #52]	; (400e7c <_uart_init+0x40>)
  400e46:	3000      	adds	r0, #0
  400e48:	bf18      	it	ne
  400e4a:	2001      	movne	r0, #1
  400e4c:	4b0c      	ldr	r3, [pc, #48]	; (400e80 <_uart_init+0x44>)
  400e4e:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  400e50:	4620      	mov	r0, r4
  400e52:	4b0c      	ldr	r3, [pc, #48]	; (400e84 <_uart_init+0x48>)
  400e54:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  400e56:	4b0c      	ldr	r3, [pc, #48]	; (400e88 <_uart_init+0x4c>)
  400e58:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  400e5c:	23ac      	movs	r3, #172	; 0xac
  400e5e:	6023      	str	r3, [r4, #0]
  400e60:	f44f 7380 	mov.w	r3, #256	; 0x100
  400e64:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  400e66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400e6a:	0082      	lsls	r2, r0, #2
  400e6c:	4b07      	ldr	r3, [pc, #28]	; (400e8c <_uart_init+0x50>)
  400e6e:	4413      	add	r3, r2
  400e70:	685b      	ldr	r3, [r3, #4]
	((Uart *)hw)->UART_MR = data;
  400e72:	6063      	str	r3, [r4, #4]
	((Uart *)hw)->UART_BRGR = data;
  400e74:	23f4      	movs	r3, #244	; 0xf4
  400e76:	6223      	str	r3, [r4, #32]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);

	return ERR_NONE;
}
  400e78:	2000      	movs	r0, #0
  400e7a:	bd10      	pop	{r4, pc}
  400e7c:	00401534 	.word	0x00401534
  400e80:	00400a01 	.word	0x00400a01
  400e84:	00400de9 	.word	0x00400de9
  400e88:	55415200 	.word	0x55415200
  400e8c:	00401528 	.word	0x00401528

00400e90 <_usart_sync_init>:
{
  400e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e92:	460c      	mov	r4, r1
	ASSERT(device);
  400e94:	4e09      	ldr	r6, [pc, #36]	; (400ebc <_usart_sync_init+0x2c>)
  400e96:	4607      	mov	r7, r0
  400e98:	22a9      	movs	r2, #169	; 0xa9
  400e9a:	4631      	mov	r1, r6
  400e9c:	3000      	adds	r0, #0
  400e9e:	bf18      	it	ne
  400ea0:	2001      	movne	r0, #1
  400ea2:	4d07      	ldr	r5, [pc, #28]	; (400ec0 <_usart_sync_init+0x30>)
  400ea4:	47a8      	blx	r5
	ASSERT(hw);
  400ea6:	22aa      	movs	r2, #170	; 0xaa
  400ea8:	4631      	mov	r1, r6
  400eaa:	1c20      	adds	r0, r4, #0
  400eac:	bf18      	it	ne
  400eae:	2001      	movne	r0, #1
  400eb0:	47a8      	blx	r5
	device->hw = hw;
  400eb2:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  400eb4:	4620      	mov	r0, r4
  400eb6:	4b03      	ldr	r3, [pc, #12]	; (400ec4 <_usart_sync_init+0x34>)
  400eb8:	4798      	blx	r3
}
  400eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ebc:	00401534 	.word	0x00401534
  400ec0:	00400a01 	.word	0x00400a01
  400ec4:	00400e3d 	.word	0x00400e3d

00400ec8 <_usart_sync_enable>:
{
  400ec8:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  400eca:	4e0a      	ldr	r6, [pc, #40]	; (400ef4 <_usart_sync_enable+0x2c>)
  400ecc:	4604      	mov	r4, r0
  400ece:	22f2      	movs	r2, #242	; 0xf2
  400ed0:	4631      	mov	r1, r6
  400ed2:	3000      	adds	r0, #0
  400ed4:	bf18      	it	ne
  400ed6:	2001      	movne	r0, #1
  400ed8:	4d07      	ldr	r5, [pc, #28]	; (400ef8 <_usart_sync_enable+0x30>)
  400eda:	47a8      	blx	r5
	_uart_enable(device->hw);
  400edc:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _uart_enable(void *const hw)
{
	ASSERT(hw);
  400ede:	f240 22d7 	movw	r2, #727	; 0x2d7
  400ee2:	4631      	mov	r1, r6
  400ee4:	1c20      	adds	r0, r4, #0
  400ee6:	bf18      	it	ne
  400ee8:	2001      	movne	r0, #1
  400eea:	47a8      	blx	r5
	((Uart *)hw)->UART_CR = data;
  400eec:	2350      	movs	r3, #80	; 0x50
  400eee:	6023      	str	r3, [r4, #0]
  400ef0:	bd70      	pop	{r4, r5, r6, pc}
  400ef2:	bf00      	nop
  400ef4:	00401534 	.word	0x00401534
  400ef8:	00400a01 	.word	0x00400a01

00400efc <_usart_sync_write_byte>:
{
  400efc:	b538      	push	{r3, r4, r5, lr}
  400efe:	460c      	mov	r4, r1
	ASSERT(device);
  400f00:	4605      	mov	r5, r0
  400f02:	f240 1295 	movw	r2, #405	; 0x195
  400f06:	4904      	ldr	r1, [pc, #16]	; (400f18 <_usart_sync_write_byte+0x1c>)
  400f08:	3000      	adds	r0, #0
  400f0a:	bf18      	it	ne
  400f0c:	2001      	movne	r0, #1
  400f0e:	4b03      	ldr	r3, [pc, #12]	; (400f1c <_usart_sync_write_byte+0x20>)
  400f10:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  400f12:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  400f14:	61dc      	str	r4, [r3, #28]
  400f16:	bd38      	pop	{r3, r4, r5, pc}
  400f18:	00401534 	.word	0x00401534
  400f1c:	00400a01 	.word	0x00400a01

00400f20 <_usart_sync_read_byte>:
{
  400f20:	b510      	push	{r4, lr}
	ASSERT(device);
  400f22:	4604      	mov	r4, r0
  400f24:	f240 12a7 	movw	r2, #423	; 0x1a7
  400f28:	4904      	ldr	r1, [pc, #16]	; (400f3c <_usart_sync_read_byte+0x1c>)
  400f2a:	3000      	adds	r0, #0
  400f2c:	bf18      	it	ne
  400f2e:	2001      	movne	r0, #1
  400f30:	4b03      	ldr	r3, [pc, #12]	; (400f40 <_usart_sync_read_byte+0x20>)
  400f32:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  400f34:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  400f36:	6998      	ldr	r0, [r3, #24]
}
  400f38:	b2c0      	uxtb	r0, r0
  400f3a:	bd10      	pop	{r4, pc}
  400f3c:	00401534 	.word	0x00401534
  400f40:	00400a01 	.word	0x00400a01

00400f44 <_usart_sync_is_ready_to_send>:
{
  400f44:	b510      	push	{r4, lr}
	ASSERT(device);
  400f46:	4604      	mov	r4, r0
  400f48:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  400f4c:	4905      	ldr	r1, [pc, #20]	; (400f64 <_usart_sync_is_ready_to_send+0x20>)
  400f4e:	3000      	adds	r0, #0
  400f50:	bf18      	it	ne
  400f52:	2001      	movne	r0, #1
  400f54:	4b04      	ldr	r3, [pc, #16]	; (400f68 <_usart_sync_is_ready_to_send+0x24>)
  400f56:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  400f58:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  400f5a:	6958      	ldr	r0, [r3, #20]
}
  400f5c:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400f60:	bd10      	pop	{r4, pc}
  400f62:	bf00      	nop
  400f64:	00401534 	.word	0x00401534
  400f68:	00400a01 	.word	0x00400a01

00400f6c <_usart_sync_is_transmit_done>:
{
  400f6c:	b510      	push	{r4, lr}
	ASSERT(device);
  400f6e:	4604      	mov	r4, r0
  400f70:	f240 12b9 	movw	r2, #441	; 0x1b9
  400f74:	4905      	ldr	r1, [pc, #20]	; (400f8c <_usart_sync_is_transmit_done+0x20>)
  400f76:	3000      	adds	r0, #0
  400f78:	bf18      	it	ne
  400f7a:	2001      	movne	r0, #1
  400f7c:	4b04      	ldr	r3, [pc, #16]	; (400f90 <_usart_sync_is_transmit_done+0x24>)
  400f7e:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  400f80:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  400f82:	6958      	ldr	r0, [r3, #20]
}
  400f84:	f3c0 2040 	ubfx	r0, r0, #9, #1
  400f88:	bd10      	pop	{r4, pc}
  400f8a:	bf00      	nop
  400f8c:	00401534 	.word	0x00401534
  400f90:	00400a01 	.word	0x00400a01

00400f94 <_usart_sync_is_byte_received>:
{
  400f94:	b510      	push	{r4, lr}
	ASSERT(device);
  400f96:	4604      	mov	r4, r0
  400f98:	f240 12cb 	movw	r2, #459	; 0x1cb
  400f9c:	4905      	ldr	r1, [pc, #20]	; (400fb4 <_usart_sync_is_byte_received+0x20>)
  400f9e:	3000      	adds	r0, #0
  400fa0:	bf18      	it	ne
  400fa2:	2001      	movne	r0, #1
  400fa4:	4b04      	ldr	r3, [pc, #16]	; (400fb8 <_usart_sync_is_byte_received+0x24>)
  400fa6:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  400fa8:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  400faa:	6958      	ldr	r0, [r3, #20]
  400fac:	f000 0001 	and.w	r0, r0, #1
}
  400fb0:	bd10      	pop	{r4, pc}
  400fb2:	bf00      	nop
  400fb4:	00401534 	.word	0x00401534
  400fb8:	00400a01 	.word	0x00400a01

00400fbc <_uart_get_usart_sync>:
}
  400fbc:	2000      	movs	r0, #0
  400fbe:	4770      	bx	lr

00400fc0 <print_uart_func>:
	}
}


void print_uart_func(uint8_t* string, int len)
{
  400fc0:	b570      	push	{r4, r5, r6, lr}
  400fc2:	b082      	sub	sp, #8
  400fc4:	4605      	mov	r5, r0
  400fc6:	460e      	mov	r6, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&USART_1, &io);
  400fc8:	4c07      	ldr	r4, [pc, #28]	; (400fe8 <print_uart_func+0x28>)
  400fca:	a901      	add	r1, sp, #4
  400fcc:	4620      	mov	r0, r4
  400fce:	4b07      	ldr	r3, [pc, #28]	; (400fec <print_uart_func+0x2c>)
  400fd0:	4798      	blx	r3
	usart_sync_enable(&USART_1);
  400fd2:	4620      	mov	r0, r4
  400fd4:	4b06      	ldr	r3, [pc, #24]	; (400ff0 <print_uart_func+0x30>)
  400fd6:	4798      	blx	r3

	io_write(io, string, len);
  400fd8:	b2b2      	uxth	r2, r6
  400fda:	4629      	mov	r1, r5
  400fdc:	9801      	ldr	r0, [sp, #4]
  400fde:	4b05      	ldr	r3, [pc, #20]	; (400ff4 <print_uart_func+0x34>)
  400fe0:	4798      	blx	r3
}
  400fe2:	b002      	add	sp, #8
  400fe4:	bd70      	pop	{r4, r5, r6, pc}
  400fe6:	bf00      	nop
  400fe8:	20400038 	.word	0x20400038
  400fec:	004009d9 	.word	0x004009d9
  400ff0:	004009ad 	.word	0x004009ad
  400ff4:	004006e9 	.word	0x004006e9

00400ff8 <main>:
{
  400ff8:	b530      	push	{r4, r5, lr}
  400ffa:	b087      	sub	sp, #28
	atmel_start_init();
  400ffc:	4b12      	ldr	r3, [pc, #72]	; (401048 <main+0x50>)
  400ffe:	4798      	blx	r3
  401000:	e00d      	b.n	40101e <main+0x26>
			print_uart(&measured_voltages[i]);
  401002:	2104      	movs	r1, #4
  401004:	eb0d 0044 	add.w	r0, sp, r4, lsl #1
  401008:	4d10      	ldr	r5, [pc, #64]	; (40104c <main+0x54>)
  40100a:	47a8      	blx	r5
			print_uart(newline);
  40100c:	2104      	movs	r1, #4
  40100e:	4810      	ldr	r0, [pc, #64]	; (401050 <main+0x58>)
  401010:	47a8      	blx	r5
		for(int i = 0; i < 12; i++){
  401012:	3401      	adds	r4, #1
  401014:	2c0b      	cmp	r4, #11
  401016:	ddf4      	ble.n	401002 <main+0xa>
		delay_ms(100);
  401018:	2064      	movs	r0, #100	; 0x64
  40101a:	4b0e      	ldr	r3, [pc, #56]	; (401054 <main+0x5c>)
  40101c:	4798      	blx	r3
		print_uart(newline);
  40101e:	4d0c      	ldr	r5, [pc, #48]	; (401050 <main+0x58>)
  401020:	2104      	movs	r1, #4
  401022:	4628      	mov	r0, r5
  401024:	4c09      	ldr	r4, [pc, #36]	; (40104c <main+0x54>)
  401026:	47a0      	blx	r4
		print_uart(10);
  401028:	2104      	movs	r1, #4
  40102a:	200a      	movs	r0, #10
  40102c:	47a0      	blx	r4
		print_uart(newline);
  40102e:	2104      	movs	r1, #4
  401030:	4628      	mov	r0, r5
  401032:	47a0      	blx	r4
		start_cell_voltages_conversion();
  401034:	4b08      	ldr	r3, [pc, #32]	; (401058 <main+0x60>)
  401036:	4798      	blx	r3
		delay_ms(20);
  401038:	2014      	movs	r0, #20
  40103a:	4b06      	ldr	r3, [pc, #24]	; (401054 <main+0x5c>)
  40103c:	4798      	blx	r3
		get_cell_voltages(&measured_voltages);
  40103e:	4668      	mov	r0, sp
  401040:	4b06      	ldr	r3, [pc, #24]	; (40105c <main+0x64>)
  401042:	4798      	blx	r3
		for(int i = 0; i < 12; i++){
  401044:	2400      	movs	r4, #0
  401046:	e7e5      	b.n	401014 <main+0x1c>
  401048:	004001d5 	.word	0x004001d5
  40104c:	00400fc1 	.word	0x00400fc1
  401050:	0040154c 	.word	0x0040154c
  401054:	004006c9 	.word	0x004006c9
  401058:	00400309 	.word	0x00400309
  40105c:	004003b9 	.word	0x004003b9

00401060 <__libc_init_array>:
  401060:	b570      	push	{r4, r5, r6, lr}
  401062:	4e0d      	ldr	r6, [pc, #52]	; (401098 <__libc_init_array+0x38>)
  401064:	4c0d      	ldr	r4, [pc, #52]	; (40109c <__libc_init_array+0x3c>)
  401066:	1ba4      	subs	r4, r4, r6
  401068:	10a4      	asrs	r4, r4, #2
  40106a:	2500      	movs	r5, #0
  40106c:	42a5      	cmp	r5, r4
  40106e:	d109      	bne.n	401084 <__libc_init_array+0x24>
  401070:	4e0b      	ldr	r6, [pc, #44]	; (4010a0 <__libc_init_array+0x40>)
  401072:	4c0c      	ldr	r4, [pc, #48]	; (4010a4 <__libc_init_array+0x44>)
  401074:	f000 fa6c 	bl	401550 <_init>
  401078:	1ba4      	subs	r4, r4, r6
  40107a:	10a4      	asrs	r4, r4, #2
  40107c:	2500      	movs	r5, #0
  40107e:	42a5      	cmp	r5, r4
  401080:	d105      	bne.n	40108e <__libc_init_array+0x2e>
  401082:	bd70      	pop	{r4, r5, r6, pc}
  401084:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401088:	4798      	blx	r3
  40108a:	3501      	adds	r5, #1
  40108c:	e7ee      	b.n	40106c <__libc_init_array+0xc>
  40108e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401092:	4798      	blx	r3
  401094:	3501      	adds	r5, #1
  401096:	e7f2      	b.n	40107e <__libc_init_array+0x1e>
  401098:	0040155c 	.word	0x0040155c
  40109c:	0040155c 	.word	0x0040155c
  4010a0:	0040155c 	.word	0x0040155c
  4010a4:	00401560 	.word	0x00401560

004010a8 <crc15Table>:
  4010a8:	00000000 0000c599 0000ceab 00000b32     ............2...
  4010b8:	0000d8cf 00001d56 00001664 0000d3fd     ....V...d.......
  4010c8:	0000f407 0000319e 00003aac 0000ff35     .....1...:..5...
  4010d8:	00002cc8 0000e951 0000e263 000027fa     .,..Q...c....'..
  4010e8:	0000ad97 0000680e 0000633c 0000a6a5     .....h..<c......
  4010f8:	00007558 0000b0c1 0000bbf3 00007e6a     Xu..........j~..
  401108:	00005990 00009c09 0000973b 000052a2     .Y......;....R..
  401118:	0000815f 000044c6 00004ff4 00008a6d     _....D...O..m...
  401128:	00005b2e 00009eb7 00009585 0000501c     .[...........P..
  401138:	000083e1 00004678 00004d4a 000088d3     ....xF..JM......
  401148:	0000af29 00006ab0 00006182 0000a41b     )....j...a......
  401158:	000077e6 0000b27f 0000b94d 00007cd4     .w......M....|..
  401168:	0000f6b9 00003320 00003812 0000fd8b     .... 3...8......
  401178:	00002e76 0000ebef 0000e0dd 00002544     v...........D%..
  401188:	000002be 0000c727 0000cc15 0000098c     ....'...........
  401198:	0000da71 00001fe8 000014da 0000d143     q...........C...
  4011a8:	0000f3c5 0000365c 00003d6e 0000f8f7     ....\6..n=......
  4011b8:	00002b0a 0000ee93 0000e5a1 00002038     .+..........8 ..
  4011c8:	000007c2 0000c25b 0000c969 00000cf0     ....[...i.......
  4011d8:	0000df0d 00001a94 000011a6 0000d43f     ............?...
  4011e8:	00005e52 00009bcb 000090f9 00005560     R^..........`U..
  4011f8:	0000869d 00004304 00004836 00008daf     .....C..6H......
  401208:	0000aa55 00006fcc 000064fe 0000a167     U....o...d..g...
  401218:	0000729a 0000b703 0000bc31 000079a8     .r......1....y..
  401228:	0000a8eb 00006d72 00006640 0000a3d9     ....rm..@f......
  401238:	00007024 0000b5bd 0000be8f 00007b16     $p...........{..
  401248:	00005cec 00009975 00009247 000057de     .\..u...G....W..
  401258:	00008423 000041ba 00004a88 00008f11     #....A...J......
  401268:	0000057c 0000c0e5 0000cbd7 00000e4e     |...........N...
  401278:	0000ddb3 0000182a 00001318 0000d681     ....*...........
  401288:	0000f17b 000034e2 00003fd0 0000fa49     {....4...?..I...
  401298:	000029b4 0000ec2d 0000e71f 00002286     .)..-........"..
  4012a8:	0000a213 0000678a 00006cb8 0000a921     .....g...l..!...
  4012b8:	00007adc 0000bf45 0000b477 000071ee     .z..E...w....q..
  4012c8:	00005614 0000938d 000098bf 00005d26     .V..........&]..
  4012d8:	00008edb 00004b42 00004070 000085e9     ....BK..p@......
  4012e8:	00000f84 0000ca1d 0000c12f 000004b6     ......../.......
  4012f8:	0000d74b 000012d2 000019e0 0000dc79     K...........y...
  401308:	0000fb83 00003e1a 00003528 0000f0b1     .....>..(5......
  401318:	0000234c 0000e6d5 0000ede7 0000287e     L#..........~(..
  401328:	0000f93d 00003ca4 00003796 0000f20f     =....<...7......
  401338:	000021f2 0000e46b 0000ef59 00002ac0     .!..k...Y....*..
  401348:	00000d3a 0000c8a3 0000c391 00000608     :...............
  401358:	0000d5f5 0000106c 00001b5e 0000dec7     ....l...^.......
  401368:	000054aa 00009133 00009a01 00005f98     .T..3........_..
  401378:	00008c65 000049fc 000042ce 00008757     e....I...B..W...
  401388:	0000a0ad 00006534 00006e06 0000ab9f     ....4e...n......
  401398:	00007862 0000bdfb 0000b6c9 00007350     bx..........Ps..
  4013a8:	000051d6 0000944f 00009f7d 00005ae4     .Q..O...}....Z..
  4013b8:	00008919 00004c80 000047b2 0000822b     .....L...G..+...
  4013c8:	0000a5d1 00006048 00006b7a 0000aee3     ....H`..zk......
  4013d8:	00007d1e 0000b887 0000b3b5 0000762c     .}..........,v..
  4013e8:	0000fc41 000039d8 000032ea 0000f773     A....9...2..s...
  4013f8:	0000248e 0000e117 0000ea25 00002fbc     .$......%..../..
  401408:	00000846 0000cddf 0000c6ed 00000374     F...........t...
  401418:	0000d089 00001510 00001e22 0000dbbb     ........".......
  401428:	00000af8 0000cf61 0000c453 000001ca     ....a...S.......
  401438:	0000d237 000017ae 00001c9c 0000d905     7...............
  401448:	0000feff 00003b66 00003054 0000f5cd     ....f;..T0......
  401458:	00002630 0000e3a9 0000e89b 00002d02     0&...........-..
  401468:	0000a76f 000062f6 000069c4 0000ac5d     o....b...i..]...
  401478:	00007fa0 0000ba39 0000b10b 00007492     ....9........t..
  401488:	00005368 000096f1 00009dc3 0000585a     hS..........ZX..
  401498:	00008ba7 00004e3e 0000450c 00008095     ....>N...E......
  4014a8:	65706f4e 00000a31 682f2e2e 732f6c61     Nope1...../hal/s
  4014b8:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
  4014c8:	732f6c61 682f6372 735f6c61 6d5f6970     al/src/hal_spi_m
  4014d8:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
  4014e8:	682f6372 755f6c61 74726173 6e79735f     rc/hal_usart_syn
  4014f8:	00632e63                                c.c.

004014fc <spi_regs>:
  4014fc:	00000001 80000000 00000001 0496dc02     ................
  40150c:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  40151c:	735f6c70 632e6970 00000000              pl_spi.c....

00401528 <_uarts>:
  401528:	00000001 00000800 000000f4 682f2e2e     ............../h
  401538:	752f6c70 2f747261 5f6c7068 74726175     pl/uart/hpl_uart
  401548:	0000632e 0000000a                       .c......

00401550 <_init>:
  401550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401552:	bf00      	nop
  401554:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401556:	bc08      	pop	{r3}
  401558:	469e      	mov	lr, r3
  40155a:	4770      	bx	lr

0040155c <__init_array_start>:
  40155c:	0040018d 	.word	0x0040018d

00401560 <_fini>:
  401560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401562:	bf00      	nop
  401564:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401566:	bc08      	pop	{r3}
  401568:	469e      	mov	lr, r3
  40156a:	4770      	bx	lr

0040156c <__fini_array_start>:
  40156c:	00400169 	.word	0x00400169
