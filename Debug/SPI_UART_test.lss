
SPI_UART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce4  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20400000  20400000  00010ce4  2**0
                  CONTENTS
  2 .bss          00000044  20400000  20400000  00020000  2**2
                  ALLOC
  3 .heap         00000204  20400044  20400044  00020000  2**0
                  ALLOC
  4 .stack        00000400  20400248  20400248  00020000  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00010ce4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00010d12  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000ed56  00000000  00000000  00010d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002239  00000000  00000000  0001fac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000611a  00000000  00000000  00021cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000808  00000000  00000000  00027e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000780  00000000  00000000  0002861c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003d1f7  00000000  00000000  00028d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e675  00000000  00000000  00065f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001459a0  00000000  00000000  00074608  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001510  00000000  00000000  001b9fa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 06 40 20 05 02 40 00 01 02 40 00 01 02 40 00     H.@ ..@...@...@.
  400010:	01 02 40 00 01 02 40 00 01 02 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	01 02 40 00 01 02 40 00 00 00 00 00 01 02 40 00     ..@...@.......@.
  40003c:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  40004c:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  40005c:	01 02 40 00 01 02 40 00 00 00 00 00 01 02 40 00     ..@...@.......@.
  40006c:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  40007c:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  40008c:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  40009c:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  4000ac:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  4000bc:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  4000cc:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  4000dc:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  4000ec:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  4000fc:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  40010c:	01 02 40 00 01 02 40 00 01 02 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 01 02 40 00 01 02 40 00 01 02 40 00     ......@...@...@.
  40012c:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  40013c:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  40014c:	01 02 40 00 01 02 40 00 01 02 40 00 01 02 40 00     ..@...@...@...@.
  40015c:	01 02 40 00 01 02 40 00 01 02 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400000 	.word	0x20400000
  400184:	00000000 	.word	0x00000000
  400188:	00400ce4 	.word	0x00400ce4

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00400ce4 	.word	0x00400ce4
  4001c8:	20400004 	.word	0x20400004
  4001cc:	00400ce4 	.word	0x00400ce4
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	004003c9 	.word	0x004003c9

004001e0 <enable_cs>:
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
	((Pio *)hw)->PIO_CODR = mask;
  4001e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4001e4:	4b01      	ldr	r3, [pc, #4]	; (4001ec <enable_cs+0xc>)
  4001e6:	635a      	str	r2, [r3, #52]	; 0x34
  4001e8:	4770      	bx	lr
  4001ea:	bf00      	nop
  4001ec:	400e1200 	.word	0x400e1200

004001f0 <disable_cs>:
	((Pio *)hw)->PIO_SODR = mask;
  4001f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4001f4:	4b01      	ldr	r3, [pc, #4]	; (4001fc <disable_cs+0xc>)
  4001f6:	631a      	str	r2, [r3, #48]	; 0x30
  4001f8:	4770      	bx	lr
  4001fa:	bf00      	nop
  4001fc:	400e1200 	.word	0x400e1200

00400200 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400200:	e7fe      	b.n	400200 <Dummy_Handler>
	...

00400204 <Reset_Handler>:
{
  400204:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400206:	4b10      	ldr	r3, [pc, #64]	; (400248 <Reset_Handler+0x44>)
  400208:	4a10      	ldr	r2, [pc, #64]	; (40024c <Reset_Handler+0x48>)
  40020a:	429a      	cmp	r2, r3
  40020c:	d009      	beq.n	400222 <Reset_Handler+0x1e>
  40020e:	4b0e      	ldr	r3, [pc, #56]	; (400248 <Reset_Handler+0x44>)
  400210:	4a0e      	ldr	r2, [pc, #56]	; (40024c <Reset_Handler+0x48>)
  400212:	e003      	b.n	40021c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400214:	6811      	ldr	r1, [r2, #0]
  400216:	6019      	str	r1, [r3, #0]
  400218:	3304      	adds	r3, #4
  40021a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  40021c:	490c      	ldr	r1, [pc, #48]	; (400250 <Reset_Handler+0x4c>)
  40021e:	428b      	cmp	r3, r1
  400220:	d3f8      	bcc.n	400214 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400222:	4b0c      	ldr	r3, [pc, #48]	; (400254 <Reset_Handler+0x50>)
  400224:	e002      	b.n	40022c <Reset_Handler+0x28>
                *pDest++ = 0;
  400226:	2200      	movs	r2, #0
  400228:	601a      	str	r2, [r3, #0]
  40022a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40022c:	4a0a      	ldr	r2, [pc, #40]	; (400258 <Reset_Handler+0x54>)
  40022e:	4293      	cmp	r3, r2
  400230:	d3f9      	bcc.n	400226 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400232:	4a0a      	ldr	r2, [pc, #40]	; (40025c <Reset_Handler+0x58>)
  400234:	4b0a      	ldr	r3, [pc, #40]	; (400260 <Reset_Handler+0x5c>)
  400236:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40023a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40023c:	4b09      	ldr	r3, [pc, #36]	; (400264 <Reset_Handler+0x60>)
  40023e:	4798      	blx	r3
        main();
  400240:	4b09      	ldr	r3, [pc, #36]	; (400268 <Reset_Handler+0x64>)
  400242:	4798      	blx	r3
  400244:	e7fe      	b.n	400244 <Reset_Handler+0x40>
  400246:	bf00      	nop
  400248:	20400000 	.word	0x20400000
  40024c:	00400ce4 	.word	0x00400ce4
  400250:	20400000 	.word	0x20400000
  400254:	20400000 	.word	0x20400000
  400258:	20400044 	.word	0x20400044
  40025c:	e000ed00 	.word	0xe000ed00
  400260:	00400000 	.word	0x00400000
  400264:	00400bf5 	.word	0x00400bf5
  400268:	00400bc9 	.word	0x00400bc9

0040026c <SPI_1_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40026c:	4b1a      	ldr	r3, [pc, #104]	; (4002d8 <SPI_1_PORT_init+0x6c>)
  40026e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400270:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  400274:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400276:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400278:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
  40027c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40027e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400282:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400286:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  40028a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40028c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40028e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
  400292:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400294:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400298:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40029a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40029c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4002a0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002a4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  4002a8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4002ae:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_PER = mask;
  4002b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002b8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  4002bc:	6719      	str	r1, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002be:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002c0:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  4002c4:	6759      	str	r1, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4002ca:	6059      	str	r1, [r3, #4]
	((Pio *)hw)->PIO_OER = mask;
  4002cc:	611a      	str	r2, [r3, #16]
  4002ce:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  4002d0:	6319      	str	r1, [r3, #48]	; 0x30
  4002d2:	631a      	str	r2, [r3, #48]	; 0x30
  4002d4:	4770      	bx	lr
  4002d6:	bf00      	nop
  4002d8:	400e1200 	.word	0x400e1200

004002dc <SPI_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4002dc:	4b05      	ldr	r3, [pc, #20]	; (4002f4 <SPI_1_CLOCK_init+0x18>)
  4002de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4002e2:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4002e6:	d104      	bne.n	4002f2 <SPI_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4002e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4002ec:	4b01      	ldr	r3, [pc, #4]	; (4002f4 <SPI_1_CLOCK_init+0x18>)
  4002ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4002f2:	4770      	bx	lr
  4002f4:	400e0600 	.word	0x400e0600

004002f8 <SPI_1_init>:

/**
 * @brief Initialize SPI1 peripheral
 */
void SPI_1_init(void)
{
  4002f8:	b510      	push	{r4, lr}
	SPI_1_CLOCK_init();
  4002fa:	4b08      	ldr	r3, [pc, #32]	; (40031c <SPI_1_init+0x24>)
  4002fc:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_1, _spi_get_spi_m_sync());
  4002fe:	4b08      	ldr	r3, [pc, #32]	; (400320 <SPI_1_init+0x28>)
  400300:	4798      	blx	r3
  400302:	4c08      	ldr	r4, [pc, #32]	; (400324 <SPI_1_init+0x2c>)
  400304:	4601      	mov	r1, r0
  400306:	4620      	mov	r0, r4
  400308:	4b07      	ldr	r3, [pc, #28]	; (400328 <SPI_1_init+0x30>)
  40030a:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SPI1);
  40030c:	4907      	ldr	r1, [pc, #28]	; (40032c <SPI_1_init+0x34>)
  40030e:	4620      	mov	r0, r4
  400310:	4b07      	ldr	r3, [pc, #28]	; (400330 <SPI_1_init+0x38>)
  400312:	4798      	blx	r3
	SPI_1_PORT_init();
  400314:	4b07      	ldr	r3, [pc, #28]	; (400334 <SPI_1_init+0x3c>)
  400316:	4798      	blx	r3
  400318:	bd10      	pop	{r4, pc}
  40031a:	bf00      	nop
  40031c:	004002dd 	.word	0x004002dd
  400320:	00400961 	.word	0x00400961
  400324:	20400020 	.word	0x20400020
  400328:	0040044d 	.word	0x0040044d
  40032c:	40058000 	.word	0x40058000
  400330:	0040046d 	.word	0x0040046d
  400334:	0040026d 	.word	0x0040026d

00400338 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400338:	b508      	push	{r3, lr}
	delay_init(SysTick);
  40033a:	4802      	ldr	r0, [pc, #8]	; (400344 <delay_driver_init+0xc>)
  40033c:	4b02      	ldr	r3, [pc, #8]	; (400348 <delay_driver_init+0x10>)
  40033e:	4798      	blx	r3
  400340:	bd08      	pop	{r3, pc}
  400342:	bf00      	nop
  400344:	e000e010 	.word	0xe000e010
  400348:	00400419 	.word	0x00400419

0040034c <USART_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40034c:	4b0a      	ldr	r3, [pc, #40]	; (400378 <USART_1_PORT_init+0x2c>)
  40034e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400350:	f022 0220 	bic.w	r2, r2, #32
  400354:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400356:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400358:	f042 0220 	orr.w	r2, r2, #32
  40035c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40035e:	2220      	movs	r2, #32
  400360:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  400368:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40036a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40036c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  400370:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400372:	2240      	movs	r2, #64	; 0x40
  400374:	605a      	str	r2, [r3, #4]
  400376:	4770      	bx	lr
  400378:	400e0e00 	.word	0x400e0e00

0040037c <USART_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40037c:	4b04      	ldr	r3, [pc, #16]	; (400390 <USART_1_CLOCK_init+0x14>)
  40037e:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400380:	f413 7f80 	tst.w	r3, #256	; 0x100
  400384:	d103      	bne.n	40038e <USART_1_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400386:	f44f 7280 	mov.w	r2, #256	; 0x100
  40038a:	4b01      	ldr	r3, [pc, #4]	; (400390 <USART_1_CLOCK_init+0x14>)
  40038c:	611a      	str	r2, [r3, #16]
  40038e:	4770      	bx	lr
  400390:	400e0600 	.word	0x400e0600

00400394 <USART_1_init>:
{
	_pmc_enable_periph_clock(ID_UART1);
}

void USART_1_init(void)
{
  400394:	b508      	push	{r3, lr}
	USART_1_CLOCK_init();
  400396:	4b06      	ldr	r3, [pc, #24]	; (4003b0 <USART_1_init+0x1c>)
  400398:	4798      	blx	r3
	usart_sync_init(&USART_1, UART1, _uart_get_usart_sync());
  40039a:	4b06      	ldr	r3, [pc, #24]	; (4003b4 <USART_1_init+0x20>)
  40039c:	4798      	blx	r3
  40039e:	4602      	mov	r2, r0
  4003a0:	4905      	ldr	r1, [pc, #20]	; (4003b8 <USART_1_init+0x24>)
  4003a2:	4806      	ldr	r0, [pc, #24]	; (4003bc <USART_1_init+0x28>)
  4003a4:	4b06      	ldr	r3, [pc, #24]	; (4003c0 <USART_1_init+0x2c>)
  4003a6:	4798      	blx	r3
	USART_1_PORT_init();
  4003a8:	4b06      	ldr	r3, [pc, #24]	; (4003c4 <USART_1_init+0x30>)
  4003aa:	4798      	blx	r3
  4003ac:	bd08      	pop	{r3, pc}
  4003ae:	bf00      	nop
  4003b0:	0040037d 	.word	0x0040037d
  4003b4:	00400bc5 	.word	0x00400bc5
  4003b8:	400e0a00 	.word	0x400e0a00
  4003bc:	20400038 	.word	0x20400038
  4003c0:	00400645 	.word	0x00400645
  4003c4:	0040034d 	.word	0x0040034d

004003c8 <system_init>:
}

void system_init(void)
{
  4003c8:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4003ca:	4b07      	ldr	r3, [pc, #28]	; (4003e8 <system_init+0x20>)
  4003cc:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4003ce:	4a07      	ldr	r2, [pc, #28]	; (4003ec <system_init+0x24>)
  4003d0:	6853      	ldr	r3, [r2, #4]
  4003d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4003d6:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	SPI_1_init();
  4003d8:	4b05      	ldr	r3, [pc, #20]	; (4003f0 <system_init+0x28>)
  4003da:	4798      	blx	r3

	delay_driver_init();
  4003dc:	4b05      	ldr	r3, [pc, #20]	; (4003f4 <system_init+0x2c>)
  4003de:	4798      	blx	r3

	USART_1_init();
  4003e0:	4b05      	ldr	r3, [pc, #20]	; (4003f8 <system_init+0x30>)
  4003e2:	4798      	blx	r3
  4003e4:	bd08      	pop	{r3, pc}
  4003e6:	bf00      	nop
  4003e8:	0040069d 	.word	0x0040069d
  4003ec:	400e1850 	.word	0x400e1850
  4003f0:	004002f9 	.word	0x004002f9
  4003f4:	00400339 	.word	0x00400339
  4003f8:	00400395 	.word	0x00400395

004003fc <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003fc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400400:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400402:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400404:	f3bf 8f5f 	dmb	sy
  400408:	4770      	bx	lr

0040040a <atomic_leave_critical>:
  40040a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40040e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400410:	f383 8810 	msr	PRIMASK, r3
  400414:	4770      	bx	lr
	...

00400418 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400418:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  40041a:	4b02      	ldr	r3, [pc, #8]	; (400424 <delay_init+0xc>)
  40041c:	6018      	str	r0, [r3, #0]
  40041e:	4b02      	ldr	r3, [pc, #8]	; (400428 <delay_init+0x10>)
  400420:	4798      	blx	r3
  400422:	bd08      	pop	{r3, pc}
  400424:	2040001c 	.word	0x2040001c
  400428:	00400979 	.word	0x00400979

0040042c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  40042c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  40042e:	4b04      	ldr	r3, [pc, #16]	; (400440 <delay_us+0x14>)
  400430:	681c      	ldr	r4, [r3, #0]
  400432:	4b04      	ldr	r3, [pc, #16]	; (400444 <delay_us+0x18>)
  400434:	4798      	blx	r3
  400436:	4601      	mov	r1, r0
  400438:	4620      	mov	r0, r4
  40043a:	4b03      	ldr	r3, [pc, #12]	; (400448 <delay_us+0x1c>)
  40043c:	4798      	blx	r3
  40043e:	bd10      	pop	{r4, pc}
  400440:	2040001c 	.word	0x2040001c
  400444:	00400693 	.word	0x00400693
  400448:	00400985 	.word	0x00400985

0040044c <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  40044c:	b538      	push	{r3, r4, r5, lr}
  40044e:	460d      	mov	r5, r1
	ASSERT(spi);
  400450:	4604      	mov	r4, r0
  400452:	2239      	movs	r2, #57	; 0x39
  400454:	4903      	ldr	r1, [pc, #12]	; (400464 <spi_m_sync_set_func_ptr+0x18>)
  400456:	3000      	adds	r0, #0
  400458:	bf18      	it	ne
  40045a:	2001      	movne	r0, #1
  40045c:	4b02      	ldr	r3, [pc, #8]	; (400468 <spi_m_sync_set_func_ptr+0x1c>)
  40045e:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400460:	6025      	str	r5, [r4, #0]
  400462:	bd38      	pop	{r3, r4, r5, pc}
  400464:	00400c3c 	.word	0x00400c3c
  400468:	0040068d 	.word	0x0040068d

0040046c <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  40046c:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  40046e:	4604      	mov	r4, r0
  400470:	460d      	mov	r5, r1
  400472:	2800      	cmp	r0, #0
  400474:	bf18      	it	ne
  400476:	2900      	cmpne	r1, #0
  400478:	bf14      	ite	ne
  40047a:	2001      	movne	r0, #1
  40047c:	2000      	moveq	r0, #0
  40047e:	2240      	movs	r2, #64	; 0x40
  400480:	4909      	ldr	r1, [pc, #36]	; (4004a8 <spi_m_sync_init+0x3c>)
  400482:	4b0a      	ldr	r3, [pc, #40]	; (4004ac <spi_m_sync_init+0x40>)
  400484:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400486:	4620      	mov	r0, r4
  400488:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  40048c:	4629      	mov	r1, r5
  40048e:	4b08      	ldr	r3, [pc, #32]	; (4004b0 <spi_m_sync_init+0x44>)
  400490:	4798      	blx	r3

	if (rc < 0) {
  400492:	2800      	cmp	r0, #0
  400494:	db07      	blt.n	4004a6 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40049a:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  40049c:	4b05      	ldr	r3, [pc, #20]	; (4004b4 <spi_m_sync_init+0x48>)
  40049e:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  4004a0:	4b05      	ldr	r3, [pc, #20]	; (4004b8 <spi_m_sync_init+0x4c>)
  4004a2:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  4004a4:	2000      	movs	r0, #0
}
  4004a6:	bd38      	pop	{r3, r4, r5, pc}
  4004a8:	00400c3c 	.word	0x00400c3c
  4004ac:	0040068d 	.word	0x0040068d
  4004b0:	004007b9 	.word	0x004007b9
  4004b4:	00400539 	.word	0x00400539
  4004b8:	004004fd 	.word	0x004004fd

004004bc <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  4004bc:	b530      	push	{r4, r5, lr}
  4004be:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  4004c0:	4605      	mov	r5, r0
  4004c2:	460c      	mov	r4, r1
  4004c4:	2800      	cmp	r0, #0
  4004c6:	bf18      	it	ne
  4004c8:	2900      	cmpne	r1, #0
  4004ca:	bf14      	ite	ne
  4004cc:	2001      	movne	r0, #1
  4004ce:	2000      	moveq	r0, #0
  4004d0:	22b3      	movs	r2, #179	; 0xb3
  4004d2:	4907      	ldr	r1, [pc, #28]	; (4004f0 <spi_m_sync_transfer+0x34>)
  4004d4:	4b07      	ldr	r3, [pc, #28]	; (4004f4 <spi_m_sync_transfer+0x38>)
  4004d6:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  4004d8:	6823      	ldr	r3, [r4, #0]
  4004da:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  4004dc:	6863      	ldr	r3, [r4, #4]
  4004de:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  4004e0:	68a3      	ldr	r3, [r4, #8]
  4004e2:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  4004e4:	a901      	add	r1, sp, #4
  4004e6:	1d28      	adds	r0, r5, #4
  4004e8:	4b03      	ldr	r3, [pc, #12]	; (4004f8 <spi_m_sync_transfer+0x3c>)
  4004ea:	4798      	blx	r3
}
  4004ec:	b005      	add	sp, #20
  4004ee:	bd30      	pop	{r4, r5, pc}
  4004f0:	00400c3c 	.word	0x00400c3c
  4004f4:	0040068d 	.word	0x0040068d
  4004f8:	00400861 	.word	0x00400861

004004fc <_spi_m_sync_io_write>:
{
  4004fc:	b570      	push	{r4, r5, r6, lr}
  4004fe:	b084      	sub	sp, #16
  400500:	460e      	mov	r6, r1
  400502:	4615      	mov	r5, r2
	ASSERT(io);
  400504:	4604      	mov	r4, r0
  400506:	22a3      	movs	r2, #163	; 0xa3
  400508:	4908      	ldr	r1, [pc, #32]	; (40052c <_spi_m_sync_io_write+0x30>)
  40050a:	3000      	adds	r0, #0
  40050c:	bf18      	it	ne
  40050e:	2001      	movne	r0, #1
  400510:	4b07      	ldr	r3, [pc, #28]	; (400530 <_spi_m_sync_io_write+0x34>)
  400512:	4798      	blx	r3
	xfer.rxbuf = 0;
  400514:	2300      	movs	r3, #0
  400516:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400518:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  40051a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  40051c:	a901      	add	r1, sp, #4
  40051e:	f1a4 000c 	sub.w	r0, r4, #12
  400522:	4b04      	ldr	r3, [pc, #16]	; (400534 <_spi_m_sync_io_write+0x38>)
  400524:	4798      	blx	r3
}
  400526:	b004      	add	sp, #16
  400528:	bd70      	pop	{r4, r5, r6, pc}
  40052a:	bf00      	nop
  40052c:	00400c3c 	.word	0x00400c3c
  400530:	0040068d 	.word	0x0040068d
  400534:	004004bd 	.word	0x004004bd

00400538 <_spi_m_sync_io_read>:
{
  400538:	b570      	push	{r4, r5, r6, lr}
  40053a:	b084      	sub	sp, #16
  40053c:	460e      	mov	r6, r1
  40053e:	4615      	mov	r5, r2
	ASSERT(io);
  400540:	4604      	mov	r4, r0
  400542:	2287      	movs	r2, #135	; 0x87
  400544:	4908      	ldr	r1, [pc, #32]	; (400568 <_spi_m_sync_io_read+0x30>)
  400546:	3000      	adds	r0, #0
  400548:	bf18      	it	ne
  40054a:	2001      	movne	r0, #1
  40054c:	4b07      	ldr	r3, [pc, #28]	; (40056c <_spi_m_sync_io_read+0x34>)
  40054e:	4798      	blx	r3
	xfer.rxbuf = buf;
  400550:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400552:	2300      	movs	r3, #0
  400554:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400556:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400558:	a901      	add	r1, sp, #4
  40055a:	f1a4 000c 	sub.w	r0, r4, #12
  40055e:	4b04      	ldr	r3, [pc, #16]	; (400570 <_spi_m_sync_io_read+0x38>)
  400560:	4798      	blx	r3
}
  400562:	b004      	add	sp, #16
  400564:	bd70      	pop	{r4, r5, r6, pc}
  400566:	bf00      	nop
  400568:	00400c3c 	.word	0x00400c3c
  40056c:	0040068d 	.word	0x0040068d
  400570:	004004bd 	.word	0x004004bd

00400574 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400576:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400578:	4605      	mov	r5, r0
  40057a:	460f      	mov	r7, r1
  40057c:	2800      	cmp	r0, #0
  40057e:	bf18      	it	ne
  400580:	2900      	cmpne	r1, #0
  400582:	d002      	beq.n	40058a <usart_sync_write+0x16>
  400584:	bb0a      	cbnz	r2, 4005ca <usart_sync_write+0x56>
  400586:	2000      	movs	r0, #0
  400588:	e000      	b.n	40058c <usart_sync_write+0x18>
  40058a:	2000      	movs	r0, #0
  40058c:	22f1      	movs	r2, #241	; 0xf1
  40058e:	4910      	ldr	r1, [pc, #64]	; (4005d0 <usart_sync_write+0x5c>)
  400590:	4b10      	ldr	r3, [pc, #64]	; (4005d4 <usart_sync_write+0x60>)
  400592:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400594:	f105 0408 	add.w	r4, r5, #8
  400598:	4620      	mov	r0, r4
  40059a:	4b0f      	ldr	r3, [pc, #60]	; (4005d8 <usart_sync_write+0x64>)
  40059c:	4798      	blx	r3
  40059e:	2800      	cmp	r0, #0
  4005a0:	d0f8      	beq.n	400594 <usart_sync_write+0x20>
  4005a2:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4005a4:	5d79      	ldrb	r1, [r7, r5]
  4005a6:	4620      	mov	r0, r4
  4005a8:	4b0c      	ldr	r3, [pc, #48]	; (4005dc <usart_sync_write+0x68>)
  4005aa:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4005ac:	4620      	mov	r0, r4
  4005ae:	4b0a      	ldr	r3, [pc, #40]	; (4005d8 <usart_sync_write+0x64>)
  4005b0:	4798      	blx	r3
  4005b2:	2800      	cmp	r0, #0
  4005b4:	d0fa      	beq.n	4005ac <usart_sync_write+0x38>
			;
	} while (++offset < length);
  4005b6:	3501      	adds	r5, #1
  4005b8:	42b5      	cmp	r5, r6
  4005ba:	d3f3      	bcc.n	4005a4 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  4005bc:	4620      	mov	r0, r4
  4005be:	4b08      	ldr	r3, [pc, #32]	; (4005e0 <usart_sync_write+0x6c>)
  4005c0:	4798      	blx	r3
  4005c2:	2800      	cmp	r0, #0
  4005c4:	d0fa      	beq.n	4005bc <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  4005c6:	4628      	mov	r0, r5
  4005c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  4005ca:	2001      	movs	r0, #1
  4005cc:	e7de      	b.n	40058c <usart_sync_write+0x18>
  4005ce:	bf00      	nop
  4005d0:	00400c58 	.word	0x00400c58
  4005d4:	0040068d 	.word	0x0040068d
  4005d8:	00400b4d 	.word	0x00400b4d
  4005dc:	00400b05 	.word	0x00400b05
  4005e0:	00400b75 	.word	0x00400b75

004005e4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4005e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005e8:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4005ea:	4605      	mov	r5, r0
  4005ec:	4688      	mov	r8, r1
  4005ee:	2800      	cmp	r0, #0
  4005f0:	bf18      	it	ne
  4005f2:	2900      	cmpne	r1, #0
  4005f4:	d002      	beq.n	4005fc <usart_sync_read+0x18>
  4005f6:	b9d2      	cbnz	r2, 40062e <usart_sync_read+0x4a>
  4005f8:	2000      	movs	r0, #0
  4005fa:	e000      	b.n	4005fe <usart_sync_read+0x1a>
  4005fc:	2000      	movs	r0, #0
  4005fe:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400602:	490c      	ldr	r1, [pc, #48]	; (400634 <usart_sync_read+0x50>)
  400604:	4b0c      	ldr	r3, [pc, #48]	; (400638 <usart_sync_read+0x54>)
  400606:	4798      	blx	r3
	uint32_t                      offset = 0;
  400608:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  40060a:	f105 0408 	add.w	r4, r5, #8
  40060e:	4620      	mov	r0, r4
  400610:	4b0a      	ldr	r3, [pc, #40]	; (40063c <usart_sync_read+0x58>)
  400612:	4798      	blx	r3
  400614:	2800      	cmp	r0, #0
  400616:	d0f8      	beq.n	40060a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400618:	4620      	mov	r0, r4
  40061a:	4b09      	ldr	r3, [pc, #36]	; (400640 <usart_sync_read+0x5c>)
  40061c:	4798      	blx	r3
  40061e:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400622:	3601      	adds	r6, #1
  400624:	42be      	cmp	r6, r7
  400626:	d3f0      	bcc.n	40060a <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400628:	4630      	mov	r0, r6
  40062a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  40062e:	2001      	movs	r0, #1
  400630:	e7e5      	b.n	4005fe <usart_sync_read+0x1a>
  400632:	bf00      	nop
  400634:	00400c58 	.word	0x00400c58
  400638:	0040068d 	.word	0x0040068d
  40063c:	00400b9d 	.word	0x00400b9d
  400640:	00400b29 	.word	0x00400b29

00400644 <usart_sync_init>:
{
  400644:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400646:	4604      	mov	r4, r0
  400648:	460d      	mov	r5, r1
  40064a:	2800      	cmp	r0, #0
  40064c:	bf18      	it	ne
  40064e:	2900      	cmpne	r1, #0
  400650:	bf14      	ite	ne
  400652:	2001      	movne	r0, #1
  400654:	2000      	moveq	r0, #0
  400656:	2234      	movs	r2, #52	; 0x34
  400658:	4907      	ldr	r1, [pc, #28]	; (400678 <usart_sync_init+0x34>)
  40065a:	4b08      	ldr	r3, [pc, #32]	; (40067c <usart_sync_init+0x38>)
  40065c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  40065e:	4629      	mov	r1, r5
  400660:	f104 0008 	add.w	r0, r4, #8
  400664:	4b06      	ldr	r3, [pc, #24]	; (400680 <usart_sync_init+0x3c>)
  400666:	4798      	blx	r3
	if (init_status) {
  400668:	4603      	mov	r3, r0
  40066a:	b918      	cbnz	r0, 400674 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  40066c:	4a05      	ldr	r2, [pc, #20]	; (400684 <usart_sync_init+0x40>)
  40066e:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400670:	4a05      	ldr	r2, [pc, #20]	; (400688 <usart_sync_init+0x44>)
  400672:	6022      	str	r2, [r4, #0]
}
  400674:	4618      	mov	r0, r3
  400676:	bd38      	pop	{r3, r4, r5, pc}
  400678:	00400c58 	.word	0x00400c58
  40067c:	0040068d 	.word	0x0040068d
  400680:	00400acd 	.word	0x00400acd
  400684:	004005e5 	.word	0x004005e5
  400688:	00400575 	.word	0x00400575

0040068c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  40068c:	b900      	cbnz	r0, 400690 <assert+0x4>
		__asm("BKPT #0");
  40068e:	be00      	bkpt	0x0000
  400690:	4770      	bx	lr

00400692 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400692:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400696:	fb03 f000 	mul.w	r0, r3, r0
  40069a:	4770      	bx	lr

0040069c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  40069c:	b500      	push	{lr}
  40069e:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4006a0:	a801      	add	r0, sp, #4
  4006a2:	4b0e      	ldr	r3, [pc, #56]	; (4006dc <_init_chip+0x40>)
  4006a4:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4006a6:	4a0e      	ldr	r2, [pc, #56]	; (4006e0 <_init_chip+0x44>)
  4006a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4006ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4006b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4006b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006b8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4006bc:	a801      	add	r0, sp, #4
  4006be:	4b09      	ldr	r3, [pc, #36]	; (4006e4 <_init_chip+0x48>)
  4006c0:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4006c2:	4a09      	ldr	r2, [pc, #36]	; (4006e8 <_init_chip+0x4c>)
  4006c4:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4006c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4006ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  4006ce:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  4006d0:	4b06      	ldr	r3, [pc, #24]	; (4006ec <_init_chip+0x50>)
  4006d2:	4798      	blx	r3
}
  4006d4:	b003      	add	sp, #12
  4006d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4006da:	bf00      	nop
  4006dc:	004003fd 	.word	0x004003fd
  4006e0:	e000ed00 	.word	0xe000ed00
  4006e4:	0040040b 	.word	0x0040040b
  4006e8:	400e0c00 	.word	0x400e0c00
  4006ec:	0040078d 	.word	0x0040078d

004006f0 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4006f0:	490e      	ldr	r1, [pc, #56]	; (40072c <_pmc_init_sources+0x3c>)
  4006f2:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  4006f4:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  4006f8:	4b0d      	ldr	r3, [pc, #52]	; (400730 <_pmc_init_sources+0x40>)
  4006fa:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4006fc:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  4006fe:	4b0b      	ldr	r3, [pc, #44]	; (40072c <_pmc_init_sources+0x3c>)
  400700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400702:	f013 0f01 	tst.w	r3, #1
  400706:	d0fa      	beq.n	4006fe <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400708:	4b08      	ldr	r3, [pc, #32]	; (40072c <_pmc_init_sources+0x3c>)
  40070a:	6a19      	ldr	r1, [r3, #32]
  40070c:	4a09      	ldr	r2, [pc, #36]	; (400734 <_pmc_init_sources+0x44>)
  40070e:	430a      	orrs	r2, r1
  400710:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400712:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400714:	4a08      	ldr	r2, [pc, #32]	; (400738 <_pmc_init_sources+0x48>)
  400716:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400718:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40071a:	4a08      	ldr	r2, [pc, #32]	; (40073c <_pmc_init_sources+0x4c>)
  40071c:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40071e:	4b03      	ldr	r3, [pc, #12]	; (40072c <_pmc_init_sources+0x3c>)
  400720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400722:	f013 0f02 	tst.w	r3, #2
  400726:	d0fa      	beq.n	40071e <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400728:	4770      	bx	lr
  40072a:	bf00      	nop
  40072c:	400e0600 	.word	0x400e0600
  400730:	00373e01 	.word	0x00373e01
  400734:	01370000 	.word	0x01370000
  400738:	f800ffff 	.word	0xf800ffff
  40073c:	20183f01 	.word	0x20183f01

00400740 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400740:	4a11      	ldr	r2, [pc, #68]	; (400788 <_pmc_init_master_clock+0x48>)
  400742:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400748:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40074a:	4b0f      	ldr	r3, [pc, #60]	; (400788 <_pmc_init_master_clock+0x48>)
  40074c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40074e:	f013 0f08 	tst.w	r3, #8
  400752:	d0fa      	beq.n	40074a <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400754:	4a0c      	ldr	r2, [pc, #48]	; (400788 <_pmc_init_master_clock+0x48>)
  400756:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  40075c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400760:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400762:	4b09      	ldr	r3, [pc, #36]	; (400788 <_pmc_init_master_clock+0x48>)
  400764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400766:	f013 0f08 	tst.w	r3, #8
  40076a:	d0fa      	beq.n	400762 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40076c:	4a06      	ldr	r2, [pc, #24]	; (400788 <_pmc_init_master_clock+0x48>)
  40076e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400770:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400774:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400778:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40077a:	4b03      	ldr	r3, [pc, #12]	; (400788 <_pmc_init_master_clock+0x48>)
  40077c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40077e:	f013 0f08 	tst.w	r3, #8
  400782:	d0fa      	beq.n	40077a <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400784:	4770      	bx	lr
  400786:	bf00      	nop
  400788:	400e0600 	.word	0x400e0600

0040078c <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  40078c:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40078e:	4b02      	ldr	r3, [pc, #8]	; (400798 <_pmc_init+0xc>)
  400790:	4798      	blx	r3
	_pmc_init_master_clock();
  400792:	4b02      	ldr	r3, [pc, #8]	; (40079c <_pmc_init+0x10>)
  400794:	4798      	blx	r3
  400796:	bd08      	pop	{r3, pc}
  400798:	004006f1 	.word	0x004006f1
  40079c:	00400741 	.word	0x00400741

004007a0 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  4007a0:	4b04      	ldr	r3, [pc, #16]	; (4007b4 <_spi_get_hardware_index+0x14>)
  4007a2:	4403      	add	r3, r0
  4007a4:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  4007a8:	2b05      	cmp	r3, #5
  4007aa:	d001      	beq.n	4007b0 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  4007ac:	2000      	movs	r0, #0
	}
}
  4007ae:	4770      	bx	lr
		return 1;
  4007b0:	2001      	movs	r0, #1
  4007b2:	4770      	bx	lr
  4007b4:	bfff8000 	.word	0xbfff8000

004007b8 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  4007b8:	b570      	push	{r4, r5, r6, lr}
  4007ba:	4606      	mov	r6, r0
  4007bc:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  4007be:	4608      	mov	r0, r1
  4007c0:	4b20      	ldr	r3, [pc, #128]	; (400844 <_spi_m_sync_init+0x8c>)
  4007c2:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4007c4:	2300      	movs	r3, #0
  4007c6:	b33b      	cbz	r3, 400818 <_spi_m_sync_init+0x60>
	return NULL;
  4007c8:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  4007ca:	f44f 729a 	mov.w	r2, #308	; 0x134
  4007ce:	491e      	ldr	r1, [pc, #120]	; (400848 <_spi_m_sync_init+0x90>)
  4007d0:	2e00      	cmp	r6, #0
  4007d2:	bf18      	it	ne
  4007d4:	2c00      	cmpne	r4, #0
  4007d6:	bf14      	ite	ne
  4007d8:	2001      	movne	r0, #1
  4007da:	2000      	moveq	r0, #0
  4007dc:	4b1b      	ldr	r3, [pc, #108]	; (40084c <_spi_m_sync_init+0x94>)
  4007de:	4798      	blx	r3

	if (regs == NULL) {
  4007e0:	b355      	cbz	r5, 400838 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  4007e2:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  4007e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4007e8:	d129      	bne.n	40083e <_spi_m_sync_init+0x86>
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  4007ea:	2380      	movs	r3, #128	; 0x80
  4007ec:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  4007ee:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  4007f0:	686a      	ldr	r2, [r5, #4]
  4007f2:	4b17      	ldr	r3, [pc, #92]	; (400850 <_spi_m_sync_init+0x98>)
  4007f4:	4013      	ands	r3, r2
  4007f6:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  4007f8:	68ab      	ldr	r3, [r5, #8]
  4007fa:	4a16      	ldr	r2, [pc, #88]	; (400854 <_spi_m_sync_init+0x9c>)
  4007fc:	401a      	ands	r2, r3
  4007fe:	4b16      	ldr	r3, [pc, #88]	; (400858 <_spi_m_sync_init+0xa0>)
  400800:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  400802:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  400804:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  400806:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  400808:	8a2b      	ldrh	r3, [r5, #16]
  40080a:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  40080c:	68eb      	ldr	r3, [r5, #12]
  40080e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  400812:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  400814:	2000      	movs	r0, #0
  400816:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  400818:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40081c:	008a      	lsls	r2, r1, #2
  40081e:	490f      	ldr	r1, [pc, #60]	; (40085c <_spi_m_sync_init+0xa4>)
  400820:	5c8a      	ldrb	r2, [r1, r2]
  400822:	4290      	cmp	r0, r2
  400824:	d002      	beq.n	40082c <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400826:	3301      	adds	r3, #1
  400828:	b2db      	uxtb	r3, r3
  40082a:	e7cc      	b.n	4007c6 <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  40082c:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  400830:	00ab      	lsls	r3, r5, #2
  400832:	460d      	mov	r5, r1
  400834:	441d      	add	r5, r3
  400836:	e7c8      	b.n	4007ca <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  400838:	f06f 000c 	mvn.w	r0, #12
  40083c:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  40083e:	f06f 0010 	mvn.w	r0, #16
}
  400842:	bd70      	pop	{r4, r5, r6, pc}
  400844:	004007a1 	.word	0x004007a1
  400848:	00400c88 	.word	0x00400c88
  40084c:	0040068d 	.word	0x0040068d
  400850:	feffff7c 	.word	0xfeffff7c
  400854:	fff1ff6f 	.word	0xfff1ff6f
  400858:	000e0010 	.word	0x000e0010
  40085c:	00400c74 	.word	0x00400c74

00400860 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  400860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400864:	b086      	sub	sp, #24
  400866:	4607      	mov	r7, r0
  400868:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  40086a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  40086c:	680b      	ldr	r3, [r1, #0]
  40086e:	9301      	str	r3, [sp, #4]
  400870:	684b      	ldr	r3, [r1, #4]
  400872:	9302      	str	r3, [sp, #8]
  400874:	2300      	movs	r3, #0
  400876:	9303      	str	r3, [sp, #12]
  400878:	9304      	str	r3, [sp, #16]
  40087a:	7903      	ldrb	r3, [r0, #4]
  40087c:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  400880:	1c26      	adds	r6, r4, #0
  400882:	bf18      	it	ne
  400884:	2601      	movne	r6, #1
  400886:	f240 2231 	movw	r2, #561	; 0x231
  40088a:	4933      	ldr	r1, [pc, #204]	; (400958 <_spi_m_sync_trans+0xf8>)
  40088c:	2800      	cmp	r0, #0
  40088e:	bf0c      	ite	eq
  400890:	2000      	moveq	r0, #0
  400892:	f006 0001 	andne.w	r0, r6, #1
  400896:	4b31      	ldr	r3, [pc, #196]	; (40095c <_spi_m_sync_trans+0xfc>)
  400898:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  40089a:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  40089c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4008a0:	d122      	bne.n	4008e8 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  4008a2:	f06f 0013 	mvn.w	r0, #19
  4008a6:	e053      	b.n	400950 <_spi_m_sync_trans+0xf0>
		return false;
  4008a8:	2300      	movs	r3, #0
  4008aa:	e035      	b.n	400918 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  4008ac:	7850      	ldrb	r0, [r2, #1]
  4008ae:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  4008b2:	3202      	adds	r2, #2
  4008b4:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  4008b6:	3301      	adds	r3, #1
  4008b8:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  4008ba:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  4008bc:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  4008c0:	f240 2222 	movw	r2, #546	; 0x222
  4008c4:	4924      	ldr	r1, [pc, #144]	; (400958 <_spi_m_sync_trans+0xf8>)
  4008c6:	4630      	mov	r0, r6
  4008c8:	4b24      	ldr	r3, [pc, #144]	; (40095c <_spi_m_sync_trans+0xfc>)
  4008ca:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  4008cc:	f018 0f08 	tst.w	r8, #8
  4008d0:	d038      	beq.n	400944 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  4008d2:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  4008d6:	2800      	cmp	r0, #0
  4008d8:	db36      	blt.n	400948 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  4008da:	9803      	ldr	r0, [sp, #12]
  4008dc:	68ab      	ldr	r3, [r5, #8]
  4008de:	4298      	cmp	r0, r3
  4008e0:	d302      	bcc.n	4008e8 <_spi_m_sync_trans+0x88>
  4008e2:	9a04      	ldr	r2, [sp, #16]
  4008e4:	4293      	cmp	r3, r2
  4008e6:	d92f      	bls.n	400948 <_spi_m_sync_trans+0xe8>
  4008e8:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  4008ea:	f013 0f01 	tst.w	r3, #1
  4008ee:	d0db      	beq.n	4008a8 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  4008f0:	68a3      	ldr	r3, [r4, #8]
  4008f2:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  4008f4:	9a02      	ldr	r2, [sp, #8]
  4008f6:	b15a      	cbz	r2, 400910 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  4008f8:	1c51      	adds	r1, r2, #1
  4008fa:	9102      	str	r1, [sp, #8]
  4008fc:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  4008fe:	f89d 2014 	ldrb.w	r2, [sp, #20]
  400902:	2a01      	cmp	r2, #1
  400904:	d904      	bls.n	400910 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  400906:	460a      	mov	r2, r1
  400908:	3101      	adds	r1, #1
  40090a:	9102      	str	r1, [sp, #8]
  40090c:	0a1b      	lsrs	r3, r3, #8
  40090e:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  400910:	9b04      	ldr	r3, [sp, #16]
  400912:	3301      	adds	r3, #1
  400914:	9304      	str	r3, [sp, #16]
	return true;
  400916:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  400918:	2b00      	cmp	r3, #0
  40091a:	d1cf      	bne.n	4008bc <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  40091c:	9b03      	ldr	r3, [sp, #12]
  40091e:	9a04      	ldr	r2, [sp, #16]
  400920:	429a      	cmp	r2, r3
  400922:	d3cb      	bcc.n	4008bc <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  400924:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  400926:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  400928:	f012 0f02 	tst.w	r2, #2
  40092c:	d0c6      	beq.n	4008bc <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  40092e:	9a01      	ldr	r2, [sp, #4]
  400930:	2a00      	cmp	r2, #0
  400932:	d0c0      	beq.n	4008b6 <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  400934:	1c51      	adds	r1, r2, #1
  400936:	9101      	str	r1, [sp, #4]
  400938:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  40093a:	f89d 0014 	ldrb.w	r0, [sp, #20]
  40093e:	2801      	cmp	r0, #1
  400940:	d8b4      	bhi.n	4008ac <_spi_m_sync_trans+0x4c>
  400942:	e7b8      	b.n	4008b6 <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  400944:	2000      	movs	r0, #0
  400946:	e7c6      	b.n	4008d6 <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  400948:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  40094a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40094e:	d0fb      	beq.n	400948 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  400950:	b006      	add	sp, #24
  400952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400956:	bf00      	nop
  400958:	00400c88 	.word	0x00400c88
  40095c:	0040068d 	.word	0x0040068d

00400960 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  400960:	2000      	movs	r0, #0
  400962:	4770      	bx	lr

00400964 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  400964:	4b03      	ldr	r3, [pc, #12]	; (400974 <_system_time_init+0x10>)
  400966:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  40096a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  40096c:	2205      	movs	r2, #5
  40096e:	601a      	str	r2, [r3, #0]
  400970:	4770      	bx	lr
  400972:	bf00      	nop
  400974:	e000e010 	.word	0xe000e010

00400978 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  400978:	b508      	push	{r3, lr}
	_system_time_init(hw);
  40097a:	4b01      	ldr	r3, [pc, #4]	; (400980 <_delay_init+0x8>)
  40097c:	4798      	blx	r3
  40097e:	bd08      	pop	{r3, pc}
  400980:	00400965 	.word	0x00400965

00400984 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  400984:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  400986:	e00d      	b.n	4009a4 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  400988:	4b0d      	ldr	r3, [pc, #52]	; (4009c0 <_delay_cycles+0x3c>)
  40098a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  40098e:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  400990:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  400992:	4b0b      	ldr	r3, [pc, #44]	; (4009c0 <_delay_cycles+0x3c>)
  400994:	681b      	ldr	r3, [r3, #0]
  400996:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40099a:	d0fa      	beq.n	400992 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  40099c:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4009a0:	3101      	adds	r1, #1
	while (n--) {
  4009a2:	4610      	mov	r0, r2
  4009a4:	1e43      	subs	r3, r0, #1
  4009a6:	b2da      	uxtb	r2, r3
  4009a8:	2800      	cmp	r0, #0
  4009aa:	d1ed      	bne.n	400988 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4009ac:	4b04      	ldr	r3, [pc, #16]	; (4009c0 <_delay_cycles+0x3c>)
  4009ae:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4009b0:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4009b2:	4b03      	ldr	r3, [pc, #12]	; (4009c0 <_delay_cycles+0x3c>)
  4009b4:	681b      	ldr	r3, [r3, #0]
  4009b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4009ba:	d0fa      	beq.n	4009b2 <_delay_cycles+0x2e>
		;
}
  4009bc:	4770      	bx	lr
  4009be:	bf00      	nop
  4009c0:	e000e010 	.word	0xe000e010

004009c4 <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  4009c4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4009c6:	4604      	mov	r4, r0
  4009c8:	f240 2219 	movw	r2, #537	; 0x219
  4009cc:	4912      	ldr	r1, [pc, #72]	; (400a18 <_uart_get_hardware_index+0x54>)
  4009ce:	3000      	adds	r0, #0
  4009d0:	bf18      	it	ne
  4009d2:	2001      	movne	r0, #1
  4009d4:	4b11      	ldr	r3, [pc, #68]	; (400a1c <_uart_get_hardware_index+0x58>)
  4009d6:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  4009d8:	4b11      	ldr	r3, [pc, #68]	; (400a20 <_uart_get_hardware_index+0x5c>)
  4009da:	429c      	cmp	r4, r3
  4009dc:	d013      	beq.n	400a06 <_uart_get_hardware_index+0x42>
		return 0;
	} else if (UART1 == hw) {
  4009de:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4009e2:	429c      	cmp	r4, r3
  4009e4:	d011      	beq.n	400a0a <_uart_get_hardware_index+0x46>
		return 1;
	} else if (UART2 == hw) {
  4009e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4009ea:	429c      	cmp	r4, r3
  4009ec:	d00f      	beq.n	400a0e <_uart_get_hardware_index+0x4a>
		return 2;
	} else if (UART3 == hw) {
  4009ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4009f2:	429c      	cmp	r4, r3
  4009f4:	d00d      	beq.n	400a12 <_uart_get_hardware_index+0x4e>
		return 3;
	} else if (UART4 == hw) {
  4009f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4009fa:	429c      	cmp	r4, r3
  4009fc:	d001      	beq.n	400a02 <_uart_get_hardware_index+0x3e>
		return 4;
	} else {
		return ERR_INVALID_DATA;
  4009fe:	20ff      	movs	r0, #255	; 0xff
	}
}
  400a00:	bd10      	pop	{r4, pc}
		return 4;
  400a02:	2004      	movs	r0, #4
  400a04:	bd10      	pop	{r4, pc}
		return 0;
  400a06:	2000      	movs	r0, #0
  400a08:	bd10      	pop	{r4, pc}
		return 1;
  400a0a:	2001      	movs	r0, #1
  400a0c:	bd10      	pop	{r4, pc}
		return 2;
  400a0e:	2002      	movs	r0, #2
  400a10:	bd10      	pop	{r4, pc}
		return 3;
  400a12:	2003      	movs	r0, #3
  400a14:	bd10      	pop	{r4, pc}
  400a16:	bf00      	nop
  400a18:	00400cac 	.word	0x00400cac
  400a1c:	0040068d 	.word	0x0040068d
  400a20:	400e0800 	.word	0x400e0800

00400a24 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  400a24:	b510      	push	{r4, lr}
	ASSERT(hw);
  400a26:	4604      	mov	r4, r0
  400a28:	f44f 7227 	mov.w	r2, #668	; 0x29c
  400a2c:	490e      	ldr	r1, [pc, #56]	; (400a68 <_get_uart_index+0x44>)
  400a2e:	3000      	adds	r0, #0
  400a30:	bf18      	it	ne
  400a32:	2001      	movne	r0, #1
  400a34:	4b0d      	ldr	r3, [pc, #52]	; (400a6c <_get_uart_index+0x48>)
  400a36:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  400a38:	4620      	mov	r0, r4
  400a3a:	4b0d      	ldr	r3, [pc, #52]	; (400a70 <_get_uart_index+0x4c>)
  400a3c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400a3e:	2300      	movs	r3, #0
  400a40:	b143      	cbz	r3, 400a54 <_get_uart_index+0x30>
		if (_uarts[i].number == uart_offset) {
			return i;
		}
	}

	ASSERT(false);
  400a42:	f240 22a6 	movw	r2, #678	; 0x2a6
  400a46:	4908      	ldr	r1, [pc, #32]	; (400a68 <_get_uart_index+0x44>)
  400a48:	2000      	movs	r0, #0
  400a4a:	4b08      	ldr	r3, [pc, #32]	; (400a6c <_get_uart_index+0x48>)
  400a4c:	4798      	blx	r3
	return 0;
  400a4e:	2300      	movs	r3, #0
}
  400a50:	4618      	mov	r0, r3
  400a52:	bd10      	pop	{r4, pc}
		if (_uarts[i].number == uart_offset) {
  400a54:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  400a58:	008a      	lsls	r2, r1, #2
  400a5a:	4906      	ldr	r1, [pc, #24]	; (400a74 <_get_uart_index+0x50>)
  400a5c:	5c8a      	ldrb	r2, [r1, r2]
  400a5e:	4290      	cmp	r0, r2
  400a60:	d0f6      	beq.n	400a50 <_get_uart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400a62:	3301      	adds	r3, #1
  400a64:	b2db      	uxtb	r3, r3
  400a66:	e7eb      	b.n	400a40 <_get_uart_index+0x1c>
  400a68:	00400cac 	.word	0x00400cac
  400a6c:	0040068d 	.word	0x0040068d
  400a70:	004009c5 	.word	0x004009c5
  400a74:	00400ca0 	.word	0x00400ca0

00400a78 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  400a78:	b510      	push	{r4, lr}
	ASSERT(hw);
  400a7a:	4604      	mov	r4, r0
  400a7c:	f240 22b3 	movw	r2, #691	; 0x2b3
  400a80:	490d      	ldr	r1, [pc, #52]	; (400ab8 <_uart_init+0x40>)
  400a82:	3000      	adds	r0, #0
  400a84:	bf18      	it	ne
  400a86:	2001      	movne	r0, #1
  400a88:	4b0c      	ldr	r3, [pc, #48]	; (400abc <_uart_init+0x44>)
  400a8a:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  400a8c:	4620      	mov	r0, r4
  400a8e:	4b0c      	ldr	r3, [pc, #48]	; (400ac0 <_uart_init+0x48>)
  400a90:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  400a92:	4b0c      	ldr	r3, [pc, #48]	; (400ac4 <_uart_init+0x4c>)
  400a94:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  400a98:	23ac      	movs	r3, #172	; 0xac
  400a9a:	6023      	str	r3, [r4, #0]
  400a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
  400aa0:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  400aa2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400aa6:	0082      	lsls	r2, r0, #2
  400aa8:	4b07      	ldr	r3, [pc, #28]	; (400ac8 <_uart_init+0x50>)
  400aaa:	4413      	add	r3, r2
  400aac:	685b      	ldr	r3, [r3, #4]
	((Uart *)hw)->UART_MR = data;
  400aae:	6063      	str	r3, [r4, #4]
	((Uart *)hw)->UART_BRGR = data;
  400ab0:	23f4      	movs	r3, #244	; 0xf4
  400ab2:	6223      	str	r3, [r4, #32]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);

	return ERR_NONE;
}
  400ab4:	2000      	movs	r0, #0
  400ab6:	bd10      	pop	{r4, pc}
  400ab8:	00400cac 	.word	0x00400cac
  400abc:	0040068d 	.word	0x0040068d
  400ac0:	00400a25 	.word	0x00400a25
  400ac4:	55415200 	.word	0x55415200
  400ac8:	00400ca0 	.word	0x00400ca0

00400acc <_usart_sync_init>:
{
  400acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ace:	460c      	mov	r4, r1
	ASSERT(device);
  400ad0:	4e09      	ldr	r6, [pc, #36]	; (400af8 <_usart_sync_init+0x2c>)
  400ad2:	4607      	mov	r7, r0
  400ad4:	22a9      	movs	r2, #169	; 0xa9
  400ad6:	4631      	mov	r1, r6
  400ad8:	3000      	adds	r0, #0
  400ada:	bf18      	it	ne
  400adc:	2001      	movne	r0, #1
  400ade:	4d07      	ldr	r5, [pc, #28]	; (400afc <_usart_sync_init+0x30>)
  400ae0:	47a8      	blx	r5
	ASSERT(hw);
  400ae2:	22aa      	movs	r2, #170	; 0xaa
  400ae4:	4631      	mov	r1, r6
  400ae6:	1c20      	adds	r0, r4, #0
  400ae8:	bf18      	it	ne
  400aea:	2001      	movne	r0, #1
  400aec:	47a8      	blx	r5
	device->hw = hw;
  400aee:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  400af0:	4620      	mov	r0, r4
  400af2:	4b03      	ldr	r3, [pc, #12]	; (400b00 <_usart_sync_init+0x34>)
  400af4:	4798      	blx	r3
}
  400af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400af8:	00400cac 	.word	0x00400cac
  400afc:	0040068d 	.word	0x0040068d
  400b00:	00400a79 	.word	0x00400a79

00400b04 <_usart_sync_write_byte>:
{
  400b04:	b538      	push	{r3, r4, r5, lr}
  400b06:	460c      	mov	r4, r1
	ASSERT(device);
  400b08:	4605      	mov	r5, r0
  400b0a:	f240 1295 	movw	r2, #405	; 0x195
  400b0e:	4904      	ldr	r1, [pc, #16]	; (400b20 <_usart_sync_write_byte+0x1c>)
  400b10:	3000      	adds	r0, #0
  400b12:	bf18      	it	ne
  400b14:	2001      	movne	r0, #1
  400b16:	4b03      	ldr	r3, [pc, #12]	; (400b24 <_usart_sync_write_byte+0x20>)
  400b18:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  400b1a:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  400b1c:	61dc      	str	r4, [r3, #28]
  400b1e:	bd38      	pop	{r3, r4, r5, pc}
  400b20:	00400cac 	.word	0x00400cac
  400b24:	0040068d 	.word	0x0040068d

00400b28 <_usart_sync_read_byte>:
{
  400b28:	b510      	push	{r4, lr}
	ASSERT(device);
  400b2a:	4604      	mov	r4, r0
  400b2c:	f240 12a7 	movw	r2, #423	; 0x1a7
  400b30:	4904      	ldr	r1, [pc, #16]	; (400b44 <_usart_sync_read_byte+0x1c>)
  400b32:	3000      	adds	r0, #0
  400b34:	bf18      	it	ne
  400b36:	2001      	movne	r0, #1
  400b38:	4b03      	ldr	r3, [pc, #12]	; (400b48 <_usart_sync_read_byte+0x20>)
  400b3a:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  400b3c:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  400b3e:	6998      	ldr	r0, [r3, #24]
}
  400b40:	b2c0      	uxtb	r0, r0
  400b42:	bd10      	pop	{r4, pc}
  400b44:	00400cac 	.word	0x00400cac
  400b48:	0040068d 	.word	0x0040068d

00400b4c <_usart_sync_is_ready_to_send>:
{
  400b4c:	b510      	push	{r4, lr}
	ASSERT(device);
  400b4e:	4604      	mov	r4, r0
  400b50:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  400b54:	4905      	ldr	r1, [pc, #20]	; (400b6c <_usart_sync_is_ready_to_send+0x20>)
  400b56:	3000      	adds	r0, #0
  400b58:	bf18      	it	ne
  400b5a:	2001      	movne	r0, #1
  400b5c:	4b04      	ldr	r3, [pc, #16]	; (400b70 <_usart_sync_is_ready_to_send+0x24>)
  400b5e:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  400b60:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  400b62:	6958      	ldr	r0, [r3, #20]
}
  400b64:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400b68:	bd10      	pop	{r4, pc}
  400b6a:	bf00      	nop
  400b6c:	00400cac 	.word	0x00400cac
  400b70:	0040068d 	.word	0x0040068d

00400b74 <_usart_sync_is_transmit_done>:
{
  400b74:	b510      	push	{r4, lr}
	ASSERT(device);
  400b76:	4604      	mov	r4, r0
  400b78:	f240 12b9 	movw	r2, #441	; 0x1b9
  400b7c:	4905      	ldr	r1, [pc, #20]	; (400b94 <_usart_sync_is_transmit_done+0x20>)
  400b7e:	3000      	adds	r0, #0
  400b80:	bf18      	it	ne
  400b82:	2001      	movne	r0, #1
  400b84:	4b04      	ldr	r3, [pc, #16]	; (400b98 <_usart_sync_is_transmit_done+0x24>)
  400b86:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  400b88:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  400b8a:	6958      	ldr	r0, [r3, #20]
}
  400b8c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  400b90:	bd10      	pop	{r4, pc}
  400b92:	bf00      	nop
  400b94:	00400cac 	.word	0x00400cac
  400b98:	0040068d 	.word	0x0040068d

00400b9c <_usart_sync_is_byte_received>:
{
  400b9c:	b510      	push	{r4, lr}
	ASSERT(device);
  400b9e:	4604      	mov	r4, r0
  400ba0:	f240 12cb 	movw	r2, #459	; 0x1cb
  400ba4:	4905      	ldr	r1, [pc, #20]	; (400bbc <_usart_sync_is_byte_received+0x20>)
  400ba6:	3000      	adds	r0, #0
  400ba8:	bf18      	it	ne
  400baa:	2001      	movne	r0, #1
  400bac:	4b04      	ldr	r3, [pc, #16]	; (400bc0 <_usart_sync_is_byte_received+0x24>)
  400bae:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  400bb0:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  400bb2:	6958      	ldr	r0, [r3, #20]
  400bb4:	f000 0001 	and.w	r0, r0, #1
}
  400bb8:	bd10      	pop	{r4, pc}
  400bba:	bf00      	nop
  400bbc:	00400cac 	.word	0x00400cac
  400bc0:	0040068d 	.word	0x0040068d

00400bc4 <_uart_get_usart_sync>:
}
  400bc4:	2000      	movs	r0, #0
  400bc6:	4770      	bx	lr

00400bc8 <main>:
*/
#include "function_def.h" 


int main(void)
{
  400bc8:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  400bca:	4b06      	ldr	r3, [pc, #24]	; (400be4 <main+0x1c>)
  400bcc:	4798      	blx	r3
	//}
	uint16_t status_regs[2];
	uint8_t data_ss = 0xFF;

while(1){
	enable_cs();
  400bce:	4b06      	ldr	r3, [pc, #24]	; (400be8 <main+0x20>)
  400bd0:	4798      	blx	r3
	//gpio_set_pin_level(PC25, false);
	//read_status_ltc(&status_regs);
	delay_us(1);
  400bd2:	2001      	movs	r0, #1
  400bd4:	4c05      	ldr	r4, [pc, #20]	; (400bec <main+0x24>)
  400bd6:	47a0      	blx	r4
	//gpio_set_pin_level(PC25, true);
	//for(int i = 0; i < 2; i++){
		//print_uart_ln((uint8_t*)&status_regs[i*2], 4);
	//}
	disable_cs();
  400bd8:	4b05      	ldr	r3, [pc, #20]	; (400bf0 <main+0x28>)
  400bda:	4798      	blx	r3
	/*enable_cs();
	isoSpi_send(&data_ss, 1);
	disable_cs();*/
	delay_us(100);
  400bdc:	2064      	movs	r0, #100	; 0x64
  400bde:	47a0      	blx	r4
  400be0:	e7f5      	b.n	400bce <main+0x6>
  400be2:	bf00      	nop
  400be4:	004001d5 	.word	0x004001d5
  400be8:	004001e1 	.word	0x004001e1
  400bec:	0040042d 	.word	0x0040042d
  400bf0:	004001f1 	.word	0x004001f1

00400bf4 <__libc_init_array>:
  400bf4:	b570      	push	{r4, r5, r6, lr}
  400bf6:	4e0d      	ldr	r6, [pc, #52]	; (400c2c <__libc_init_array+0x38>)
  400bf8:	4c0d      	ldr	r4, [pc, #52]	; (400c30 <__libc_init_array+0x3c>)
  400bfa:	1ba4      	subs	r4, r4, r6
  400bfc:	10a4      	asrs	r4, r4, #2
  400bfe:	2500      	movs	r5, #0
  400c00:	42a5      	cmp	r5, r4
  400c02:	d109      	bne.n	400c18 <__libc_init_array+0x24>
  400c04:	4e0b      	ldr	r6, [pc, #44]	; (400c34 <__libc_init_array+0x40>)
  400c06:	4c0c      	ldr	r4, [pc, #48]	; (400c38 <__libc_init_array+0x44>)
  400c08:	f000 f85c 	bl	400cc4 <_init>
  400c0c:	1ba4      	subs	r4, r4, r6
  400c0e:	10a4      	asrs	r4, r4, #2
  400c10:	2500      	movs	r5, #0
  400c12:	42a5      	cmp	r5, r4
  400c14:	d105      	bne.n	400c22 <__libc_init_array+0x2e>
  400c16:	bd70      	pop	{r4, r5, r6, pc}
  400c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400c1c:	4798      	blx	r3
  400c1e:	3501      	adds	r5, #1
  400c20:	e7ee      	b.n	400c00 <__libc_init_array+0xc>
  400c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400c26:	4798      	blx	r3
  400c28:	3501      	adds	r5, #1
  400c2a:	e7f2      	b.n	400c12 <__libc_init_array+0x1e>
  400c2c:	00400cd0 	.word	0x00400cd0
  400c30:	00400cd0 	.word	0x00400cd0
  400c34:	00400cd0 	.word	0x00400cd0
  400c38:	00400cd4 	.word	0x00400cd4
  400c3c:	682f2e2e 	.word	0x682f2e2e
  400c40:	732f6c61 	.word	0x732f6c61
  400c44:	682f6372 	.word	0x682f6372
  400c48:	735f6c61 	.word	0x735f6c61
  400c4c:	6d5f6970 	.word	0x6d5f6970
  400c50:	6e79735f 	.word	0x6e79735f
  400c54:	00632e63 	.word	0x00632e63
  400c58:	682f2e2e 	.word	0x682f2e2e
  400c5c:	732f6c61 	.word	0x732f6c61
  400c60:	682f6372 	.word	0x682f6372
  400c64:	755f6c61 	.word	0x755f6c61
  400c68:	74726173 	.word	0x74726173
  400c6c:	6e79735f 	.word	0x6e79735f
  400c70:	00632e63 	.word	0x00632e63

00400c74 <spi_regs>:
  400c74:	00000001 80000000 00000001 0496dc02     ................
  400c84:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  400c94:	735f6c70 632e6970 00000000              pl_spi.c....

00400ca0 <_uarts>:
  400ca0:	00000001 00000800 000000f4 682f2e2e     ............../h
  400cb0:	752f6c70 2f747261 5f6c7068 74726175     pl/uart/hpl_uart
  400cc0:	0000632e                                .c..

00400cc4 <_init>:
  400cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400cc6:	bf00      	nop
  400cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400cca:	bc08      	pop	{r3}
  400ccc:	469e      	mov	lr, r3
  400cce:	4770      	bx	lr

00400cd0 <__init_array_start>:
  400cd0:	0040018d 	.word	0x0040018d

00400cd4 <_fini>:
  400cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400cd6:	bf00      	nop
  400cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400cda:	bc08      	pop	{r3}
  400cdc:	469e      	mov	lr, r3
  400cde:	4770      	bx	lr

00400ce0 <__fini_array_start>:
  400ce0:	00400169 	.word	0x00400169
